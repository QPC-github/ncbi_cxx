/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Operand_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'soap_dataobj.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef SAMPLE_APP_SOAP_OPERAND_BASE_HPP
#define SAMPLE_APP_SOAP_OPERAND_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class COperand_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    COperand_Base(void);
    // destructor
    virtual ~COperand_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_operation {
            eAttlist_operation_add      = 1,
            eAttlist_operation_subtract = 2
        };
        
        /// Access to EAttlist_operation's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_operation)(void);
        
        // types
        typedef EAttlist_operation TOperation;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef EAttlist_operation TOperation
        ///  Check whether the Operation data member has been assigned a value.
        bool IsSetOperation(void) const;
        /// Check whether it is safe or not to call GetOperation method.
        bool CanGetOperation(void) const;
        void ResetOperation(void);
        TOperation GetOperation(void) const;
        void SetOperation(TOperation value);
        TOperation& SetOperation(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        EAttlist_operation m_Operation;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef int TX;
    typedef int TY;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef int TX
    ///  Check whether the X data member has been assigned a value.
    bool IsSetX(void) const;
    /// Check whether it is safe or not to call GetX method.
    bool CanGetX(void) const;
    void ResetX(void);
    TX GetX(void) const;
    void SetX(TX value);
    TX& SetX(void);

    /// mandatory
    /// typedef int TY
    ///  Check whether the Y data member has been assigned a value.
    bool IsSetY(void) const;
    /// Check whether it is safe or not to call GetY method.
    bool CanGetY(void) const;
    void ResetY(void);
    TY GetY(void) const;
    void SetY(TY value);
    TY& SetY(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    COperand_Base(const COperand_Base&);
    COperand_Base& operator=(const COperand_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    int m_X;
    int m_Y;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool COperand_Base::C_Attlist::IsSetOperation(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool COperand_Base::C_Attlist::CanGetOperation(void) const
{
    return IsSetOperation();
}

inline
void COperand_Base::C_Attlist::ResetOperation(void)
{
    m_Operation = (EAttlist_operation)(0);
    m_set_State[0] &= ~0x3;
}

inline
COperand_Base::C_Attlist::TOperation COperand_Base::C_Attlist::GetOperation(void) const
{
    if (!CanGetOperation()) {
        ThrowUnassigned(0);
    }
    return m_Operation;
}

inline
void COperand_Base::C_Attlist::SetOperation(COperand_Base::C_Attlist::TOperation value)
{
    m_Operation = value;
    m_set_State[0] |= 0x3;
}

inline
COperand_Base::C_Attlist::TOperation& COperand_Base::C_Attlist::SetOperation(void)
{
#ifdef _DEBUG
    if (!IsSetOperation()) {
        memset(&m_Operation,UnassignedByte(),sizeof(m_Operation));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Operation;
}

inline
bool COperand_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool COperand_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const COperand_Base::TAttlist& COperand_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<COperand_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
COperand_Base::TAttlist& COperand_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool COperand_Base::IsSetX(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool COperand_Base::CanGetX(void) const
{
    return IsSetX();
}

inline
void COperand_Base::ResetX(void)
{
    m_X = 0;
    m_set_State[0] &= ~0xc;
}

inline
COperand_Base::TX COperand_Base::GetX(void) const
{
    if (!CanGetX()) {
        ThrowUnassigned(1);
    }
    return m_X;
}

inline
void COperand_Base::SetX(COperand_Base::TX value)
{
    m_X = value;
    m_set_State[0] |= 0xc;
}

inline
COperand_Base::TX& COperand_Base::SetX(void)
{
#ifdef _DEBUG
    if (!IsSetX()) {
        memset(&m_X,UnassignedByte(),sizeof(m_X));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_X;
}

inline
bool COperand_Base::IsSetY(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool COperand_Base::CanGetY(void) const
{
    return IsSetY();
}

inline
void COperand_Base::ResetY(void)
{
    m_Y = 0;
    m_set_State[0] &= ~0x30;
}

inline
COperand_Base::TY COperand_Base::GetY(void) const
{
    if (!CanGetY()) {
        ThrowUnassigned(2);
    }
    return m_Y;
}

inline
void COperand_Base::SetY(COperand_Base::TY value)
{
    m_Y = value;
    m_set_State[0] |= 0x30;
}

inline
COperand_Base::TY& COperand_Base::SetY(void)
{
#ifdef _DEBUG
    if (!IsSetY()) {
        memset(&m_Y,UnassignedByte(),sizeof(m_Y));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Y;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // SAMPLE_APP_SOAP_OPERAND_BASE_HPP
