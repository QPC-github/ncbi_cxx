/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file NCBI_Sample_ASN_Type_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'sample_asn.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef SAMPLE_APP_ASN_NCBI_SAMPLE_ASN_TYPE_BASE_HPP
#define SAMPLE_APP_ASN_NCBI_SAMPLE_ASN_TYPE_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CDate;
class CObject_id;


// generated classes

/////////////////////////////////////////////////////////////////////////////
///
/// Some simple type
///
class CNCBI_Sample_ASN_Type_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CNCBI_Sample_ASN_Type_Base(void);
    // destructor
    virtual ~CNCBI_Sample_ASN_Type_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef CDate TDate;
    typedef CObject_id TId;
    typedef string TName;
    typedef int TTag;

    // getters
    // setters

    /// mandatory
    /// typedef CDate TDate
    ///  Check whether the Date data member has been assigned a value.
    bool IsSetDate(void) const;
    /// Check whether it is safe or not to call GetDate method.
    bool CanGetDate(void) const;
    void ResetDate(void);
    const TDate& GetDate(void) const;
    void SetDate(TDate& value);
    TDate& SetDate(void);

    /// mandatory
    /// typedef CObject_id TId
    ///  Check whether the Id data member has been assigned a value.
    bool IsSetId(void) const;
    /// Check whether it is safe or not to call GetId method.
    bool CanGetId(void) const;
    void ResetId(void);
    const TId& GetId(void) const;
    void SetId(TId& value);
    TId& SetId(void);

    /// optional
    /// typedef string TName
    ///  Check whether the Name data member has been assigned a value.
    bool IsSetName(void) const;
    /// Check whether it is safe or not to call GetName method.
    bool CanGetName(void) const;
    void ResetName(void);
    const TName& GetName(void) const;
    void SetName(const TName& value);
    TName& SetName(void);

    /// optional with default 999
    /// typedef int TTag
    ///  Check whether the Tag data member has been assigned a value.
    bool IsSetTag(void) const;
    /// Check whether it is safe or not to call GetTag method.
    bool CanGetTag(void) const;
    void ResetTag(void);
    void SetDefaultTag(void);
    TTag GetTag(void) const;
    void SetTag(TTag value);
    TTag& SetTag(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CNCBI_Sample_ASN_Type_Base(const CNCBI_Sample_ASN_Type_Base&);
    CNCBI_Sample_ASN_Type_Base& operator=(const CNCBI_Sample_ASN_Type_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TDate > m_Date;
    CRef< TId > m_Id;
    string m_Name;
    int m_Tag;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CNCBI_Sample_ASN_Type_Base::IsSetDate(void) const
{
    return m_Date.NotEmpty();
}

inline
bool CNCBI_Sample_ASN_Type_Base::CanGetDate(void) const
{
    return true;
}

inline
const CNCBI_Sample_ASN_Type_Base::TDate& CNCBI_Sample_ASN_Type_Base::GetDate(void) const
{
    if ( !m_Date ) {
        const_cast<CNCBI_Sample_ASN_Type_Base*>(this)->ResetDate();
    }
    return (*m_Date);
}

inline
CNCBI_Sample_ASN_Type_Base::TDate& CNCBI_Sample_ASN_Type_Base::SetDate(void)
{
    if ( !m_Date ) {
        ResetDate();
    }
    return (*m_Date);
}

inline
bool CNCBI_Sample_ASN_Type_Base::IsSetId(void) const
{
    return m_Id.NotEmpty();
}

inline
bool CNCBI_Sample_ASN_Type_Base::CanGetId(void) const
{
    return true;
}

inline
const CNCBI_Sample_ASN_Type_Base::TId& CNCBI_Sample_ASN_Type_Base::GetId(void) const
{
    if ( !m_Id ) {
        const_cast<CNCBI_Sample_ASN_Type_Base*>(this)->ResetId();
    }
    return (*m_Id);
}

inline
CNCBI_Sample_ASN_Type_Base::TId& CNCBI_Sample_ASN_Type_Base::SetId(void)
{
    if ( !m_Id ) {
        ResetId();
    }
    return (*m_Id);
}

inline
bool CNCBI_Sample_ASN_Type_Base::IsSetName(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CNCBI_Sample_ASN_Type_Base::CanGetName(void) const
{
    return IsSetName();
}

inline
const CNCBI_Sample_ASN_Type_Base::TName& CNCBI_Sample_ASN_Type_Base::GetName(void) const
{
    if (!CanGetName()) {
        ThrowUnassigned(2);
    }
    return m_Name;
}

inline
void CNCBI_Sample_ASN_Type_Base::SetName(const CNCBI_Sample_ASN_Type_Base::TName& value)
{
    m_Name = value;
    m_set_State[0] |= 0x30;
}

inline
CNCBI_Sample_ASN_Type_Base::TName& CNCBI_Sample_ASN_Type_Base::SetName(void)
{
#ifdef _DEBUG
    if (!IsSetName()) {
        m_Name = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Name;
}

inline
bool CNCBI_Sample_ASN_Type_Base::IsSetTag(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CNCBI_Sample_ASN_Type_Base::CanGetTag(void) const
{
    return true;
}

inline
void CNCBI_Sample_ASN_Type_Base::ResetTag(void)
{
    m_Tag = 999;
    m_set_State[0] &= ~0xc0;
}

inline
void CNCBI_Sample_ASN_Type_Base::SetDefaultTag(void)
{
    ResetTag();
}

inline
CNCBI_Sample_ASN_Type_Base::TTag CNCBI_Sample_ASN_Type_Base::GetTag(void) const
{
    return m_Tag;
}

inline
void CNCBI_Sample_ASN_Type_Base::SetTag(CNCBI_Sample_ASN_Type_Base::TTag value)
{
    m_Tag = value;
    m_set_State[0] |= 0xc0;
}

inline
CNCBI_Sample_ASN_Type_Base::TTag& CNCBI_Sample_ASN_Type_Base::SetTag(void)
{
#ifdef _DEBUG
    if (!IsSetTag()) {
        memset(&m_Tag,UnassignedByte(),sizeof(m_Tag));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Tag;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // SAMPLE_APP_ASN_NCBI_SAMPLE_ASN_TYPE_BASE_HPP
