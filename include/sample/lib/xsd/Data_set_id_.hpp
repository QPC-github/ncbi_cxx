/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Data_set_id_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'xsd_sample_lib.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef SAMPLE_LIB_XSD_DATA_SET_ID_BASE_HPP
#define SAMPLE_LIB_XSD_DATA_SET_ID_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
/// ============================================ 
/// This section is mapped from module "NCBI-sample"
///================================================= 
/// This is only a demo
/// Elements used by other modules:
///          Data-set-id 
/// ============================================ 
class CData_set_id_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CData_set_id_Base(void);
    // destructor
    virtual ~CData_set_id_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class C_Data_set_id_type : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Data_set_id_type(void);
        // destructor
        ~C_Data_set_id_type(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        /////////////////////////////////////////////////////////////////////////////
        class C_Attlist : public CSerialObject
        {
            typedef CSerialObject Tparent;
        public:
            // constructor
            C_Attlist(void);
            // destructor
            ~C_Attlist(void);
        
            // type info
            DECLARE_INTERNAL_TYPE_INFO();
        
            enum EData_set_id_type_Attlist_value {
                eData_set_id_type_Attlist_value_dump   = 1,
                eData_set_id_type_Attlist_value_query  = 2,
                eData_set_id_type_Attlist_value_single = 3
            };
            
            /// Access to EData_set_id_type_Attlist_value's attributes (values, names) as defined in spec
            static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EData_set_id_type_Attlist_value)(void);
            
            // types
            typedef int TValue;
        
            // getters
            // setters
        
            /// optional
            /// typedef int TValue
            ///  Check whether the Value data member has been assigned a value.
            bool IsSetValue(void) const;
            /// Check whether it is safe or not to call GetValue method.
            bool CanGetValue(void) const;
            void ResetValue(void);
            TValue GetValue(void) const;
            void SetValue(TValue value);
            TValue& SetValue(void);
        
            /// Reset the whole object
            void Reset(void);
        
        
        private:
            // Prohibit copy constructor and assignment operator
            C_Attlist(const C_Attlist&);
            C_Attlist& operator=(const C_Attlist&);
        
            // data
            Uint4 m_set_State[1];
            int m_Value;
        };
        // types
        typedef C_Attlist TAttlist;
        typedef int TData_set_id_type;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef C_Attlist TAttlist
        ///  Check whether the Attlist data member has been assigned a value.
        bool IsSetAttlist(void) const;
        /// Check whether it is safe or not to call GetAttlist method.
        bool CanGetAttlist(void) const;
        void ResetAttlist(void);
        const TAttlist& GetAttlist(void) const;
        void SetAttlist(TAttlist& value);
        TAttlist& SetAttlist(void);
    
        /// mandatory
        /// typedef int TData_set_id_type
        ///  Check whether the Data_set_id_type data member has been assigned a value.
        bool IsSetData_set_id_type(void) const;
        /// Check whether it is safe or not to call GetData_set_id_type method.
        bool CanGetData_set_id_type(void) const;
        void ResetData_set_id_type(void);
        const TData_set_id_type& GetData_set_id_type(void) const;
        void SetData_set_id_type(TData_set_id_type value);
        TData_set_id_type& SetData_set_id_type(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Data_set_id_type(const C_Data_set_id_type&);
        C_Data_set_id_type& operator=(const C_Data_set_id_type&);
    
        // data
        Uint4 m_set_State[1];
        CRef< TAttlist > m_Attlist;
        int m_Data_set_id_type;
    };
    /////////////////////////////////////////////////////////////////////////////
    class C_Data_set_id_uids : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Data_set_id_uids(void);
        // destructor
        ~C_Data_set_id_uids(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        /////////////////////////////////////////////////////////////////////////////
        class C_E_EData_set_id_uids : public CSerialObject
        {
            typedef CSerialObject Tparent;
        public:
            // constructor
            C_E_EData_set_id_uids(void);
            // destructor
            ~C_E_EData_set_id_uids(void);
        
            // type info
            DECLARE_INTERNAL_TYPE_INFO();
        
            // types
            typedef int TData_set_id_uids_E;
        
            // getters
            // setters
        
            /// mandatory
            /// typedef int TData_set_id_uids_E
            ///  Check whether the Data_set_id_uids_E data member has been assigned a value.
            bool IsSetData_set_id_uids_E(void) const;
            /// Check whether it is safe or not to call GetData_set_id_uids_E method.
            bool CanGetData_set_id_uids_E(void) const;
            void ResetData_set_id_uids_E(void);
            TData_set_id_uids_E GetData_set_id_uids_E(void) const;
            void SetData_set_id_uids_E(TData_set_id_uids_E value);
            TData_set_id_uids_E& SetData_set_id_uids_E(void);
        
            /// Reset the whole object
            void Reset(void);
        
        
        private:
            // Prohibit copy constructor and assignment operator
            C_E_EData_set_id_uids(const C_E_EData_set_id_uids&);
            C_E_EData_set_id_uids& operator=(const C_E_EData_set_id_uids&);
        
            // data
            Uint4 m_set_State[1];
            int m_Data_set_id_uids_E;
        };
        // types
        typedef C_E_EData_set_id_uids C_E;
        typedef list< CRef< C_E_EData_set_id_uids > > TEData_set_id_uids;
    
        // getters
        // setters
    
        /// optional
        /// typedef list< CRef< C_E_EData_set_id_uids > > TEData_set_id_uids
        ///  Check whether the EData_set_id_uids data member has been assigned a value.
        bool IsSetEData_set_id_uids(void) const;
        /// Check whether it is safe or not to call GetEData_set_id_uids method.
        bool CanGetEData_set_id_uids(void) const;
        void ResetEData_set_id_uids(void);
        const TEData_set_id_uids& GetEData_set_id_uids(void) const;
        TEData_set_id_uids& SetEData_set_id_uids(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Data_set_id_uids(const C_Data_set_id_uids&);
        C_Data_set_id_uids& operator=(const C_Data_set_id_uids&);
    
        // data
        Uint4 m_set_State[1];
        list< CRef< C_E_EData_set_id_uids > > m_EData_set_id_uids;
    };
    // types
    typedef string TData_set_id_version;
    typedef string TData_set_id_name;
    typedef int TData_set_id_num;
    typedef C_Data_set_id_type TData_set_id_type;
    typedef double TData_set_id_weight;
    typedef C_Data_set_id_uids TData_set_id_uids;

    // getters
    // setters

    /// mandatory
    /// typedef string TData_set_id_version
    ///  Check whether the Data_set_id_version data member has been assigned a value.
    bool IsSetData_set_id_version(void) const;
    /// Check whether it is safe or not to call GetData_set_id_version method.
    bool CanGetData_set_id_version(void) const;
    void ResetData_set_id_version(void);
    const TData_set_id_version& GetData_set_id_version(void) const;
    void SetData_set_id_version(const TData_set_id_version& value);
    TData_set_id_version& SetData_set_id_version(void);

    /// mandatory
    /// typedef string TData_set_id_name
    ///  Check whether the Data_set_id_name data member has been assigned a value.
    bool IsSetData_set_id_name(void) const;
    /// Check whether it is safe or not to call GetData_set_id_name method.
    bool CanGetData_set_id_name(void) const;
    void ResetData_set_id_name(void);
    const TData_set_id_name& GetData_set_id_name(void) const;
    void SetData_set_id_name(const TData_set_id_name& value);
    TData_set_id_name& SetData_set_id_name(void);

    /// mandatory
    /// typedef int TData_set_id_num
    ///  Check whether the Data_set_id_num data member has been assigned a value.
    bool IsSetData_set_id_num(void) const;
    /// Check whether it is safe or not to call GetData_set_id_num method.
    bool CanGetData_set_id_num(void) const;
    void ResetData_set_id_num(void);
    TData_set_id_num GetData_set_id_num(void) const;
    void SetData_set_id_num(TData_set_id_num value);
    TData_set_id_num& SetData_set_id_num(void);

    /// mandatory
    /// typedef C_Data_set_id_type TData_set_id_type
    ///  Check whether the Data_set_id_type data member has been assigned a value.
    bool IsSetData_set_id_type(void) const;
    /// Check whether it is safe or not to call GetData_set_id_type method.
    bool CanGetData_set_id_type(void) const;
    void ResetData_set_id_type(void);
    const TData_set_id_type& GetData_set_id_type(void) const;
    void SetData_set_id_type(TData_set_id_type& value);
    TData_set_id_type& SetData_set_id_type(void);

    /// optional
    /// typedef double TData_set_id_weight
    ///  Check whether the Data_set_id_weight data member has been assigned a value.
    bool IsSetData_set_id_weight(void) const;
    /// Check whether it is safe or not to call GetData_set_id_weight method.
    bool CanGetData_set_id_weight(void) const;
    void ResetData_set_id_weight(void);
    TData_set_id_weight GetData_set_id_weight(void) const;
    void SetData_set_id_weight(TData_set_id_weight value);
    TData_set_id_weight& SetData_set_id_weight(void);

    /// optional
    /// typedef C_Data_set_id_uids TData_set_id_uids
    ///  Check whether the Data_set_id_uids data member has been assigned a value.
    bool IsSetData_set_id_uids(void) const;
    /// Check whether it is safe or not to call GetData_set_id_uids method.
    bool CanGetData_set_id_uids(void) const;
    void ResetData_set_id_uids(void);
    const TData_set_id_uids& GetData_set_id_uids(void) const;
    void SetData_set_id_uids(TData_set_id_uids& value);
    TData_set_id_uids& SetData_set_id_uids(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CData_set_id_Base(const CData_set_id_Base&);
    CData_set_id_Base& operator=(const CData_set_id_Base&);

    // data
    Uint4 m_set_State[1];
    string m_Data_set_id_version;
    string m_Data_set_id_name;
    int m_Data_set_id_num;
    CRef< TData_set_id_type > m_Data_set_id_type;
    double m_Data_set_id_weight;
    CRef< TData_set_id_uids > m_Data_set_id_uids;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CData_set_id_Base::C_Data_set_id_type::C_Attlist::IsSetValue(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CData_set_id_Base::C_Data_set_id_type::C_Attlist::CanGetValue(void) const
{
    return IsSetValue();
}

inline
void CData_set_id_Base::C_Data_set_id_type::C_Attlist::ResetValue(void)
{
    m_Value = (EData_set_id_type_Attlist_value)(0);
    m_set_State[0] &= ~0x3;
}

inline
CData_set_id_Base::C_Data_set_id_type::C_Attlist::TValue CData_set_id_Base::C_Data_set_id_type::C_Attlist::GetValue(void) const
{
    if (!CanGetValue()) {
        ThrowUnassigned(0);
    }
    return m_Value;
}

inline
void CData_set_id_Base::C_Data_set_id_type::C_Attlist::SetValue(CData_set_id_Base::C_Data_set_id_type::C_Attlist::TValue value)
{
    m_Value = value;
    m_set_State[0] |= 0x3;
}

inline
CData_set_id_Base::C_Data_set_id_type::C_Attlist::TValue& CData_set_id_Base::C_Data_set_id_type::C_Attlist::SetValue(void)
{
#ifdef _DEBUG
    if (!IsSetValue()) {
        memset(&m_Value,UnassignedByte(),sizeof(m_Value));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Value;
}

inline
bool CData_set_id_Base::C_Data_set_id_type::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CData_set_id_Base::C_Data_set_id_type::CanGetAttlist(void) const
{
    return true;
}

inline
const CData_set_id_Base::C_Data_set_id_type::TAttlist& CData_set_id_Base::C_Data_set_id_type::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<C_Data_set_id_type*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CData_set_id_Base::C_Data_set_id_type::TAttlist& CData_set_id_Base::C_Data_set_id_type::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CData_set_id_Base::C_Data_set_id_type::IsSetData_set_id_type(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CData_set_id_Base::C_Data_set_id_type::CanGetData_set_id_type(void) const
{
    return IsSetData_set_id_type();
}

inline
void CData_set_id_Base::C_Data_set_id_type::ResetData_set_id_type(void)
{
    m_Data_set_id_type = 0;
    m_set_State[0] &= ~0xc;
}

inline
const CData_set_id_Base::C_Data_set_id_type::TData_set_id_type& CData_set_id_Base::C_Data_set_id_type::GetData_set_id_type(void) const
{
    if (!CanGetData_set_id_type()) {
        ThrowUnassigned(1);
    }
    return m_Data_set_id_type;
}

inline
void CData_set_id_Base::C_Data_set_id_type::SetData_set_id_type(CData_set_id_Base::C_Data_set_id_type::TData_set_id_type value)
{
    m_Data_set_id_type = value;
    m_set_State[0] |= 0xc;
}

inline
CData_set_id_Base::C_Data_set_id_type::TData_set_id_type& CData_set_id_Base::C_Data_set_id_type::SetData_set_id_type(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_type()) {
        memset(&m_Data_set_id_type,UnassignedByte(),sizeof(m_Data_set_id_type));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Data_set_id_type;
}

inline
bool CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::IsSetData_set_id_uids_E(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::CanGetData_set_id_uids_E(void) const
{
    return IsSetData_set_id_uids_E();
}

inline
void CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::ResetData_set_id_uids_E(void)
{
    m_Data_set_id_uids_E = 0;
    m_set_State[0] &= ~0x3;
}

inline
CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::TData_set_id_uids_E CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::GetData_set_id_uids_E(void) const
{
    if (!CanGetData_set_id_uids_E()) {
        ThrowUnassigned(0);
    }
    return m_Data_set_id_uids_E;
}

inline
void CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::SetData_set_id_uids_E(CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::TData_set_id_uids_E value)
{
    m_Data_set_id_uids_E = value;
    m_set_State[0] |= 0x3;
}

inline
CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::TData_set_id_uids_E& CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::SetData_set_id_uids_E(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_uids_E()) {
        memset(&m_Data_set_id_uids_E,UnassignedByte(),sizeof(m_Data_set_id_uids_E));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Data_set_id_uids_E;
}

inline
bool CData_set_id_Base::C_Data_set_id_uids::IsSetEData_set_id_uids(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CData_set_id_Base::C_Data_set_id_uids::CanGetEData_set_id_uids(void) const
{
    return true;
}

inline
const CData_set_id_Base::C_Data_set_id_uids::TEData_set_id_uids& CData_set_id_Base::C_Data_set_id_uids::GetEData_set_id_uids(void) const
{
    return m_EData_set_id_uids;
}

inline
CData_set_id_Base::C_Data_set_id_uids::TEData_set_id_uids& CData_set_id_Base::C_Data_set_id_uids::SetEData_set_id_uids(void)
{
    m_set_State[0] |= 0x1;
    return m_EData_set_id_uids;
}

inline
bool CData_set_id_Base::IsSetData_set_id_version(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CData_set_id_Base::CanGetData_set_id_version(void) const
{
    return IsSetData_set_id_version();
}

inline
const CData_set_id_Base::TData_set_id_version& CData_set_id_Base::GetData_set_id_version(void) const
{
    if (!CanGetData_set_id_version()) {
        ThrowUnassigned(0);
    }
    return m_Data_set_id_version;
}

inline
void CData_set_id_Base::SetData_set_id_version(const CData_set_id_Base::TData_set_id_version& value)
{
    m_Data_set_id_version = value;
    m_set_State[0] |= 0x3;
}

inline
CData_set_id_Base::TData_set_id_version& CData_set_id_Base::SetData_set_id_version(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_version()) {
        m_Data_set_id_version = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Data_set_id_version;
}

inline
bool CData_set_id_Base::IsSetData_set_id_name(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CData_set_id_Base::CanGetData_set_id_name(void) const
{
    return IsSetData_set_id_name();
}

inline
const CData_set_id_Base::TData_set_id_name& CData_set_id_Base::GetData_set_id_name(void) const
{
    if (!CanGetData_set_id_name()) {
        ThrowUnassigned(1);
    }
    return m_Data_set_id_name;
}

inline
void CData_set_id_Base::SetData_set_id_name(const CData_set_id_Base::TData_set_id_name& value)
{
    m_Data_set_id_name = value;
    m_set_State[0] |= 0xc;
}

inline
CData_set_id_Base::TData_set_id_name& CData_set_id_Base::SetData_set_id_name(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_name()) {
        m_Data_set_id_name = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Data_set_id_name;
}

inline
bool CData_set_id_Base::IsSetData_set_id_num(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CData_set_id_Base::CanGetData_set_id_num(void) const
{
    return IsSetData_set_id_num();
}

inline
void CData_set_id_Base::ResetData_set_id_num(void)
{
    m_Data_set_id_num = 0;
    m_set_State[0] &= ~0x30;
}

inline
CData_set_id_Base::TData_set_id_num CData_set_id_Base::GetData_set_id_num(void) const
{
    if (!CanGetData_set_id_num()) {
        ThrowUnassigned(2);
    }
    return m_Data_set_id_num;
}

inline
void CData_set_id_Base::SetData_set_id_num(CData_set_id_Base::TData_set_id_num value)
{
    m_Data_set_id_num = value;
    m_set_State[0] |= 0x30;
}

inline
CData_set_id_Base::TData_set_id_num& CData_set_id_Base::SetData_set_id_num(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_num()) {
        memset(&m_Data_set_id_num,UnassignedByte(),sizeof(m_Data_set_id_num));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Data_set_id_num;
}

inline
bool CData_set_id_Base::IsSetData_set_id_type(void) const
{
    return m_Data_set_id_type.NotEmpty();
}

inline
bool CData_set_id_Base::CanGetData_set_id_type(void) const
{
    return true;
}

inline
const CData_set_id_Base::TData_set_id_type& CData_set_id_Base::GetData_set_id_type(void) const
{
    if ( !m_Data_set_id_type ) {
        const_cast<CData_set_id_Base*>(this)->ResetData_set_id_type();
    }
    return (*m_Data_set_id_type);
}

inline
CData_set_id_Base::TData_set_id_type& CData_set_id_Base::SetData_set_id_type(void)
{
    if ( !m_Data_set_id_type ) {
        ResetData_set_id_type();
    }
    return (*m_Data_set_id_type);
}

inline
bool CData_set_id_Base::IsSetData_set_id_weight(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CData_set_id_Base::CanGetData_set_id_weight(void) const
{
    return IsSetData_set_id_weight();
}

inline
void CData_set_id_Base::ResetData_set_id_weight(void)
{
    m_Data_set_id_weight = 0;
    m_set_State[0] &= ~0x300;
}

inline
CData_set_id_Base::TData_set_id_weight CData_set_id_Base::GetData_set_id_weight(void) const
{
    if (!CanGetData_set_id_weight()) {
        ThrowUnassigned(4);
    }
    return m_Data_set_id_weight;
}

inline
void CData_set_id_Base::SetData_set_id_weight(CData_set_id_Base::TData_set_id_weight value)
{
    m_Data_set_id_weight = value;
    m_set_State[0] |= 0x300;
}

inline
CData_set_id_Base::TData_set_id_weight& CData_set_id_Base::SetData_set_id_weight(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_weight()) {
        memset(&m_Data_set_id_weight,UnassignedByte(),sizeof(m_Data_set_id_weight));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Data_set_id_weight;
}

inline
bool CData_set_id_Base::IsSetData_set_id_uids(void) const
{
    return m_Data_set_id_uids.NotEmpty();
}

inline
bool CData_set_id_Base::CanGetData_set_id_uids(void) const
{
    return IsSetData_set_id_uids();
}

inline
const CData_set_id_Base::TData_set_id_uids& CData_set_id_Base::GetData_set_id_uids(void) const
{
    if (!CanGetData_set_id_uids()) {
        ThrowUnassigned(5);
    }
    return (*m_Data_set_id_uids);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // SAMPLE_LIB_XSD_DATA_SET_ID_BASE_HPP
