/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Data_set_id_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'asn_sample_lib.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef SAMPLE_LIB_ASN_LIB_DATA_SET_ID_BASE_HPP
#define SAMPLE_LIB_ASN_LIB_DATA_SET_ID_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CData_set_id_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CData_set_id_Base(void);
    // destructor
    virtual ~CData_set_id_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    enum EType {
        eType_dump   = 1,
        eType_query  = 2,
        eType_single = 3
    };
    
    /// Access to EType's attributes (values, names) as defined in spec
    static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EType)(void);
    
    // types
    typedef string TVersion;
    typedef CStringUTF8 TName;
    typedef int TNum;
    typedef int TType;
    typedef double TWeight;
    typedef list< int > TUids;

    // getters
    // setters

    /// mandatory
    /// typedef string TVersion
    ///  Check whether the Version data member has been assigned a value.
    bool IsSetVersion(void) const;
    /// Check whether it is safe or not to call GetVersion method.
    bool CanGetVersion(void) const;
    void ResetVersion(void);
    const TVersion& GetVersion(void) const;
    void SetVersion(const TVersion& value);
    TVersion& SetVersion(void);

    /// mandatory
    /// typedef CStringUTF8 TName
    ///  Check whether the Name data member has been assigned a value.
    bool IsSetName(void) const;
    /// Check whether it is safe or not to call GetName method.
    bool CanGetName(void) const;
    void ResetName(void);
    const TName& GetName(void) const;
    void SetName(const TName& value);
    TName& SetName(void);

    /// mandatory
    /// typedef int TNum
    ///  Check whether the Num data member has been assigned a value.
    bool IsSetNum(void) const;
    /// Check whether it is safe or not to call GetNum method.
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(TNum value);
    TNum& SetNum(void);

    /// mandatory
    /// typedef int TType
    ///  Check whether the Type data member has been assigned a value.
    bool IsSetType(void) const;
    /// Check whether it is safe or not to call GetType method.
    bool CanGetType(void) const;
    void ResetType(void);
    TType GetType(void) const;
    void SetType(TType value);
    TType& SetType(void);

    /// optional
    /// typedef double TWeight
    ///  Check whether the Weight data member has been assigned a value.
    bool IsSetWeight(void) const;
    /// Check whether it is safe or not to call GetWeight method.
    bool CanGetWeight(void) const;
    void ResetWeight(void);
    TWeight GetWeight(void) const;
    void SetWeight(TWeight value);
    TWeight& SetWeight(void);

    /// optional
    /// typedef list< int > TUids
    ///  Check whether the Uids data member has been assigned a value.
    bool IsSetUids(void) const;
    /// Check whether it is safe or not to call GetUids method.
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CData_set_id_Base(const CData_set_id_Base&);
    CData_set_id_Base& operator=(const CData_set_id_Base&);

    // data
    Uint4 m_set_State[1];
    string m_Version;
    CStringUTF8 m_Name;
    int m_Num;
    int m_Type;
    double m_Weight;
    list< int > m_Uids;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CData_set_id_Base::IsSetVersion(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CData_set_id_Base::CanGetVersion(void) const
{
    return IsSetVersion();
}

inline
const CData_set_id_Base::TVersion& CData_set_id_Base::GetVersion(void) const
{
    if (!CanGetVersion()) {
        ThrowUnassigned(0);
    }
    return m_Version;
}

inline
void CData_set_id_Base::SetVersion(const CData_set_id_Base::TVersion& value)
{
    m_Version = value;
    m_set_State[0] |= 0x3;
}

inline
CData_set_id_Base::TVersion& CData_set_id_Base::SetVersion(void)
{
#ifdef _DEBUG
    if (!IsSetVersion()) {
        m_Version = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Version;
}

inline
bool CData_set_id_Base::IsSetName(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CData_set_id_Base::CanGetName(void) const
{
    return IsSetName();
}

inline
const CData_set_id_Base::TName& CData_set_id_Base::GetName(void) const
{
    if (!CanGetName()) {
        ThrowUnassigned(1);
    }
    return m_Name;
}

inline
void CData_set_id_Base::SetName(const CData_set_id_Base::TName& value)
{
    m_Name = value;
    m_set_State[0] |= 0xc;
}

inline
CData_set_id_Base::TName& CData_set_id_Base::SetName(void)
{
#ifdef _DEBUG
    if (!IsSetName()) {
        m_Name = UnassignedStringUTF8();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Name;
}

inline
bool CData_set_id_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CData_set_id_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CData_set_id_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x30;
}

inline
CData_set_id_Base::TNum CData_set_id_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(2);
    }
    return m_Num;
}

inline
void CData_set_id_Base::SetNum(CData_set_id_Base::TNum value)
{
    m_Num = value;
    m_set_State[0] |= 0x30;
}

inline
CData_set_id_Base::TNum& CData_set_id_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,UnassignedByte(),sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Num;
}

inline
bool CData_set_id_Base::IsSetType(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CData_set_id_Base::CanGetType(void) const
{
    return IsSetType();
}

inline
void CData_set_id_Base::ResetType(void)
{
    m_Type = (EType)(0);
    m_set_State[0] &= ~0xc0;
}

inline
CData_set_id_Base::TType CData_set_id_Base::GetType(void) const
{
    if (!CanGetType()) {
        ThrowUnassigned(3);
    }
    return m_Type;
}

inline
void CData_set_id_Base::SetType(CData_set_id_Base::TType value)
{
    m_Type = value;
    m_set_State[0] |= 0xc0;
}

inline
CData_set_id_Base::TType& CData_set_id_Base::SetType(void)
{
#ifdef _DEBUG
    if (!IsSetType()) {
        memset(&m_Type,UnassignedByte(),sizeof(m_Type));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Type;
}

inline
bool CData_set_id_Base::IsSetWeight(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CData_set_id_Base::CanGetWeight(void) const
{
    return IsSetWeight();
}

inline
void CData_set_id_Base::ResetWeight(void)
{
    m_Weight = 0;
    m_set_State[0] &= ~0x300;
}

inline
CData_set_id_Base::TWeight CData_set_id_Base::GetWeight(void) const
{
    if (!CanGetWeight()) {
        ThrowUnassigned(4);
    }
    return m_Weight;
}

inline
void CData_set_id_Base::SetWeight(CData_set_id_Base::TWeight value)
{
    m_Weight = value;
    m_set_State[0] |= 0x300;
}

inline
CData_set_id_Base::TWeight& CData_set_id_Base::SetWeight(void)
{
#ifdef _DEBUG
    if (!IsSetWeight()) {
        memset(&m_Weight,UnassignedByte(),sizeof(m_Weight));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Weight;
}

inline
bool CData_set_id_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CData_set_id_Base::CanGetUids(void) const
{
    return true;
}

inline
const CData_set_id_Base::TUids& CData_set_id_Base::GetUids(void) const
{
    return m_Uids;
}

inline
CData_set_id_Base::TUids& CData_set_id_Base::SetUids(void)
{
    m_set_State[0] |= 0x400;
    return m_Uids;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // SAMPLE_LIB_ASN_LIB_DATA_SET_ID_BASE_HPP
