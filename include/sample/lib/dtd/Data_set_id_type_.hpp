/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Data_set_id_type_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'dtd_sample_lib.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef SAMPLE_LIB_DTD_DATA_SET_ID_TYPE_BASE_HPP
#define SAMPLE_LIB_DTD_DATA_SET_ID_TYPE_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CData_set_id_type_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CData_set_id_type_Base(void);
    // destructor
    virtual ~CData_set_id_type_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_value {
            eAttlist_value_dump   = 1,
            eAttlist_value_query  = 2,
            eAttlist_value_single = 3
        };
        
        /// Access to EAttlist_value's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_value)(void);
        
        // types
        typedef EAttlist_value TValue;
    
        // getters
        // setters
    
        /// optional
        /// typedef EAttlist_value TValue
        ///  Check whether the Value data member has been assigned a value.
        bool IsSetValue(void) const;
        /// Check whether it is safe or not to call GetValue method.
        bool CanGetValue(void) const;
        void ResetValue(void);
        TValue GetValue(void) const;
        void SetValue(TValue value);
        TValue& SetValue(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        EAttlist_value m_Value;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef string TData_set_id_type;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef string TData_set_id_type
    ///  Check whether the Data_set_id_type data member has been assigned a value.
    bool IsSetData_set_id_type(void) const;
    /// Check whether it is safe or not to call GetData_set_id_type method.
    bool CanGetData_set_id_type(void) const;
    void ResetData_set_id_type(void);
    const TData_set_id_type& GetData_set_id_type(void) const;
    void SetData_set_id_type(const TData_set_id_type& value);
    TData_set_id_type& SetData_set_id_type(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CData_set_id_type_Base(const CData_set_id_type_Base&);
    CData_set_id_type_Base& operator=(const CData_set_id_type_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    string m_Data_set_id_type;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CData_set_id_type_Base::C_Attlist::IsSetValue(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CData_set_id_type_Base::C_Attlist::CanGetValue(void) const
{
    return IsSetValue();
}

inline
void CData_set_id_type_Base::C_Attlist::ResetValue(void)
{
    m_Value = (EAttlist_value)(0);
    m_set_State[0] &= ~0x3;
}

inline
CData_set_id_type_Base::C_Attlist::TValue CData_set_id_type_Base::C_Attlist::GetValue(void) const
{
    if (!CanGetValue()) {
        ThrowUnassigned(0);
    }
    return m_Value;
}

inline
void CData_set_id_type_Base::C_Attlist::SetValue(CData_set_id_type_Base::C_Attlist::TValue value)
{
    m_Value = value;
    m_set_State[0] |= 0x3;
}

inline
CData_set_id_type_Base::C_Attlist::TValue& CData_set_id_type_Base::C_Attlist::SetValue(void)
{
#ifdef _DEBUG
    if (!IsSetValue()) {
        memset(&m_Value,UnassignedByte(),sizeof(m_Value));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Value;
}

inline
bool CData_set_id_type_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CData_set_id_type_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CData_set_id_type_Base::TAttlist& CData_set_id_type_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CData_set_id_type_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CData_set_id_type_Base::TAttlist& CData_set_id_type_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CData_set_id_type_Base::IsSetData_set_id_type(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CData_set_id_type_Base::CanGetData_set_id_type(void) const
{
    return IsSetData_set_id_type();
}

inline
const CData_set_id_type_Base::TData_set_id_type& CData_set_id_type_Base::GetData_set_id_type(void) const
{
    if (!CanGetData_set_id_type()) {
        ThrowUnassigned(1);
    }
    return m_Data_set_id_type;
}

inline
void CData_set_id_type_Base::SetData_set_id_type(const CData_set_id_type_Base::TData_set_id_type& value)
{
    m_Data_set_id_type = value;
    m_set_State[0] |= 0xc;
}

inline
CData_set_id_type_Base::TData_set_id_type& CData_set_id_type_Base::SetData_set_id_type(void)
{
#ifdef _DEBUG
    if (!IsSetData_set_id_type()) {
        m_Data_set_id_type = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Data_set_id_type;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // SAMPLE_LIB_DTD_DATA_SET_ID_TYPE_BASE_HPP
