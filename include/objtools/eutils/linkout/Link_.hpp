/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Link_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_LINK_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_LINK_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// forward declarations
class CIconUrl;
class CObjectSelector;
class CObjectUrl;
class CSubObjectSelector;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_EUTILS_EXPORT CLink_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CLink_Base(void);
    // destructor
    virtual ~CLink_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_Selector : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_Selector(void);
        // destructor
        ~C_Selector(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
    
        /// Choice variants.
        enum E_Choice {
            e_not_set = 0,        ///< No variant selected
            e_ObjectSelector,
            e_SubObjectSelector   ///< End of ObjectList group   End of ObjectSelector group   Libraries must use SubObjectSelector to refer to the sub providers 
        };
        /// Maximum+1 value of the choice variant enumerator.
        enum E_ChoiceStopper {
            e_MaxChoice = 3 ///< == e_SubObjectSelector+1
        };
    
        /// Reset the whole object
        void Reset(void);
    
        /// Reset the selection (set it to e_not_set).
        void ResetSelection(void);
    
        /// Which variant is currently selected.
        E_Choice Which(void) const;
    
        /// Verify selection, throw exception if it differs from the expected.
        void CheckSelected(E_Choice index) const;
    
        /// Throw 'InvalidSelection' exception.
        NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;
    
        /// Retrieve selection name (for diagnostic purposes).
        static NCBI_NS_STD::string SelectionName(E_Choice index);
    
        /// Select the requested variant if needed.
        void Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset = NCBI_NS_NCBI::eDoResetVariant);
        /// Select the requested variant if needed,
        /// allocating CObject variants from memory pool.
        void Select(E_Choice index,
                    NCBI_NS_NCBI::EResetVariant reset,
                    NCBI_NS_NCBI::CObjectMemoryPool* pool);
    
        // types
        typedef CObjectSelector TObjectSelector;
        typedef CSubObjectSelector TSubObjectSelector;
    
        // getters
        // setters
    
        // typedef CObjectSelector TObjectSelector
        bool IsObjectSelector(void) const;
        const TObjectSelector& GetObjectSelector(void) const;
        TObjectSelector& SetObjectSelector(void);
        void SetObjectSelector(TObjectSelector& value);
    
        // typedef CSubObjectSelector TSubObjectSelector
        bool IsSubObjectSelector(void) const;
        const TSubObjectSelector& GetSubObjectSelector(void) const;
        TSubObjectSelector& SetSubObjectSelector(void);
        void SetSubObjectSelector(TSubObjectSelector& value);
    
    
    private:
        // copy constructor and assignment operator
        C_Selector(const C_Selector& );
        C_Selector& operator=(const C_Selector& );
        // choice state
        E_Choice m_choice;
        // helper methods
        void DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool = 0);
    
        static const char* const sm_SelectionNames[];
        // data
        NCBI_NS_NCBI::CSerialObject *m_object;
    };
    // types
    typedef NCBI_NS_STD::string TLinkId;
    typedef NCBI_NS_STD::string TProviderId;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIconUrl > > TIconUrl;
    typedef C_Selector TSelector;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CObjectUrl > > TObjectUrl;

    // getters
    // setters

    /// mandatory
    /// typedef NCBI_NS_STD::string TLinkId
    ///  Check whether the LinkId data member has been assigned a value.
    bool IsSetLinkId(void) const;
    /// Check whether it is safe or not to call GetLinkId method.
    bool CanGetLinkId(void) const;
    void ResetLinkId(void);
    const TLinkId& GetLinkId(void) const;
    void SetLinkId(const TLinkId& value);
    TLinkId& SetLinkId(void);

    /// mandatory
    /// typedef NCBI_NS_STD::string TProviderId
    ///  Check whether the ProviderId data member has been assigned a value.
    bool IsSetProviderId(void) const;
    /// Check whether it is safe or not to call GetProviderId method.
    bool CanGetProviderId(void) const;
    void ResetProviderId(void);
    const TProviderId& GetProviderId(void) const;
    void SetProviderId(const TProviderId& value);
    TProviderId& SetProviderId(void);

    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIconUrl > > TIconUrl
    ///  Check whether the IconUrl data member has been assigned a value.
    bool IsSetIconUrl(void) const;
    /// Check whether it is safe or not to call GetIconUrl method.
    bool CanGetIconUrl(void) const;
    void ResetIconUrl(void);
    const TIconUrl& GetIconUrl(void) const;
    TIconUrl& SetIconUrl(void);

    /// mandatory
    /// typedef C_Selector TSelector
    ///  Check whether the Selector data member has been assigned a value.
    bool IsSetSelector(void) const;
    /// Check whether it is safe or not to call GetSelector method.
    bool CanGetSelector(void) const;
    void ResetSelector(void);
    const TSelector& GetSelector(void) const;
    void SetSelector(TSelector& value);
    TSelector& SetSelector(void);

    /// mandatory
    /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CObjectUrl > > TObjectUrl
    ///  Check whether the ObjectUrl data member has been assigned a value.
    bool IsSetObjectUrl(void) const;
    /// Check whether it is safe or not to call GetObjectUrl method.
    bool CanGetObjectUrl(void) const;
    void ResetObjectUrl(void);
    const TObjectUrl& GetObjectUrl(void) const;
    TObjectUrl& SetObjectUrl(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLink_Base(const CLink_Base&);
    CLink_Base& operator=(const CLink_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_STD::string m_LinkId;
    NCBI_NS_STD::string m_ProviderId;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIconUrl > > m_IconUrl;
    NCBI_NS_NCBI::CRef< TSelector > m_Selector;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CObjectUrl > > m_ObjectUrl;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
CLink_Base::C_Selector::E_Choice CLink_Base::C_Selector::Which(void) const
{
    return m_choice;
}

inline
void CLink_Base::C_Selector::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CLink_Base::C_Selector::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CLink_Base::C_Selector::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CLink_Base::C_Selector::IsObjectSelector(void) const
{
    return m_choice == e_ObjectSelector;
}

inline
bool CLink_Base::C_Selector::IsSubObjectSelector(void) const
{
    return m_choice == e_SubObjectSelector;
}

inline
bool CLink_Base::IsSetLinkId(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLink_Base::CanGetLinkId(void) const
{
    return IsSetLinkId();
}

inline
const CLink_Base::TLinkId& CLink_Base::GetLinkId(void) const
{
    if (!CanGetLinkId()) {
        ThrowUnassigned(0);
    }
    return m_LinkId;
}

inline
void CLink_Base::SetLinkId(const CLink_Base::TLinkId& value)
{
    m_LinkId = value;
    m_set_State[0] |= 0x3;
}

inline
CLink_Base::TLinkId& CLink_Base::SetLinkId(void)
{
#ifdef _DEBUG
    if (!IsSetLinkId()) {
        m_LinkId = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_LinkId;
}

inline
bool CLink_Base::IsSetProviderId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLink_Base::CanGetProviderId(void) const
{
    return IsSetProviderId();
}

inline
const CLink_Base::TProviderId& CLink_Base::GetProviderId(void) const
{
    if (!CanGetProviderId()) {
        ThrowUnassigned(1);
    }
    return m_ProviderId;
}

inline
void CLink_Base::SetProviderId(const CLink_Base::TProviderId& value)
{
    m_ProviderId = value;
    m_set_State[0] |= 0xc;
}

inline
CLink_Base::TProviderId& CLink_Base::SetProviderId(void)
{
#ifdef _DEBUG
    if (!IsSetProviderId()) {
        m_ProviderId = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_ProviderId;
}

inline
bool CLink_Base::IsSetIconUrl(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CLink_Base::CanGetIconUrl(void) const
{
    return true;
}

inline
const CLink_Base::TIconUrl& CLink_Base::GetIconUrl(void) const
{
    return m_IconUrl;
}

inline
CLink_Base::TIconUrl& CLink_Base::SetIconUrl(void)
{
    m_set_State[0] |= 0x10;
    return m_IconUrl;
}

inline
bool CLink_Base::IsSetSelector(void) const
{
    return m_Selector.NotEmpty();
}

inline
bool CLink_Base::CanGetSelector(void) const
{
    return true;
}

inline
const CLink_Base::TSelector& CLink_Base::GetSelector(void) const
{
    if ( !m_Selector ) {
        const_cast<CLink_Base*>(this)->ResetSelector();
    }
    return (*m_Selector);
}

inline
CLink_Base::TSelector& CLink_Base::SetSelector(void)
{
    if ( !m_Selector ) {
        ResetSelector();
    }
    return (*m_Selector);
}

inline
bool CLink_Base::IsSetObjectUrl(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CLink_Base::CanGetObjectUrl(void) const
{
    return true;
}

inline
const CLink_Base::TObjectUrl& CLink_Base::GetObjectUrl(void) const
{
    return m_ObjectUrl;
}

inline
CLink_Base::TObjectUrl& CLink_Base::SetObjectUrl(void)
{
    m_set_State[0] |= 0x100;
    return m_ObjectUrl;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_LINK_BASE_HPP
