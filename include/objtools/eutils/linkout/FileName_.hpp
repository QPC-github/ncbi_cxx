/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file FileName_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_FILENAME_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_FILENAME_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_EUTILS_EXPORT CFileName_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CFileName_Base(void);
    // destructor
    virtual ~CFileName_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_Attlist : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef NCBI_NS_STD::string TFieldname;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef NCBI_NS_STD::string TFieldname
        ///  Check whether the Fieldname data member has been assigned a value.
        bool IsSetFieldname(void) const;
        /// Check whether it is safe or not to call GetFieldname method.
        bool CanGetFieldname(void) const;
        void ResetFieldname(void);
        const TFieldname& GetFieldname(void) const;
        void SetFieldname(const TFieldname& value);
        TFieldname& SetFieldname(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        NCBI_NS_STD::string m_Fieldname;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef NCBI_NS_STD::string TFileName;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef NCBI_NS_STD::string TFileName
    ///  Check whether the FileName data member has been assigned a value.
    bool IsSetFileName(void) const;
    /// Check whether it is safe or not to call GetFileName method.
    bool CanGetFileName(void) const;
    void ResetFileName(void);
    const TFileName& GetFileName(void) const;
    void SetFileName(const TFileName& value);
    TFileName& SetFileName(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFileName_Base(const CFileName_Base&);
    CFileName_Base& operator=(const CFileName_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_NCBI::CRef< TAttlist > m_Attlist;
    NCBI_NS_STD::string m_FileName;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CFileName_Base::C_Attlist::IsSetFieldname(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CFileName_Base::C_Attlist::CanGetFieldname(void) const
{
    return IsSetFieldname();
}

inline
const CFileName_Base::C_Attlist::TFieldname& CFileName_Base::C_Attlist::GetFieldname(void) const
{
    if (!CanGetFieldname()) {
        ThrowUnassigned(0);
    }
    return m_Fieldname;
}

inline
void CFileName_Base::C_Attlist::SetFieldname(const CFileName_Base::C_Attlist::TFieldname& value)
{
    m_Fieldname = value;
    m_set_State[0] |= 0x3;
}

inline
CFileName_Base::C_Attlist::TFieldname& CFileName_Base::C_Attlist::SetFieldname(void)
{
#ifdef _DEBUG
    if (!IsSetFieldname()) {
        m_Fieldname = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Fieldname;
}

inline
bool CFileName_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CFileName_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CFileName_Base::TAttlist& CFileName_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CFileName_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CFileName_Base::TAttlist& CFileName_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CFileName_Base::IsSetFileName(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CFileName_Base::CanGetFileName(void) const
{
    return IsSetFileName();
}

inline
const CFileName_Base::TFileName& CFileName_Base::GetFileName(void) const
{
    if (!CanGetFileName()) {
        ThrowUnassigned(1);
    }
    return m_FileName;
}

inline
void CFileName_Base::SetFileName(const CFileName_Base::TFileName& value)
{
    m_FileName = value;
    m_set_State[0] |= 0xc;
}

inline
CFileName_Base::TFileName& CFileName_Base::SetFileName(void)
{
#ifdef _DEBUG
    if (!IsSetFileName()) {
        m_FileName = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_FileName;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_FILENAME_BASE_HPP
