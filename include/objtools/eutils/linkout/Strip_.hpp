/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Strip_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_STRIP_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_STRIP_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// forward declarations
class CApad;
class CNormalize;
class CPad;
class CStrip;
class CSubs;
class CTolower;
class CToupper;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_EUTILS_EXPORT CStrip_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStrip_Base(void);
    // destructor
    virtual ~CStrip_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_Attlist : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_what {
            eAttlist_what_spaces    = 1,
            eAttlist_what_letters   = 2,
            eAttlist_what_nondigits = 3,
            eAttlist_what_digits    = 4
        };
        
        /// Access to EAttlist_what's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_what)(void);
        
        // types
        typedef EAttlist_what TWhat;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef EAttlist_what TWhat
        ///  Check whether the What data member has been assigned a value.
        bool IsSetWhat(void) const;
        /// Check whether it is safe or not to call GetWhat method.
        bool CanGetWhat(void) const;
        void ResetWhat(void);
        TWhat GetWhat(void) const;
        void SetWhat(TWhat value);
        TWhat& SetWhat(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        EAttlist_what m_What;
    };
    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_E_Strip : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_E_Strip(void);
        // destructor
        ~C_E_Strip(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
    
        /// Choice variants.
        enum E_Choice {
            e_not_set = 0,  ///< No variant selected
            e__CharData,
            e_Pad,
            e_Apad,
            e_Subs,
            e_Toupper,
            e_Tolower,
            e_Strip,
            e_Normalize
        };
        /// Maximum+1 value of the choice variant enumerator.
        enum E_ChoiceStopper {
            e_MaxChoice = 9 ///< == e_Normalize+1
        };
    
        /// Reset the whole object
        void Reset(void);
    
        /// Reset the selection (set it to e_not_set).
        void ResetSelection(void);
    
        /// Which variant is currently selected.
        E_Choice Which(void) const;
    
        /// Verify selection, throw exception if it differs from the expected.
        void CheckSelected(E_Choice index) const;
    
        /// Throw 'InvalidSelection' exception.
        NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;
    
        /// Retrieve selection name (for diagnostic purposes).
        static NCBI_NS_STD::string SelectionName(E_Choice index);
    
        /// Select the requested variant if needed.
        void Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset = NCBI_NS_NCBI::eDoResetVariant);
        /// Select the requested variant if needed,
        /// allocating CObject variants from memory pool.
        void Select(E_Choice index,
                    NCBI_NS_NCBI::EResetVariant reset,
                    NCBI_NS_NCBI::CObjectMemoryPool* pool);
    
        // types
        typedef NCBI_NS_STD::string T_CharData;
        typedef CPad TPad;
        typedef CApad TApad;
        typedef CSubs TSubs;
        typedef CToupper TToupper;
        typedef CTolower TTolower;
        typedef CStrip TStrip;
        typedef CNormalize TNormalize;
    
        // getters
        // setters
    
        // typedef NCBI_NS_STD::string T_CharData
        bool Is_CharData(void) const;
        const T_CharData& Get_CharData(void) const;
        T_CharData& Set_CharData(void);
        void Set_CharData(const T_CharData& value);
    
        // typedef CPad TPad
        bool IsPad(void) const;
        const TPad& GetPad(void) const;
        TPad& SetPad(void);
        void SetPad(TPad& value);
    
        // typedef CApad TApad
        bool IsApad(void) const;
        const TApad& GetApad(void) const;
        TApad& SetApad(void);
        void SetApad(TApad& value);
    
        // typedef CSubs TSubs
        bool IsSubs(void) const;
        const TSubs& GetSubs(void) const;
        TSubs& SetSubs(void);
        void SetSubs(TSubs& value);
    
        // typedef CToupper TToupper
        bool IsToupper(void) const;
        const TToupper& GetToupper(void) const;
        TToupper& SetToupper(void);
        void SetToupper(TToupper& value);
    
        // typedef CTolower TTolower
        bool IsTolower(void) const;
        const TTolower& GetTolower(void) const;
        TTolower& SetTolower(void);
        void SetTolower(TTolower& value);
    
        // typedef CStrip TStrip
        bool IsStrip(void) const;
        const TStrip& GetStrip(void) const;
        TStrip& SetStrip(void);
        void SetStrip(TStrip& value);
    
        // typedef CNormalize TNormalize
        bool IsNormalize(void) const;
        const TNormalize& GetNormalize(void) const;
        TNormalize& SetNormalize(void);
        void SetNormalize(TNormalize& value);
    
    
    private:
        // copy constructor and assignment operator
        C_E_Strip(const C_E_Strip& );
        C_E_Strip& operator=(const C_E_Strip& );
        // choice state
        E_Choice m_choice;
        // helper methods
        void DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool = 0);
    
        static const char* const sm_SelectionNames[];
        // data
        union {
            NCBI_NS_NCBI::CUnionBuffer<NCBI_NS_STD::string> m_string;
            NCBI_NS_NCBI::CSerialObject *m_object;
        };
    };
    // types
    typedef C_Attlist TAttlist;
    typedef C_E_Strip C_E;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_Strip > > TStrip;

    // getters
    // setters

    /// strip off spaces/letters/digits in the element's content
    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_Strip > > TStrip
    ///  Check whether the Strip data member has been assigned a value.
    bool IsSetStrip(void) const;
    /// Check whether it is safe or not to call GetStrip method.
    bool CanGetStrip(void) const;
    void ResetStrip(void);
    const TStrip& GetStrip(void) const;
    TStrip& SetStrip(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStrip_Base(const CStrip_Base&);
    CStrip_Base& operator=(const CStrip_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_NCBI::CRef< TAttlist > m_Attlist;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_Strip > > m_Strip;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CStrip_Base::C_Attlist::IsSetWhat(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CStrip_Base::C_Attlist::CanGetWhat(void) const
{
    return IsSetWhat();
}

inline
void CStrip_Base::C_Attlist::ResetWhat(void)
{
    m_What = (EAttlist_what)(0);
    m_set_State[0] &= ~0x3;
}

inline
CStrip_Base::C_Attlist::TWhat CStrip_Base::C_Attlist::GetWhat(void) const
{
    if (!CanGetWhat()) {
        ThrowUnassigned(0);
    }
    return m_What;
}

inline
void CStrip_Base::C_Attlist::SetWhat(CStrip_Base::C_Attlist::TWhat value)
{
    m_What = value;
    m_set_State[0] |= 0x3;
}

inline
CStrip_Base::C_Attlist::TWhat& CStrip_Base::C_Attlist::SetWhat(void)
{
#ifdef _DEBUG
    if (!IsSetWhat()) {
        memset(&m_What,UnassignedByte(),sizeof(m_What));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_What;
}

inline
CStrip_Base::C_E_Strip::E_Choice CStrip_Base::C_E_Strip::Which(void) const
{
    return m_choice;
}

inline
void CStrip_Base::C_E_Strip::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CStrip_Base::C_E_Strip::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CStrip_Base::C_E_Strip::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CStrip_Base::C_E_Strip::Is_CharData(void) const
{
    return m_choice == e__CharData;
}

inline
const CStrip_Base::C_E_Strip::T_CharData& CStrip_Base::C_E_Strip::Get_CharData(void) const
{
    CheckSelected(e__CharData);
    return *m_string;
}

inline
CStrip_Base::C_E_Strip::T_CharData& CStrip_Base::C_E_Strip::Set_CharData(void)
{
    Select(e__CharData, NCBI_NS_NCBI::eDoNotResetVariant);
    return *m_string;
}

inline
bool CStrip_Base::C_E_Strip::IsPad(void) const
{
    return m_choice == e_Pad;
}

inline
bool CStrip_Base::C_E_Strip::IsApad(void) const
{
    return m_choice == e_Apad;
}

inline
bool CStrip_Base::C_E_Strip::IsSubs(void) const
{
    return m_choice == e_Subs;
}

inline
bool CStrip_Base::C_E_Strip::IsToupper(void) const
{
    return m_choice == e_Toupper;
}

inline
bool CStrip_Base::C_E_Strip::IsTolower(void) const
{
    return m_choice == e_Tolower;
}

inline
bool CStrip_Base::C_E_Strip::IsStrip(void) const
{
    return m_choice == e_Strip;
}

inline
bool CStrip_Base::C_E_Strip::IsNormalize(void) const
{
    return m_choice == e_Normalize;
}

inline
bool CStrip_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CStrip_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CStrip_Base::TAttlist& CStrip_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CStrip_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CStrip_Base::TAttlist& CStrip_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CStrip_Base::IsSetStrip(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CStrip_Base::CanGetStrip(void) const
{
    return true;
}

inline
const CStrip_Base::TStrip& CStrip_Base::GetStrip(void) const
{
    return m_Strip;
}

inline
CStrip_Base::TStrip& CStrip_Base::SetStrip(void)
{
    m_set_State[0] |= 0x4;
    return m_Strip;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_STRIP_BASE_HPP
