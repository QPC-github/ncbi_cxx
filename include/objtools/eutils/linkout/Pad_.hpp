/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Pad_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_PAD_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_PAD_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// forward declarations
class CApad;
class CNormalize;
class CPad;
class CStrip;
class CSubs;
class CTolower;
class CToupper;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_EUTILS_EXPORT CPad_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CPad_Base(void);
    // destructor
    virtual ~CPad_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_Attlist : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_align {
            eAttlist_align_left  = 1,
            eAttlist_align_right = 2
        };
        
        /// Access to EAttlist_align's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_align)(void);
        
        // types
        typedef NCBI_NS_STD::string TWith;
        typedef NCBI_NS_STD::string TWidth;
        typedef EAttlist_align TAlign;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef NCBI_NS_STD::string TWith
        ///  Check whether the With data member has been assigned a value.
        bool IsSetWith(void) const;
        /// Check whether it is safe or not to call GetWith method.
        bool CanGetWith(void) const;
        void ResetWith(void);
        const TWith& GetWith(void) const;
        void SetWith(const TWith& value);
        TWith& SetWith(void);
    
        /// mandatory
        /// typedef NCBI_NS_STD::string TWidth
        ///  Check whether the Width data member has been assigned a value.
        bool IsSetWidth(void) const;
        /// Check whether it is safe or not to call GetWidth method.
        bool CanGetWidth(void) const;
        void ResetWidth(void);
        const TWidth& GetWidth(void) const;
        void SetWidth(const TWidth& value);
        TWidth& SetWidth(void);
    
        /// optional with default eAttlist_align_right
        /// typedef EAttlist_align TAlign
        ///  Check whether the Align data member has been assigned a value.
        bool IsSetAlign(void) const;
        /// Check whether it is safe or not to call GetAlign method.
        bool CanGetAlign(void) const;
        void ResetAlign(void);
        void SetDefaultAlign(void);
        TAlign GetAlign(void) const;
        void SetAlign(TAlign value);
        TAlign& SetAlign(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        NCBI_NS_STD::string m_With;
        NCBI_NS_STD::string m_Width;
        EAttlist_align m_Align;
    };
    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_E_Pad : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_E_Pad(void);
        // destructor
        ~C_E_Pad(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
    
        /// Choice variants.
        enum E_Choice {
            e_not_set = 0,  ///< No variant selected
            e__CharData,
            e_Pad,
            e_Apad,
            e_Subs,
            e_Toupper,
            e_Tolower,
            e_Strip,
            e_Normalize
        };
        /// Maximum+1 value of the choice variant enumerator.
        enum E_ChoiceStopper {
            e_MaxChoice = 9 ///< == e_Normalize+1
        };
    
        /// Reset the whole object
        void Reset(void);
    
        /// Reset the selection (set it to e_not_set).
        void ResetSelection(void);
    
        /// Which variant is currently selected.
        E_Choice Which(void) const;
    
        /// Verify selection, throw exception if it differs from the expected.
        void CheckSelected(E_Choice index) const;
    
        /// Throw 'InvalidSelection' exception.
        NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;
    
        /// Retrieve selection name (for diagnostic purposes).
        static NCBI_NS_STD::string SelectionName(E_Choice index);
    
        /// Select the requested variant if needed.
        void Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset = NCBI_NS_NCBI::eDoResetVariant);
        /// Select the requested variant if needed,
        /// allocating CObject variants from memory pool.
        void Select(E_Choice index,
                    NCBI_NS_NCBI::EResetVariant reset,
                    NCBI_NS_NCBI::CObjectMemoryPool* pool);
    
        // types
        typedef NCBI_NS_STD::string T_CharData;
        typedef CPad TPad;
        typedef CApad TApad;
        typedef CSubs TSubs;
        typedef CToupper TToupper;
        typedef CTolower TTolower;
        typedef CStrip TStrip;
        typedef CNormalize TNormalize;
    
        // getters
        // setters
    
        // typedef NCBI_NS_STD::string T_CharData
        bool Is_CharData(void) const;
        const T_CharData& Get_CharData(void) const;
        T_CharData& Set_CharData(void);
        void Set_CharData(const T_CharData& value);
    
        // typedef CPad TPad
        bool IsPad(void) const;
        const TPad& GetPad(void) const;
        TPad& SetPad(void);
        void SetPad(TPad& value);
    
        // typedef CApad TApad
        bool IsApad(void) const;
        const TApad& GetApad(void) const;
        TApad& SetApad(void);
        void SetApad(TApad& value);
    
        // typedef CSubs TSubs
        bool IsSubs(void) const;
        const TSubs& GetSubs(void) const;
        TSubs& SetSubs(void);
        void SetSubs(TSubs& value);
    
        // typedef CToupper TToupper
        bool IsToupper(void) const;
        const TToupper& GetToupper(void) const;
        TToupper& SetToupper(void);
        void SetToupper(TToupper& value);
    
        // typedef CTolower TTolower
        bool IsTolower(void) const;
        const TTolower& GetTolower(void) const;
        TTolower& SetTolower(void);
        void SetTolower(TTolower& value);
    
        // typedef CStrip TStrip
        bool IsStrip(void) const;
        const TStrip& GetStrip(void) const;
        TStrip& SetStrip(void);
        void SetStrip(TStrip& value);
    
        // typedef CNormalize TNormalize
        bool IsNormalize(void) const;
        const TNormalize& GetNormalize(void) const;
        TNormalize& SetNormalize(void);
        void SetNormalize(TNormalize& value);
    
    
    private:
        // copy constructor and assignment operator
        C_E_Pad(const C_E_Pad& );
        C_E_Pad& operator=(const C_E_Pad& );
        // choice state
        E_Choice m_choice;
        // helper methods
        void DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool = 0);
    
        static const char* const sm_SelectionNames[];
        // data
        union {
            NCBI_NS_NCBI::CUnionBuffer<NCBI_NS_STD::string> m_string;
            NCBI_NS_NCBI::CSerialObject *m_object;
        };
    };
    // types
    typedef C_Attlist TAttlist;
    typedef C_E_Pad C_E;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_Pad > > TPad;

    // getters
    // setters

    /// used to mark up strings that require padding to create fixed-length string
    ///     attributes. 
    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_Pad > > TPad
    ///  Check whether the Pad data member has been assigned a value.
    bool IsSetPad(void) const;
    /// Check whether it is safe or not to call GetPad method.
    bool CanGetPad(void) const;
    void ResetPad(void);
    const TPad& GetPad(void) const;
    TPad& SetPad(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CPad_Base(const CPad_Base&);
    CPad_Base& operator=(const CPad_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_NCBI::CRef< TAttlist > m_Attlist;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_Pad > > m_Pad;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CPad_Base::C_Attlist::IsSetWith(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CPad_Base::C_Attlist::CanGetWith(void) const
{
    return IsSetWith();
}

inline
const CPad_Base::C_Attlist::TWith& CPad_Base::C_Attlist::GetWith(void) const
{
    if (!CanGetWith()) {
        ThrowUnassigned(0);
    }
    return m_With;
}

inline
void CPad_Base::C_Attlist::SetWith(const CPad_Base::C_Attlist::TWith& value)
{
    m_With = value;
    m_set_State[0] |= 0x3;
}

inline
CPad_Base::C_Attlist::TWith& CPad_Base::C_Attlist::SetWith(void)
{
#ifdef _DEBUG
    if (!IsSetWith()) {
        m_With = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_With;
}

inline
bool CPad_Base::C_Attlist::IsSetWidth(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CPad_Base::C_Attlist::CanGetWidth(void) const
{
    return IsSetWidth();
}

inline
const CPad_Base::C_Attlist::TWidth& CPad_Base::C_Attlist::GetWidth(void) const
{
    if (!CanGetWidth()) {
        ThrowUnassigned(1);
    }
    return m_Width;
}

inline
void CPad_Base::C_Attlist::SetWidth(const CPad_Base::C_Attlist::TWidth& value)
{
    m_Width = value;
    m_set_State[0] |= 0xc;
}

inline
CPad_Base::C_Attlist::TWidth& CPad_Base::C_Attlist::SetWidth(void)
{
#ifdef _DEBUG
    if (!IsSetWidth()) {
        m_Width = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Width;
}

inline
bool CPad_Base::C_Attlist::IsSetAlign(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CPad_Base::C_Attlist::CanGetAlign(void) const
{
    return true;
}

inline
void CPad_Base::C_Attlist::ResetAlign(void)
{
    m_Align = eAttlist_align_right;
    m_set_State[0] &= ~0x30;
}

inline
void CPad_Base::C_Attlist::SetDefaultAlign(void)
{
    ResetAlign();
    m_set_State[0] |= 0x10;
}

inline
CPad_Base::C_Attlist::TAlign CPad_Base::C_Attlist::GetAlign(void) const
{
    return m_Align;
}

inline
void CPad_Base::C_Attlist::SetAlign(CPad_Base::C_Attlist::TAlign value)
{
    m_Align = value;
    m_set_State[0] |= 0x30;
}

inline
CPad_Base::C_Attlist::TAlign& CPad_Base::C_Attlist::SetAlign(void)
{
#ifdef _DEBUG
    if (!IsSetAlign()) {
        memset(&m_Align,UnassignedByte(),sizeof(m_Align));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Align;
}

inline
CPad_Base::C_E_Pad::E_Choice CPad_Base::C_E_Pad::Which(void) const
{
    return m_choice;
}

inline
void CPad_Base::C_E_Pad::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CPad_Base::C_E_Pad::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CPad_Base::C_E_Pad::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CPad_Base::C_E_Pad::Is_CharData(void) const
{
    return m_choice == e__CharData;
}

inline
const CPad_Base::C_E_Pad::T_CharData& CPad_Base::C_E_Pad::Get_CharData(void) const
{
    CheckSelected(e__CharData);
    return *m_string;
}

inline
CPad_Base::C_E_Pad::T_CharData& CPad_Base::C_E_Pad::Set_CharData(void)
{
    Select(e__CharData, NCBI_NS_NCBI::eDoNotResetVariant);
    return *m_string;
}

inline
bool CPad_Base::C_E_Pad::IsPad(void) const
{
    return m_choice == e_Pad;
}

inline
bool CPad_Base::C_E_Pad::IsApad(void) const
{
    return m_choice == e_Apad;
}

inline
bool CPad_Base::C_E_Pad::IsSubs(void) const
{
    return m_choice == e_Subs;
}

inline
bool CPad_Base::C_E_Pad::IsToupper(void) const
{
    return m_choice == e_Toupper;
}

inline
bool CPad_Base::C_E_Pad::IsTolower(void) const
{
    return m_choice == e_Tolower;
}

inline
bool CPad_Base::C_E_Pad::IsStrip(void) const
{
    return m_choice == e_Strip;
}

inline
bool CPad_Base::C_E_Pad::IsNormalize(void) const
{
    return m_choice == e_Normalize;
}

inline
bool CPad_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CPad_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CPad_Base::TAttlist& CPad_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CPad_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CPad_Base::TAttlist& CPad_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CPad_Base::IsSetPad(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CPad_Base::CanGetPad(void) const
{
    return true;
}

inline
const CPad_Base::TPad& CPad_Base::GetPad(void) const
{
    return m_Pad;
}

inline
CPad_Base::TPad& CPad_Base::SetPad(void)
{
    m_set_State[0] |= 0x4;
    return m_Pad;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_PAD_BASE_HPP
