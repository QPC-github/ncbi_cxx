/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file SubProvider_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_SUBPROVIDER_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_SUBPROVIDER_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_EUTILS_EXPORT CSubProvider_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSubProvider_Base(void);
    // destructor
    virtual ~CSubProvider_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_EUTILS_EXPORT C_Data : public NCBI_NS_NCBI::CSerialObject
    {
        typedef NCBI_NS_NCBI::CSerialObject Tparent;
    public:
        // constructor
        C_Data(void);
        // destructor
        ~C_Data(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        /////////////////////////////////////////////////////////////////////////////
        class NCBI_EUTILS_EXPORT C_E_IE : public NCBI_NS_NCBI::CSerialObject
        {
            typedef NCBI_NS_NCBI::CSerialObject Tparent;
        public:
            // constructor
            C_E_IE(void);
            // destructor
            ~C_E_IE(void);
        
            // type info
            DECLARE_INTERNAL_TYPE_INFO();
        
        
            /// Choice variants.
            enum E_Choice {
                e_not_set = 0,  ///< No variant selected
                e_InclQuery,
                e_ExclQuery
            };
            /// Maximum+1 value of the choice variant enumerator.
            enum E_ChoiceStopper {
                e_MaxChoice = 3 ///< == e_ExclQuery+1
            };
        
            /// Reset the whole object
            void Reset(void);
        
            /// Reset the selection (set it to e_not_set).
            void ResetSelection(void);
        
            /// Which variant is currently selected.
            E_Choice Which(void) const;
        
            /// Verify selection, throw exception if it differs from the expected.
            void CheckSelected(E_Choice index) const;
        
            /// Throw 'InvalidSelection' exception.
            NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;
        
            /// Retrieve selection name (for diagnostic purposes).
            static NCBI_NS_STD::string SelectionName(E_Choice index);
        
            /// Select the requested variant if needed.
            void Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset = NCBI_NS_NCBI::eDoResetVariant);
            /// Select the requested variant if needed,
            /// allocating CObject variants from memory pool.
            void Select(E_Choice index,
                        NCBI_NS_NCBI::EResetVariant reset,
                        NCBI_NS_NCBI::CObjectMemoryPool* pool);
        
            // types
            typedef NCBI_NS_STD::string TInclQuery;
            typedef NCBI_NS_STD::string TExclQuery;
        
            // getters
            // setters
        
            // typedef NCBI_NS_STD::string TInclQuery
            bool IsInclQuery(void) const;
            const TInclQuery& GetInclQuery(void) const;
            TInclQuery& SetInclQuery(void);
            void SetInclQuery(const TInclQuery& value);
        
            // typedef NCBI_NS_STD::string TExclQuery
            bool IsExclQuery(void) const;
            const TExclQuery& GetExclQuery(void) const;
            TExclQuery& SetExclQuery(void);
            void SetExclQuery(const TExclQuery& value);
        
        
        private:
            // copy constructor and assignment operator
            C_E_IE(const C_E_IE& );
            C_E_IE& operator=(const C_E_IE& );
            // choice state
            E_Choice m_choice;
            // helper methods
            void DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool = 0);
        
            static const char* const sm_SelectionNames[];
            // data
            union {
                NCBI_NS_NCBI::CUnionBuffer<NCBI_NS_STD::string> m_string;
                void* m_dummy_pointer_for_alignment;
            };
        };
        // types
        typedef C_E_IE C_E;
        typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_IE > > TData;
    
        // getters
        // setters
    
        /// optional
        /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_IE > > TData
        ///  Check whether the Data data member has been assigned a value.
        bool IsSetData(void) const;
        /// Check whether it is safe or not to call GetData method.
        bool CanGetData(void) const;
        void ResetData(void);
        const TData& GetData(void) const;
        TData& SetData(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Data(const C_Data&);
        C_Data& operator=(const C_Data&);
    
        // data
        Uint4 m_set_State[1];
        NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< C_E_IE > > m_Data;
    };
    // types
    typedef NCBI_NS_STD::string TNameAbbr;
    typedef C_Data TData;

    // getters
    // setters

    /// mandatory
    /// typedef NCBI_NS_STD::string TNameAbbr
    ///  Check whether the NameAbbr data member has been assigned a value.
    bool IsSetNameAbbr(void) const;
    /// Check whether it is safe or not to call GetNameAbbr method.
    bool CanGetNameAbbr(void) const;
    void ResetNameAbbr(void);
    const TNameAbbr& GetNameAbbr(void) const;
    void SetNameAbbr(const TNameAbbr& value);
    TNameAbbr& SetNameAbbr(void);

    /// optional
    /// typedef C_Data TData
    ///  Check whether the Data data member has been assigned a value.
    bool IsSetData(void) const;
    /// Check whether it is safe or not to call GetData method.
    bool CanGetData(void) const;
    void ResetData(void);
    const TData& GetData(void) const;
    void SetData(TData& value);
    TData& SetData(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSubProvider_Base(const CSubProvider_Base&);
    CSubProvider_Base& operator=(const CSubProvider_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_STD::string m_NameAbbr;
    NCBI_NS_NCBI::CRef< TData > m_Data;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
CSubProvider_Base::C_Data::C_E_IE::E_Choice CSubProvider_Base::C_Data::C_E_IE::Which(void) const
{
    return m_choice;
}

inline
void CSubProvider_Base::C_Data::C_E_IE::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CSubProvider_Base::C_Data::C_E_IE::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CSubProvider_Base::C_Data::C_E_IE::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CSubProvider_Base::C_Data::C_E_IE::IsInclQuery(void) const
{
    return m_choice == e_InclQuery;
}

inline
const CSubProvider_Base::C_Data::C_E_IE::TInclQuery& CSubProvider_Base::C_Data::C_E_IE::GetInclQuery(void) const
{
    CheckSelected(e_InclQuery);
    return *m_string;
}

inline
CSubProvider_Base::C_Data::C_E_IE::TInclQuery& CSubProvider_Base::C_Data::C_E_IE::SetInclQuery(void)
{
    Select(e_InclQuery, NCBI_NS_NCBI::eDoNotResetVariant);
    return *m_string;
}

inline
bool CSubProvider_Base::C_Data::C_E_IE::IsExclQuery(void) const
{
    return m_choice == e_ExclQuery;
}

inline
const CSubProvider_Base::C_Data::C_E_IE::TExclQuery& CSubProvider_Base::C_Data::C_E_IE::GetExclQuery(void) const
{
    CheckSelected(e_ExclQuery);
    return *m_string;
}

inline
CSubProvider_Base::C_Data::C_E_IE::TExclQuery& CSubProvider_Base::C_Data::C_E_IE::SetExclQuery(void)
{
    Select(e_ExclQuery, NCBI_NS_NCBI::eDoNotResetVariant);
    return *m_string;
}

inline
bool CSubProvider_Base::C_Data::IsSetData(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CSubProvider_Base::C_Data::CanGetData(void) const
{
    return true;
}

inline
const CSubProvider_Base::C_Data::TData& CSubProvider_Base::C_Data::GetData(void) const
{
    return m_Data;
}

inline
CSubProvider_Base::C_Data::TData& CSubProvider_Base::C_Data::SetData(void)
{
    m_set_State[0] |= 0x1;
    return m_Data;
}

inline
bool CSubProvider_Base::IsSetNameAbbr(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CSubProvider_Base::CanGetNameAbbr(void) const
{
    return IsSetNameAbbr();
}

inline
const CSubProvider_Base::TNameAbbr& CSubProvider_Base::GetNameAbbr(void) const
{
    if (!CanGetNameAbbr()) {
        ThrowUnassigned(0);
    }
    return m_NameAbbr;
}

inline
void CSubProvider_Base::SetNameAbbr(const CSubProvider_Base::TNameAbbr& value)
{
    m_NameAbbr = value;
    m_set_State[0] |= 0x3;
}

inline
CSubProvider_Base::TNameAbbr& CSubProvider_Base::SetNameAbbr(void)
{
#ifdef _DEBUG
    if (!IsSetNameAbbr()) {
        m_NameAbbr = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_NameAbbr;
}

inline
bool CSubProvider_Base::IsSetData(void) const
{
    return m_Data.NotEmpty();
}

inline
bool CSubProvider_Base::CanGetData(void) const
{
    return IsSetData();
}

inline
const CSubProvider_Base::TData& CSubProvider_Base::GetData(void) const
{
    if (!CanGetData()) {
        ThrowUnassigned(1);
    }
    return (*m_Data);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_SUBPROVIDER_BASE_HPP
