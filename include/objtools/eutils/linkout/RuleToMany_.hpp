/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file RuleToMany_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_RULETOMANY_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_RULETOMANY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// forward declarations
class CRule;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_EUTILS_EXPORT CRuleToMany_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CRuleToMany_Base(void);
    // destructor
    virtual ~CRuleToMany_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef CRule TRule;
    typedef NCBI_NS_STD::string TSeparator;

    // getters
    // setters

    /// mandatory
    /// typedef CRule TRule
    ///  Check whether the Rule data member has been assigned a value.
    bool IsSetRule(void) const;
    /// Check whether it is safe or not to call GetRule method.
    bool CanGetRule(void) const;
    void ResetRule(void);
    const TRule& GetRule(void) const;
    void SetRule(TRule& value);
    TRule& SetRule(void);

    /// mandatory
    /// typedef NCBI_NS_STD::string TSeparator
    ///  Check whether the Separator data member has been assigned a value.
    bool IsSetSeparator(void) const;
    /// Check whether it is safe or not to call GetSeparator method.
    bool CanGetSeparator(void) const;
    void ResetSeparator(void);
    const TSeparator& GetSeparator(void) const;
    void SetSeparator(const TSeparator& value);
    TSeparator& SetSeparator(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CRuleToMany_Base(const CRuleToMany_Base&);
    CRuleToMany_Base& operator=(const CRuleToMany_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_NCBI::CRef< TRule > m_Rule;
    NCBI_NS_STD::string m_Separator;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CRuleToMany_Base::IsSetRule(void) const
{
    return m_Rule.NotEmpty();
}

inline
bool CRuleToMany_Base::CanGetRule(void) const
{
    return true;
}

inline
const CRuleToMany_Base::TRule& CRuleToMany_Base::GetRule(void) const
{
    if ( !m_Rule ) {
        const_cast<CRuleToMany_Base*>(this)->ResetRule();
    }
    return (*m_Rule);
}

inline
CRuleToMany_Base::TRule& CRuleToMany_Base::SetRule(void)
{
    if ( !m_Rule ) {
        ResetRule();
    }
    return (*m_Rule);
}

inline
bool CRuleToMany_Base::IsSetSeparator(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CRuleToMany_Base::CanGetSeparator(void) const
{
    return IsSetSeparator();
}

inline
const CRuleToMany_Base::TSeparator& CRuleToMany_Base::GetSeparator(void) const
{
    if (!CanGetSeparator()) {
        ThrowUnassigned(1);
    }
    return m_Separator;
}

inline
void CRuleToMany_Base::SetSeparator(const CRuleToMany_Base::TSeparator& value)
{
    m_Separator = value;
    m_set_State[0] |= 0xc;
}

inline
CRuleToMany_Base::TSeparator& CRuleToMany_Base::SetSeparator(void)
{
#ifdef _DEBUG
    if (!IsSetSeparator()) {
        m_Separator = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Separator;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_RULETOMANY_BASE_HPP
