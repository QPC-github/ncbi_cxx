/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Provider_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'linkout.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef linkout__OBJTOOLS_EUTILS_LINKOUT_PROVIDER_BASE_HPP
#define linkout__OBJTOOLS_EUTILS_LINKOUT_PROVIDER_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

#ifndef BEGIN_linkout_SCOPE
#  define BEGIN_linkout_SCOPE BEGIN_SCOPE(linkout)
#  define END_linkout_SCOPE END_SCOPE(linkout)
#endif
BEGIN_linkout_SCOPE // namespace linkout::


// forward declarations
class CIconUrl;
class CUrl;


// generated classes

/////////////////////////////////////////////////////////////////////////////
/// can be one of the following; see LinkOut SubjectTypes and Attributes 
/// at http://www.ncbi.nlm.nih.gov/entrez/linkout/doc/subjecttypes.html for a description 
/// of these elements:
/////BARRIERS
///        registration required
///        subscription/membership/fee required
/////OWNERSHIP
///        author of URL
///        publisher of information in URL
/////Resource Form
///        author manuscript
///        electronic full-text
///        full-text online
///        full-text PDF
///        full-text PostScript
///        order form
///        print collection       
/////Adminstrative
///        library-local
///        preference
/// This is the top level element for Provider 
class NCBI_EUTILS_EXPORT CProvider_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CProvider_Base(void);
    // destructor
    virtual ~CProvider_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::string TProviderId;
    typedef NCBI_NS_STD::string TName;
    typedef NCBI_NS_STD::string TNameAbbr;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TSubjectType;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TAttribute;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CUrl > > TUrl;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIconUrl > > TIconUrl;
    typedef NCBI_NS_STD::string TBrief;

    // getters
    // setters

    /// mandatory
    /// typedef NCBI_NS_STD::string TProviderId
    ///  Check whether the ProviderId data member has been assigned a value.
    bool IsSetProviderId(void) const;
    /// Check whether it is safe or not to call GetProviderId method.
    bool CanGetProviderId(void) const;
    void ResetProviderId(void);
    const TProviderId& GetProviderId(void) const;
    void SetProviderId(const TProviderId& value);
    TProviderId& SetProviderId(void);

    /// mandatory
    /// typedef NCBI_NS_STD::string TName
    ///  Check whether the Name data member has been assigned a value.
    bool IsSetName(void) const;
    /// Check whether it is safe or not to call GetName method.
    bool CanGetName(void) const;
    void ResetName(void);
    const TName& GetName(void) const;
    void SetName(const TName& value);
    TName& SetName(void);

    /// mandatory
    /// typedef NCBI_NS_STD::string TNameAbbr
    ///  Check whether the NameAbbr data member has been assigned a value.
    bool IsSetNameAbbr(void) const;
    /// Check whether it is safe or not to call GetNameAbbr method.
    bool CanGetNameAbbr(void) const;
    void ResetNameAbbr(void);
    const TNameAbbr& GetNameAbbr(void) const;
    void SetNameAbbr(const TNameAbbr& value);
    TNameAbbr& SetNameAbbr(void);

    /// Entities for special characters 
    /// internal DTD entities 
    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TSubjectType
    ///  Check whether the SubjectType data member has been assigned a value.
    bool IsSetSubjectType(void) const;
    /// Check whether it is safe or not to call GetSubjectType method.
    bool CanGetSubjectType(void) const;
    void ResetSubjectType(void);
    const TSubjectType& GetSubjectType(void) const;
    TSubjectType& SetSubjectType(void);

    /// can be one of the following; see LinkOut SubjectTypes and Attributes 
    /// at http://www.ncbi.nlm.nih.gov/entrez/linkout/doc/subjecttypes.html for a description 
    /// of these elements: 
    /////CHEMICAL INFORMATION
    ///        Biological Properties
    ///        Chemical Libraries
    ///        Imaging Agents
    ///        Metabolism
    ///        Molecular Interactions
    ///        Physical Properties
    ///        Reactions
    ///        Theoretical Properties
    ///        Toxicology
    ///        Vendors
    /////EDUCATION
    ///        conferences/meetings/workshops
    ///        glossaries/dictionaries
    ///        online tutorials/courses
    /////FUNDING SOURCES
    ///        funding sources
    /////LITERATURE
    ///        abstracts/indexes/summaries
    ///        aggregators
    ///        books
    ///        individual online article
    ///        images
    ///        libraries
    ///        patent databases
    ///        publishers/providers
    /////MEDICAL
    ///        clinical trials
    ///        consumer health
    ///        diagnostics
    ///        disease organizations
    ///        medical equipment and devices
    ///        pharmacology
    ///        treatment guidelines
    /////MOLECULAR BIOLOGY DATABASES
    ///        DNA/protein sequence
    ///        gene/protein/disease-specific
    ///        gene expression
    ///        mapping
    ///        organism-specific
    ///        population/variation
    ///        protein interactions/pathways
    ///        structure
    ///        taxonomy/phylogenetic
    /////RESEARCH MATERIALS
    ///        clones/clone libraries
    ///        culture/stock collections
    ///        laboratory equipment
    ///        oligonucleotides
    ///        other reagents
    /////RESEARCHERS
    ///        colleges/universities
    ///        companies/research institutes
    ///        directories
    ///        individuals
    ///        societies/associations
    /////TOOLS
    ///        3D structure prediction/functional modeling
    ///        primer design
    ///        protein identification/characterization
    ///        restriction mapping
    ///        sequence screening/similarity/alignment
    ///        sequence viewer
    ///        translation
    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TAttribute
    ///  Check whether the Attribute data member has been assigned a value.
    bool IsSetAttribute(void) const;
    /// Check whether it is safe or not to call GetAttribute method.
    bool CanGetAttribute(void) const;
    void ResetAttribute(void);
    const TAttribute& GetAttribute(void) const;
    TAttribute& SetAttribute(void);

    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CUrl > > TUrl
    ///  Check whether the Url data member has been assigned a value.
    bool IsSetUrl(void) const;
    /// Check whether it is safe or not to call GetUrl method.
    bool CanGetUrl(void) const;
    void ResetUrl(void);
    const TUrl& GetUrl(void) const;
    TUrl& SetUrl(void);

    /// optional
    /// typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIconUrl > > TIconUrl
    ///  Check whether the IconUrl data member has been assigned a value.
    bool IsSetIconUrl(void) const;
    /// Check whether it is safe or not to call GetIconUrl method.
    bool CanGetIconUrl(void) const;
    void ResetIconUrl(void);
    const TIconUrl& GetIconUrl(void) const;
    TIconUrl& SetIconUrl(void);

    /// optional
    /// typedef NCBI_NS_STD::string TBrief
    ///  Check whether the Brief data member has been assigned a value.
    bool IsSetBrief(void) const;
    /// Check whether it is safe or not to call GetBrief method.
    bool CanGetBrief(void) const;
    void ResetBrief(void);
    const TBrief& GetBrief(void) const;
    void SetBrief(const TBrief& value);
    TBrief& SetBrief(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CProvider_Base(const CProvider_Base&);
    CProvider_Base& operator=(const CProvider_Base&);

    // data
    Uint4 m_set_State[1];
    NCBI_NS_STD::string m_ProviderId;
    NCBI_NS_STD::string m_Name;
    NCBI_NS_STD::string m_NameAbbr;
    NCBI_NS_STD::list< NCBI_NS_STD::string > m_SubjectType;
    NCBI_NS_STD::list< NCBI_NS_STD::string > m_Attribute;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CUrl > > m_Url;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIconUrl > > m_IconUrl;
    NCBI_NS_STD::string m_Brief;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CProvider_Base::IsSetProviderId(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CProvider_Base::CanGetProviderId(void) const
{
    return IsSetProviderId();
}

inline
const CProvider_Base::TProviderId& CProvider_Base::GetProviderId(void) const
{
    if (!CanGetProviderId()) {
        ThrowUnassigned(0);
    }
    return m_ProviderId;
}

inline
void CProvider_Base::SetProviderId(const CProvider_Base::TProviderId& value)
{
    m_ProviderId = value;
    m_set_State[0] |= 0x3;
}

inline
CProvider_Base::TProviderId& CProvider_Base::SetProviderId(void)
{
#ifdef _DEBUG
    if (!IsSetProviderId()) {
        m_ProviderId = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_ProviderId;
}

inline
bool CProvider_Base::IsSetName(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CProvider_Base::CanGetName(void) const
{
    return IsSetName();
}

inline
const CProvider_Base::TName& CProvider_Base::GetName(void) const
{
    if (!CanGetName()) {
        ThrowUnassigned(1);
    }
    return m_Name;
}

inline
void CProvider_Base::SetName(const CProvider_Base::TName& value)
{
    m_Name = value;
    m_set_State[0] |= 0xc;
}

inline
CProvider_Base::TName& CProvider_Base::SetName(void)
{
#ifdef _DEBUG
    if (!IsSetName()) {
        m_Name = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Name;
}

inline
bool CProvider_Base::IsSetNameAbbr(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CProvider_Base::CanGetNameAbbr(void) const
{
    return IsSetNameAbbr();
}

inline
const CProvider_Base::TNameAbbr& CProvider_Base::GetNameAbbr(void) const
{
    if (!CanGetNameAbbr()) {
        ThrowUnassigned(2);
    }
    return m_NameAbbr;
}

inline
void CProvider_Base::SetNameAbbr(const CProvider_Base::TNameAbbr& value)
{
    m_NameAbbr = value;
    m_set_State[0] |= 0x30;
}

inline
CProvider_Base::TNameAbbr& CProvider_Base::SetNameAbbr(void)
{
#ifdef _DEBUG
    if (!IsSetNameAbbr()) {
        m_NameAbbr = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x10;
    return m_NameAbbr;
}

inline
bool CProvider_Base::IsSetSubjectType(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CProvider_Base::CanGetSubjectType(void) const
{
    return true;
}

inline
const CProvider_Base::TSubjectType& CProvider_Base::GetSubjectType(void) const
{
    return m_SubjectType;
}

inline
CProvider_Base::TSubjectType& CProvider_Base::SetSubjectType(void)
{
    m_set_State[0] |= 0x40;
    return m_SubjectType;
}

inline
bool CProvider_Base::IsSetAttribute(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CProvider_Base::CanGetAttribute(void) const
{
    return true;
}

inline
const CProvider_Base::TAttribute& CProvider_Base::GetAttribute(void) const
{
    return m_Attribute;
}

inline
CProvider_Base::TAttribute& CProvider_Base::SetAttribute(void)
{
    m_set_State[0] |= 0x100;
    return m_Attribute;
}

inline
bool CProvider_Base::IsSetUrl(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CProvider_Base::CanGetUrl(void) const
{
    return true;
}

inline
const CProvider_Base::TUrl& CProvider_Base::GetUrl(void) const
{
    return m_Url;
}

inline
CProvider_Base::TUrl& CProvider_Base::SetUrl(void)
{
    m_set_State[0] |= 0x400;
    return m_Url;
}

inline
bool CProvider_Base::IsSetIconUrl(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CProvider_Base::CanGetIconUrl(void) const
{
    return true;
}

inline
const CProvider_Base::TIconUrl& CProvider_Base::GetIconUrl(void) const
{
    return m_IconUrl;
}

inline
CProvider_Base::TIconUrl& CProvider_Base::SetIconUrl(void)
{
    m_set_State[0] |= 0x1000;
    return m_IconUrl;
}

inline
bool CProvider_Base::IsSetBrief(void) const
{
    return ((m_set_State[0] & 0xc000) != 0);
}

inline
bool CProvider_Base::CanGetBrief(void) const
{
    return IsSetBrief();
}

inline
const CProvider_Base::TBrief& CProvider_Base::GetBrief(void) const
{
    if (!CanGetBrief()) {
        ThrowUnassigned(7);
    }
    return m_Brief;
}

inline
void CProvider_Base::SetBrief(const CProvider_Base::TBrief& value)
{
    m_Brief = value;
    m_set_State[0] |= 0xc000;
}

inline
CProvider_Base::TBrief& CProvider_Base::SetBrief(void)
{
#ifdef _DEBUG
    if (!IsSetBrief()) {
        m_Brief = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4000;
    return m_Brief;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_linkout_SCOPE // namespace linkout::


#endif // linkout__OBJTOOLS_EUTILS_LINKOUT_PROVIDER_BASE_HPP
