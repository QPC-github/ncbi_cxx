/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Length_distribution_params_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gnomon.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_GNOMON_LENGTH_DISTRIBUTION_PARAMS_BASE_HPP
#define ALGO_GNOMON_LENGTH_DISTRIBUTION_PARAMS_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_XALGOGNOMON_EXPORT CLength_distribution_params_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CLength_distribution_params_Base(void);
    // destructor
    virtual ~CLength_distribution_params_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_XALGOGNOMON_EXPORT C_Range : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Range(void);
        // destructor
        ~C_Range(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TMin;
        typedef int TMax;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TMin
        ///  Check whether the Min data member has been assigned a value.
        bool IsSetMin(void) const;
        /// Check whether it is safe or not to call GetMin method.
        bool CanGetMin(void) const;
        void ResetMin(void);
        TMin GetMin(void) const;
        void SetMin(TMin value);
        TMin& SetMin(void);
    
        /// mandatory
        /// typedef int TMax
        ///  Check whether the Max data member has been assigned a value.
        bool IsSetMax(void) const;
        /// Check whether it is safe or not to call GetMax method.
        bool CanGetMax(void) const;
        void ResetMax(void);
        TMax GetMax(void) const;
        void SetMax(TMax value);
        TMax& SetMax(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Range(const C_Range&);
        C_Range& operator=(const C_Range&);
    
        // data
        Uint4 m_set_State[1];
        int m_Min;
        int m_Max;
    };
    // types
    typedef int TStep;
    typedef list< double > TP;
    typedef double TA;
    typedef double TL;
    typedef C_Range TRange;

    // getters
    // setters

    /// mandatory
    /// typedef int TStep
    ///  Check whether the Step data member has been assigned a value.
    bool IsSetStep(void) const;
    /// Check whether it is safe or not to call GetStep method.
    bool CanGetStep(void) const;
    void ResetStep(void);
    TStep GetStep(void) const;
    void SetStep(TStep value);
    TStep& SetStep(void);

    /// P(step*(i+.5))|i=0,1,...,N-1
    /// mandatory
    /// typedef list< double > TP
    ///  Check whether the P data member has been assigned a value.
    bool IsSetP(void) const;
    /// Check whether it is safe or not to call GetP method.
    bool CanGetP(void) const;
    void ResetP(void);
    const TP& GetP(void) const;
    TP& SetP(void);

    /// Loretz function coefficient for the tail
    /// mandatory
    /// typedef double TA
    ///  Check whether the A data member has been assigned a value.
    bool IsSetA(void) const;
    /// Check whether it is safe or not to call GetA method.
    bool CanGetA(void) const;
    void ResetA(void);
    TA GetA(void) const;
    void SetA(TA value);
    TA& SetA(void);

    /// Loretz function coefficient for the tail
    /// mandatory
    /// typedef double TL
    ///  Check whether the L data member has been assigned a value.
    bool IsSetL(void) const;
    /// Check whether it is safe or not to call GetL method.
    bool CanGetL(void) const;
    void ResetL(void);
    TL GetL(void) const;
    void SetL(TL value);
    TL& SetL(void);

    /// mandatory
    /// typedef C_Range TRange
    ///  Check whether the Range data member has been assigned a value.
    bool IsSetRange(void) const;
    /// Check whether it is safe or not to call GetRange method.
    bool CanGetRange(void) const;
    void ResetRange(void);
    const TRange& GetRange(void) const;
    void SetRange(TRange& value);
    TRange& SetRange(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLength_distribution_params_Base(const CLength_distribution_params_Base&);
    CLength_distribution_params_Base& operator=(const CLength_distribution_params_Base&);

    // data
    Uint4 m_set_State[1];
    int m_Step;
    list< double > m_P;
    double m_A;
    double m_L;
    CRef< TRange > m_Range;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CLength_distribution_params_Base::C_Range::IsSetMin(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLength_distribution_params_Base::C_Range::CanGetMin(void) const
{
    return IsSetMin();
}

inline
void CLength_distribution_params_Base::C_Range::ResetMin(void)
{
    m_Min = 0;
    m_set_State[0] &= ~0x3;
}

inline
CLength_distribution_params_Base::C_Range::TMin CLength_distribution_params_Base::C_Range::GetMin(void) const
{
    if (!CanGetMin()) {
        ThrowUnassigned(0);
    }
    return m_Min;
}

inline
void CLength_distribution_params_Base::C_Range::SetMin(CLength_distribution_params_Base::C_Range::TMin value)
{
    m_Min = value;
    m_set_State[0] |= 0x3;
}

inline
CLength_distribution_params_Base::C_Range::TMin& CLength_distribution_params_Base::C_Range::SetMin(void)
{
#ifdef _DEBUG
    if (!IsSetMin()) {
        memset(&m_Min,UnassignedByte(),sizeof(m_Min));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Min;
}

inline
bool CLength_distribution_params_Base::C_Range::IsSetMax(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLength_distribution_params_Base::C_Range::CanGetMax(void) const
{
    return IsSetMax();
}

inline
void CLength_distribution_params_Base::C_Range::ResetMax(void)
{
    m_Max = 0;
    m_set_State[0] &= ~0xc;
}

inline
CLength_distribution_params_Base::C_Range::TMax CLength_distribution_params_Base::C_Range::GetMax(void) const
{
    if (!CanGetMax()) {
        ThrowUnassigned(1);
    }
    return m_Max;
}

inline
void CLength_distribution_params_Base::C_Range::SetMax(CLength_distribution_params_Base::C_Range::TMax value)
{
    m_Max = value;
    m_set_State[0] |= 0xc;
}

inline
CLength_distribution_params_Base::C_Range::TMax& CLength_distribution_params_Base::C_Range::SetMax(void)
{
#ifdef _DEBUG
    if (!IsSetMax()) {
        memset(&m_Max,UnassignedByte(),sizeof(m_Max));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Max;
}

inline
bool CLength_distribution_params_Base::IsSetStep(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLength_distribution_params_Base::CanGetStep(void) const
{
    return IsSetStep();
}

inline
void CLength_distribution_params_Base::ResetStep(void)
{
    m_Step = 0;
    m_set_State[0] &= ~0x3;
}

inline
CLength_distribution_params_Base::TStep CLength_distribution_params_Base::GetStep(void) const
{
    if (!CanGetStep()) {
        ThrowUnassigned(0);
    }
    return m_Step;
}

inline
void CLength_distribution_params_Base::SetStep(CLength_distribution_params_Base::TStep value)
{
    m_Step = value;
    m_set_State[0] |= 0x3;
}

inline
CLength_distribution_params_Base::TStep& CLength_distribution_params_Base::SetStep(void)
{
#ifdef _DEBUG
    if (!IsSetStep()) {
        memset(&m_Step,UnassignedByte(),sizeof(m_Step));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Step;
}

inline
bool CLength_distribution_params_Base::IsSetP(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLength_distribution_params_Base::CanGetP(void) const
{
    return true;
}

inline
const CLength_distribution_params_Base::TP& CLength_distribution_params_Base::GetP(void) const
{
    return m_P;
}

inline
CLength_distribution_params_Base::TP& CLength_distribution_params_Base::SetP(void)
{
    m_set_State[0] |= 0x4;
    return m_P;
}

inline
bool CLength_distribution_params_Base::IsSetA(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CLength_distribution_params_Base::CanGetA(void) const
{
    return IsSetA();
}

inline
void CLength_distribution_params_Base::ResetA(void)
{
    m_A = 0;
    m_set_State[0] &= ~0x30;
}

inline
CLength_distribution_params_Base::TA CLength_distribution_params_Base::GetA(void) const
{
    if (!CanGetA()) {
        ThrowUnassigned(2);
    }
    return m_A;
}

inline
void CLength_distribution_params_Base::SetA(CLength_distribution_params_Base::TA value)
{
    m_A = value;
    m_set_State[0] |= 0x30;
}

inline
CLength_distribution_params_Base::TA& CLength_distribution_params_Base::SetA(void)
{
#ifdef _DEBUG
    if (!IsSetA()) {
        memset(&m_A,UnassignedByte(),sizeof(m_A));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_A;
}

inline
bool CLength_distribution_params_Base::IsSetL(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CLength_distribution_params_Base::CanGetL(void) const
{
    return IsSetL();
}

inline
void CLength_distribution_params_Base::ResetL(void)
{
    m_L = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CLength_distribution_params_Base::TL CLength_distribution_params_Base::GetL(void) const
{
    if (!CanGetL()) {
        ThrowUnassigned(3);
    }
    return m_L;
}

inline
void CLength_distribution_params_Base::SetL(CLength_distribution_params_Base::TL value)
{
    m_L = value;
    m_set_State[0] |= 0xc0;
}

inline
CLength_distribution_params_Base::TL& CLength_distribution_params_Base::SetL(void)
{
#ifdef _DEBUG
    if (!IsSetL()) {
        memset(&m_L,UnassignedByte(),sizeof(m_L));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_L;
}

inline
bool CLength_distribution_params_Base::IsSetRange(void) const
{
    return m_Range.NotEmpty();
}

inline
bool CLength_distribution_params_Base::CanGetRange(void) const
{
    return true;
}

inline
const CLength_distribution_params_Base::TRange& CLength_distribution_params_Base::GetRange(void) const
{
    if ( !m_Range ) {
        const_cast<CLength_distribution_params_Base*>(this)->ResetRange();
    }
    return (*m_Range);
}

inline
CLength_distribution_params_Base::TRange& CLength_distribution_params_Base::SetRange(void)
{
    if ( !m_Range ) {
        ResetRange();
    }
    return (*m_Range);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_GNOMON_LENGTH_DISTRIBUTION_PARAMS_BASE_HPP
