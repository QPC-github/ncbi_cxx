/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Gnomon_param_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gnomon.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_GNOMON_GNOMON_PARAM_BASE_HPP
#define ALGO_GNOMON_GNOMON_PARAM_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CExon_params;
class CIntergenic_params;
class CIntron_params;
class CMarkov_chain_array;
class CMarkov_chain_params;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_XALGOGNOMON_EXPORT CGnomon_param_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CGnomon_param_Base(void);
    // destructor
    virtual ~CGnomon_param_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    /// percents
    class NCBI_XALGOGNOMON_EXPORT C_Gc_content_range : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Gc_content_range(void);
        // destructor
        ~C_Gc_content_range(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TFrom;
        typedef int TTo;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TFrom
        ///  Check whether the From data member has been assigned a value.
        bool IsSetFrom(void) const;
        /// Check whether it is safe or not to call GetFrom method.
        bool CanGetFrom(void) const;
        void ResetFrom(void);
        TFrom GetFrom(void) const;
        void SetFrom(TFrom value);
        TFrom& SetFrom(void);
    
        /// mandatory
        /// typedef int TTo
        ///  Check whether the To data member has been assigned a value.
        bool IsSetTo(void) const;
        /// Check whether it is safe or not to call GetTo method.
        bool CanGetTo(void) const;
        void ResetTo(void);
        TTo GetTo(void) const;
        void SetTo(TTo value);
        TTo& SetTo(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Gc_content_range(const C_Gc_content_range&);
        C_Gc_content_range& operator=(const C_Gc_content_range&);
    
        // data
        Uint4 m_set_State[1];
        int m_From;
        int m_To;
    };
    /////////////////////////////////////////////////////////////////////////////
    class NCBI_XALGOGNOMON_EXPORT C_Param : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Param(void);
        // destructor
        ~C_Param(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
    
        /// Choice variants.
        enum E_Choice {
            e_not_set = 0,        ///< No variant selected
            e_Intergenic,
            e_Intron,
            e_Exon,
            e_Start,
            e_Stop,
            e_Donor,
            e_Acceptor,
            e_Coding_region,      ///< three elements (per phase)
            e_Non_coding_region
        };
        /// Maximum+1 value of the choice variant enumerator.
        enum E_ChoiceStopper {
            e_MaxChoice = 10 ///< == e_Non_coding_region+1
        };
    
        /// Reset the whole object
        void Reset(void);
    
        /// Reset the selection (set it to e_not_set).
        void ResetSelection(void);
    
        /// Which variant is currently selected.
        E_Choice Which(void) const;
    
        /// Verify selection, throw exception if it differs from the expected.
        void CheckSelected(E_Choice index) const;
    
        /// Throw 'InvalidSelection' exception.
        NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;
    
        /// Retrieve selection name (for diagnostic purposes).
        static string SelectionName(E_Choice index);
    
        /// Select the requested variant if needed.
        void Select(E_Choice index, EResetVariant reset = eDoResetVariant);
        /// Select the requested variant if needed,
        /// allocating CObject variants from memory pool.
        void Select(E_Choice index,
                    EResetVariant reset,
                    CObjectMemoryPool* pool);
    
        // types
        typedef CIntergenic_params TIntergenic;
        typedef CIntron_params TIntron;
        typedef CExon_params TExon;
        typedef CMarkov_chain_array TStart;
        typedef CMarkov_chain_array TStop;
        typedef CMarkov_chain_array TDonor;
        typedef CMarkov_chain_array TAcceptor;
        typedef list< CRef< CMarkov_chain_params > > TCoding_region;
        typedef CMarkov_chain_params TNon_coding_region;
    
        // getters
        // setters
    
        // typedef CIntergenic_params TIntergenic
        bool IsIntergenic(void) const;
        const TIntergenic& GetIntergenic(void) const;
        TIntergenic& SetIntergenic(void);
        void SetIntergenic(TIntergenic& value);
    
        // typedef CIntron_params TIntron
        bool IsIntron(void) const;
        const TIntron& GetIntron(void) const;
        TIntron& SetIntron(void);
        void SetIntron(TIntron& value);
    
        // typedef CExon_params TExon
        bool IsExon(void) const;
        const TExon& GetExon(void) const;
        TExon& SetExon(void);
        void SetExon(TExon& value);
    
        // typedef CMarkov_chain_array TStart
        bool IsStart(void) const;
        const TStart& GetStart(void) const;
        TStart& SetStart(void);
        void SetStart(TStart& value);
    
        // typedef CMarkov_chain_array TStop
        bool IsStop(void) const;
        const TStop& GetStop(void) const;
        TStop& SetStop(void);
        void SetStop(TStop& value);
    
        // typedef CMarkov_chain_array TDonor
        bool IsDonor(void) const;
        const TDonor& GetDonor(void) const;
        TDonor& SetDonor(void);
        void SetDonor(TDonor& value);
    
        // typedef CMarkov_chain_array TAcceptor
        bool IsAcceptor(void) const;
        const TAcceptor& GetAcceptor(void) const;
        TAcceptor& SetAcceptor(void);
        void SetAcceptor(TAcceptor& value);
    
        // typedef list< CRef< CMarkov_chain_params > > TCoding_region
        bool IsCoding_region(void) const;
        const TCoding_region& GetCoding_region(void) const;
        TCoding_region& SetCoding_region(void);
    
        // typedef CMarkov_chain_params TNon_coding_region
        bool IsNon_coding_region(void) const;
        const TNon_coding_region& GetNon_coding_region(void) const;
        TNon_coding_region& SetNon_coding_region(void);
        void SetNon_coding_region(TNon_coding_region& value);
    
    
    private:
        // copy constructor and assignment operator
        C_Param(const C_Param& );
        C_Param& operator=(const C_Param& );
        // choice state
        E_Choice m_choice;
        // helper methods
        void DoSelect(E_Choice index, CObjectMemoryPool* pool = 0);
    
        static const char* const sm_SelectionNames[];
        // data
        union {
            NCBI_NS_NCBI::CUnionBuffer<TCoding_region> m_Coding_region;
            NCBI_NS_NCBI::CSerialObject *m_object;
        };
    };
    // types
    typedef C_Gc_content_range TGc_content_range;
    typedef C_Param TParam;

    // getters
    // setters

    /// mandatory
    /// typedef C_Gc_content_range TGc_content_range
    ///  Check whether the Gc_content_range data member has been assigned a value.
    bool IsSetGc_content_range(void) const;
    /// Check whether it is safe or not to call GetGc_content_range method.
    bool CanGetGc_content_range(void) const;
    void ResetGc_content_range(void);
    const TGc_content_range& GetGc_content_range(void) const;
    void SetGc_content_range(TGc_content_range& value);
    TGc_content_range& SetGc_content_range(void);

    /// mandatory
    /// typedef C_Param TParam
    ///  Check whether the Param data member has been assigned a value.
    bool IsSetParam(void) const;
    /// Check whether it is safe or not to call GetParam method.
    bool CanGetParam(void) const;
    void ResetParam(void);
    const TParam& GetParam(void) const;
    void SetParam(TParam& value);
    TParam& SetParam(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CGnomon_param_Base(const CGnomon_param_Base&);
    CGnomon_param_Base& operator=(const CGnomon_param_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TGc_content_range > m_Gc_content_range;
    CRef< TParam > m_Param;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CGnomon_param_Base::C_Gc_content_range::IsSetFrom(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CGnomon_param_Base::C_Gc_content_range::CanGetFrom(void) const
{
    return IsSetFrom();
}

inline
void CGnomon_param_Base::C_Gc_content_range::ResetFrom(void)
{
    m_From = 0;
    m_set_State[0] &= ~0x3;
}

inline
CGnomon_param_Base::C_Gc_content_range::TFrom CGnomon_param_Base::C_Gc_content_range::GetFrom(void) const
{
    if (!CanGetFrom()) {
        ThrowUnassigned(0);
    }
    return m_From;
}

inline
void CGnomon_param_Base::C_Gc_content_range::SetFrom(CGnomon_param_Base::C_Gc_content_range::TFrom value)
{
    m_From = value;
    m_set_State[0] |= 0x3;
}

inline
CGnomon_param_Base::C_Gc_content_range::TFrom& CGnomon_param_Base::C_Gc_content_range::SetFrom(void)
{
#ifdef _DEBUG
    if (!IsSetFrom()) {
        memset(&m_From,UnassignedByte(),sizeof(m_From));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_From;
}

inline
bool CGnomon_param_Base::C_Gc_content_range::IsSetTo(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CGnomon_param_Base::C_Gc_content_range::CanGetTo(void) const
{
    return IsSetTo();
}

inline
void CGnomon_param_Base::C_Gc_content_range::ResetTo(void)
{
    m_To = 0;
    m_set_State[0] &= ~0xc;
}

inline
CGnomon_param_Base::C_Gc_content_range::TTo CGnomon_param_Base::C_Gc_content_range::GetTo(void) const
{
    if (!CanGetTo()) {
        ThrowUnassigned(1);
    }
    return m_To;
}

inline
void CGnomon_param_Base::C_Gc_content_range::SetTo(CGnomon_param_Base::C_Gc_content_range::TTo value)
{
    m_To = value;
    m_set_State[0] |= 0xc;
}

inline
CGnomon_param_Base::C_Gc_content_range::TTo& CGnomon_param_Base::C_Gc_content_range::SetTo(void)
{
#ifdef _DEBUG
    if (!IsSetTo()) {
        memset(&m_To,UnassignedByte(),sizeof(m_To));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_To;
}

inline
CGnomon_param_Base::C_Param::E_Choice CGnomon_param_Base::C_Param::Which(void) const
{
    return m_choice;
}

inline
void CGnomon_param_Base::C_Param::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CGnomon_param_Base::C_Param::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CGnomon_param_Base::C_Param::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CGnomon_param_Base::C_Param::IsIntergenic(void) const
{
    return m_choice == e_Intergenic;
}

inline
bool CGnomon_param_Base::C_Param::IsIntron(void) const
{
    return m_choice == e_Intron;
}

inline
bool CGnomon_param_Base::C_Param::IsExon(void) const
{
    return m_choice == e_Exon;
}

inline
bool CGnomon_param_Base::C_Param::IsStart(void) const
{
    return m_choice == e_Start;
}

inline
bool CGnomon_param_Base::C_Param::IsStop(void) const
{
    return m_choice == e_Stop;
}

inline
bool CGnomon_param_Base::C_Param::IsDonor(void) const
{
    return m_choice == e_Donor;
}

inline
bool CGnomon_param_Base::C_Param::IsAcceptor(void) const
{
    return m_choice == e_Acceptor;
}

inline
bool CGnomon_param_Base::C_Param::IsCoding_region(void) const
{
    return m_choice == e_Coding_region;
}

inline
const CGnomon_param_Base::C_Param::TCoding_region& CGnomon_param_Base::C_Param::GetCoding_region(void) const
{
    CheckSelected(e_Coding_region);
    return *m_Coding_region;
}

inline
CGnomon_param_Base::C_Param::TCoding_region& CGnomon_param_Base::C_Param::SetCoding_region(void)
{
    Select(e_Coding_region, NCBI_NS_NCBI::eDoNotResetVariant);
    return *m_Coding_region;
}

inline
bool CGnomon_param_Base::C_Param::IsNon_coding_region(void) const
{
    return m_choice == e_Non_coding_region;
}

inline
bool CGnomon_param_Base::IsSetGc_content_range(void) const
{
    return m_Gc_content_range.NotEmpty();
}

inline
bool CGnomon_param_Base::CanGetGc_content_range(void) const
{
    return true;
}

inline
const CGnomon_param_Base::TGc_content_range& CGnomon_param_Base::GetGc_content_range(void) const
{
    if ( !m_Gc_content_range ) {
        const_cast<CGnomon_param_Base*>(this)->ResetGc_content_range();
    }
    return (*m_Gc_content_range);
}

inline
CGnomon_param_Base::TGc_content_range& CGnomon_param_Base::SetGc_content_range(void)
{
    if ( !m_Gc_content_range ) {
        ResetGc_content_range();
    }
    return (*m_Gc_content_range);
}

inline
bool CGnomon_param_Base::IsSetParam(void) const
{
    return m_Param.NotEmpty();
}

inline
bool CGnomon_param_Base::CanGetParam(void) const
{
    return true;
}

inline
const CGnomon_param_Base::TParam& CGnomon_param_Base::GetParam(void) const
{
    if ( !m_Param ) {
        const_cast<CGnomon_param_Base*>(this)->ResetParam();
    }
    return (*m_Param);
}

inline
CGnomon_param_Base::TParam& CGnomon_param_Base::SetParam(void)
{
    if ( !m_Param ) {
        ResetParam();
    }
    return (*m_Param);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_GNOMON_GNOMON_PARAM_BASE_HPP
