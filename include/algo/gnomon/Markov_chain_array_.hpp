/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Markov_chain_array_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gnomon.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_GNOMON_MARKOV_CHAIN_ARRAY_BASE_HPP
#define ALGO_GNOMON_MARKOV_CHAIN_ARRAY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CMarkov_chain_params;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_XALGOGNOMON_EXPORT CMarkov_chain_array_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CMarkov_chain_array_Base(void);
    // destructor
    virtual ~CMarkov_chain_array_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TIn_exon;
    typedef int TIn_intron;
    typedef list< CRef< CMarkov_chain_params > > TMatrix;

    // getters
    // setters

    /// mandatory
    /// typedef int TIn_exon
    ///  Check whether the In_exon data member has been assigned a value.
    bool IsSetIn_exon(void) const;
    /// Check whether it is safe or not to call GetIn_exon method.
    bool CanGetIn_exon(void) const;
    void ResetIn_exon(void);
    TIn_exon GetIn_exon(void) const;
    void SetIn_exon(TIn_exon value);
    TIn_exon& SetIn_exon(void);

    /// mandatory
    /// typedef int TIn_intron
    ///  Check whether the In_intron data member has been assigned a value.
    bool IsSetIn_intron(void) const;
    /// Check whether it is safe or not to call GetIn_intron method.
    bool CanGetIn_intron(void) const;
    void ResetIn_intron(void);
    TIn_intron GetIn_intron(void) const;
    void SetIn_intron(TIn_intron value);
    TIn_intron& SetIn_intron(void);

    /// in-exon+in-intron elements
    /// mandatory
    /// typedef list< CRef< CMarkov_chain_params > > TMatrix
    ///  Check whether the Matrix data member has been assigned a value.
    bool IsSetMatrix(void) const;
    /// Check whether it is safe or not to call GetMatrix method.
    bool CanGetMatrix(void) const;
    void ResetMatrix(void);
    const TMatrix& GetMatrix(void) const;
    TMatrix& SetMatrix(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CMarkov_chain_array_Base(const CMarkov_chain_array_Base&);
    CMarkov_chain_array_Base& operator=(const CMarkov_chain_array_Base&);

    // data
    Uint4 m_set_State[1];
    int m_In_exon;
    int m_In_intron;
    list< CRef< CMarkov_chain_params > > m_Matrix;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CMarkov_chain_array_Base::IsSetIn_exon(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CMarkov_chain_array_Base::CanGetIn_exon(void) const
{
    return IsSetIn_exon();
}

inline
void CMarkov_chain_array_Base::ResetIn_exon(void)
{
    m_In_exon = 0;
    m_set_State[0] &= ~0x3;
}

inline
CMarkov_chain_array_Base::TIn_exon CMarkov_chain_array_Base::GetIn_exon(void) const
{
    if (!CanGetIn_exon()) {
        ThrowUnassigned(0);
    }
    return m_In_exon;
}

inline
void CMarkov_chain_array_Base::SetIn_exon(CMarkov_chain_array_Base::TIn_exon value)
{
    m_In_exon = value;
    m_set_State[0] |= 0x3;
}

inline
CMarkov_chain_array_Base::TIn_exon& CMarkov_chain_array_Base::SetIn_exon(void)
{
#ifdef _DEBUG
    if (!IsSetIn_exon()) {
        memset(&m_In_exon,UnassignedByte(),sizeof(m_In_exon));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_In_exon;
}

inline
bool CMarkov_chain_array_Base::IsSetIn_intron(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CMarkov_chain_array_Base::CanGetIn_intron(void) const
{
    return IsSetIn_intron();
}

inline
void CMarkov_chain_array_Base::ResetIn_intron(void)
{
    m_In_intron = 0;
    m_set_State[0] &= ~0xc;
}

inline
CMarkov_chain_array_Base::TIn_intron CMarkov_chain_array_Base::GetIn_intron(void) const
{
    if (!CanGetIn_intron()) {
        ThrowUnassigned(1);
    }
    return m_In_intron;
}

inline
void CMarkov_chain_array_Base::SetIn_intron(CMarkov_chain_array_Base::TIn_intron value)
{
    m_In_intron = value;
    m_set_State[0] |= 0xc;
}

inline
CMarkov_chain_array_Base::TIn_intron& CMarkov_chain_array_Base::SetIn_intron(void)
{
#ifdef _DEBUG
    if (!IsSetIn_intron()) {
        memset(&m_In_intron,UnassignedByte(),sizeof(m_In_intron));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_In_intron;
}

inline
bool CMarkov_chain_array_Base::IsSetMatrix(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CMarkov_chain_array_Base::CanGetMatrix(void) const
{
    return true;
}

inline
const CMarkov_chain_array_Base::TMatrix& CMarkov_chain_array_Base::GetMatrix(void) const
{
    return m_Matrix;
}

inline
CMarkov_chain_array_Base::TMatrix& CMarkov_chain_array_Base::SetMatrix(void)
{
    m_set_State[0] |= 0x10;
    return m_Matrix;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_GNOMON_MARKOV_CHAIN_ARRAY_BASE_HPP
