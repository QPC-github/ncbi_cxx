/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Markov_chain_params_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gnomon.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_GNOMON_MARKOV_CHAIN_PARAMS_BASE_HPP
#define ALGO_GNOMON_MARKOV_CHAIN_PARAMS_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CMarkov_chain_params;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_XALGOGNOMON_EXPORT CMarkov_chain_params_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CMarkov_chain_params_Base(void);
    // destructor
    virtual ~CMarkov_chain_params_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_XALGOGNOMON_EXPORT C_E_Probabilities : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_E_Probabilities(void);
        // destructor
        ~C_E_Probabilities(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
    
        /// Choice variants.
        enum E_Choice {
            e_not_set = 0,  ///< No variant selected
            e_Prev_order,
            e_Value
        };
        /// Maximum+1 value of the choice variant enumerator.
        enum E_ChoiceStopper {
            e_MaxChoice = 3 ///< == e_Value+1
        };
    
        /// Reset the whole object
        void Reset(void);
    
        /// Reset the selection (set it to e_not_set).
        void ResetSelection(void);
    
        /// Which variant is currently selected.
        E_Choice Which(void) const;
    
        /// Verify selection, throw exception if it differs from the expected.
        void CheckSelected(E_Choice index) const;
    
        /// Throw 'InvalidSelection' exception.
        NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;
    
        /// Retrieve selection name (for diagnostic purposes).
        static string SelectionName(E_Choice index);
    
        /// Select the requested variant if needed.
        void Select(E_Choice index, EResetVariant reset = eDoResetVariant);
        /// Select the requested variant if needed,
        /// allocating CObject variants from memory pool.
        void Select(E_Choice index,
                    EResetVariant reset,
                    CObjectMemoryPool* pool);
    
        // types
        typedef CMarkov_chain_params TPrev_order;
        typedef double TValue;
    
        // getters
        // setters
    
        // typedef CMarkov_chain_params TPrev_order
        bool IsPrev_order(void) const;
        const TPrev_order& GetPrev_order(void) const;
        TPrev_order& SetPrev_order(void);
        void SetPrev_order(TPrev_order& value);
    
        // typedef double TValue
        bool IsValue(void) const;
        TValue GetValue(void) const;
        TValue& SetValue(void);
        void SetValue(TValue value);
    
    
    private:
        // copy constructor and assignment operator
        C_E_Probabilities(const C_E_Probabilities& );
        C_E_Probabilities& operator=(const C_E_Probabilities& );
        // choice state
        E_Choice m_choice;
        // helper methods
        void DoSelect(E_Choice index, CObjectMemoryPool* pool = 0);
    
        static const char* const sm_SelectionNames[];
        // data
        union {
            TValue m_Value;
            NCBI_NS_NCBI::CSerialObject *m_object;
        };
    };
    // types
    typedef int TOrder;
    typedef C_E_Probabilities C_E;
    typedef list< CRef< C_E_Probabilities > > TProbabilities;

    // getters
    // setters

    /// mandatory
    /// typedef int TOrder
    ///  Check whether the Order data member has been assigned a value.
    bool IsSetOrder(void) const;
    /// Check whether it is safe or not to call GetOrder method.
    bool CanGetOrder(void) const;
    void ResetOrder(void);
    TOrder GetOrder(void) const;
    void SetOrder(TOrder value);
    TOrder& SetOrder(void);

    /// mandatory
    /// typedef list< CRef< C_E_Probabilities > > TProbabilities
    ///  Check whether the Probabilities data member has been assigned a value.
    bool IsSetProbabilities(void) const;
    /// Check whether it is safe or not to call GetProbabilities method.
    bool CanGetProbabilities(void) const;
    void ResetProbabilities(void);
    const TProbabilities& GetProbabilities(void) const;
    TProbabilities& SetProbabilities(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CMarkov_chain_params_Base(const CMarkov_chain_params_Base&);
    CMarkov_chain_params_Base& operator=(const CMarkov_chain_params_Base&);

    // data
    Uint4 m_set_State[1];
    int m_Order;
    list< CRef< C_E_Probabilities > > m_Probabilities;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
CMarkov_chain_params_Base::C_E_Probabilities::E_Choice CMarkov_chain_params_Base::C_E_Probabilities::Which(void) const
{
    return m_choice;
}

inline
void CMarkov_chain_params_Base::C_E_Probabilities::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CMarkov_chain_params_Base::C_E_Probabilities::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CMarkov_chain_params_Base::C_E_Probabilities::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CMarkov_chain_params_Base::C_E_Probabilities::IsPrev_order(void) const
{
    return m_choice == e_Prev_order;
}

inline
bool CMarkov_chain_params_Base::C_E_Probabilities::IsValue(void) const
{
    return m_choice == e_Value;
}

inline
CMarkov_chain_params_Base::C_E_Probabilities::TValue CMarkov_chain_params_Base::C_E_Probabilities::GetValue(void) const
{
    CheckSelected(e_Value);
    return m_Value;
}

inline
CMarkov_chain_params_Base::C_E_Probabilities::TValue& CMarkov_chain_params_Base::C_E_Probabilities::SetValue(void)
{
    Select(e_Value, NCBI_NS_NCBI::eDoNotResetVariant);
    return m_Value;
}

inline
void CMarkov_chain_params_Base::C_E_Probabilities::SetValue(CMarkov_chain_params_Base::C_E_Probabilities::TValue value)
{
    Select(e_Value, NCBI_NS_NCBI::eDoNotResetVariant);
    m_Value = value;
}

inline
bool CMarkov_chain_params_Base::IsSetOrder(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CMarkov_chain_params_Base::CanGetOrder(void) const
{
    return IsSetOrder();
}

inline
void CMarkov_chain_params_Base::ResetOrder(void)
{
    m_Order = 0;
    m_set_State[0] &= ~0x3;
}

inline
CMarkov_chain_params_Base::TOrder CMarkov_chain_params_Base::GetOrder(void) const
{
    if (!CanGetOrder()) {
        ThrowUnassigned(0);
    }
    return m_Order;
}

inline
void CMarkov_chain_params_Base::SetOrder(CMarkov_chain_params_Base::TOrder value)
{
    m_Order = value;
    m_set_State[0] |= 0x3;
}

inline
CMarkov_chain_params_Base::TOrder& CMarkov_chain_params_Base::SetOrder(void)
{
#ifdef _DEBUG
    if (!IsSetOrder()) {
        memset(&m_Order,UnassignedByte(),sizeof(m_Order));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Order;
}

inline
bool CMarkov_chain_params_Base::IsSetProbabilities(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CMarkov_chain_params_Base::CanGetProbabilities(void) const
{
    return true;
}

inline
const CMarkov_chain_params_Base::TProbabilities& CMarkov_chain_params_Base::GetProbabilities(void) const
{
    return m_Probabilities;
}

inline
CMarkov_chain_params_Base::TProbabilities& CMarkov_chain_params_Base::SetProbabilities(void)
{
    m_set_State[0] |= 0x4;
    return m_Probabilities;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_GNOMON_MARKOV_CHAIN_PARAMS_BASE_HPP
