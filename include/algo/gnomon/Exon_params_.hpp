/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Exon_params_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gnomon.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_GNOMON_EXON_PARAMS_BASE_HPP
#define ALGO_GNOMON_EXON_PARAMS_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CLength_distribution_params;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_XALGOGNOMON_EXPORT CExon_params_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CExon_params_Base(void);
    // destructor
    virtual ~CExon_params_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef list< double > TFirst_exon_phase_probabilities;
    typedef list< double > TInternal_exon_phase_probabilities;
    typedef CLength_distribution_params TFirst_exon_length;
    typedef CLength_distribution_params TInternal_exon_length;
    typedef CLength_distribution_params TLast_exon_length;
    typedef CLength_distribution_params TSingle_exon_length;

    // getters
    // setters

    /// 3 elements (per end phase)
    /// mandatory
    /// typedef list< double > TFirst_exon_phase_probabilities
    ///  Check whether the First_exon_phase_probabilities data member has been assigned a value.
    bool IsSetFirst_exon_phase_probabilities(void) const;
    /// Check whether it is safe or not to call GetFirst_exon_phase_probabilities method.
    bool CanGetFirst_exon_phase_probabilities(void) const;
    void ResetFirst_exon_phase_probabilities(void);
    const TFirst_exon_phase_probabilities& GetFirst_exon_phase_probabilities(void) const;
    TFirst_exon_phase_probabilities& SetFirst_exon_phase_probabilities(void);

    /// 3*3 elements (begin phase x end phase)
    /// mandatory
    /// typedef list< double > TInternal_exon_phase_probabilities
    ///  Check whether the Internal_exon_phase_probabilities data member has been assigned a value.
    bool IsSetInternal_exon_phase_probabilities(void) const;
    /// Check whether it is safe or not to call GetInternal_exon_phase_probabilities method.
    bool CanGetInternal_exon_phase_probabilities(void) const;
    void ResetInternal_exon_phase_probabilities(void);
    const TInternal_exon_phase_probabilities& GetInternal_exon_phase_probabilities(void) const;
    TInternal_exon_phase_probabilities& SetInternal_exon_phase_probabilities(void);

    /// mandatory
    /// typedef CLength_distribution_params TFirst_exon_length
    ///  Check whether the First_exon_length data member has been assigned a value.
    bool IsSetFirst_exon_length(void) const;
    /// Check whether it is safe or not to call GetFirst_exon_length method.
    bool CanGetFirst_exon_length(void) const;
    void ResetFirst_exon_length(void);
    const TFirst_exon_length& GetFirst_exon_length(void) const;
    void SetFirst_exon_length(TFirst_exon_length& value);
    TFirst_exon_length& SetFirst_exon_length(void);

    /// mandatory
    /// typedef CLength_distribution_params TInternal_exon_length
    ///  Check whether the Internal_exon_length data member has been assigned a value.
    bool IsSetInternal_exon_length(void) const;
    /// Check whether it is safe or not to call GetInternal_exon_length method.
    bool CanGetInternal_exon_length(void) const;
    void ResetInternal_exon_length(void);
    const TInternal_exon_length& GetInternal_exon_length(void) const;
    void SetInternal_exon_length(TInternal_exon_length& value);
    TInternal_exon_length& SetInternal_exon_length(void);

    /// mandatory
    /// typedef CLength_distribution_params TLast_exon_length
    ///  Check whether the Last_exon_length data member has been assigned a value.
    bool IsSetLast_exon_length(void) const;
    /// Check whether it is safe or not to call GetLast_exon_length method.
    bool CanGetLast_exon_length(void) const;
    void ResetLast_exon_length(void);
    const TLast_exon_length& GetLast_exon_length(void) const;
    void SetLast_exon_length(TLast_exon_length& value);
    TLast_exon_length& SetLast_exon_length(void);

    /// mandatory
    /// typedef CLength_distribution_params TSingle_exon_length
    ///  Check whether the Single_exon_length data member has been assigned a value.
    bool IsSetSingle_exon_length(void) const;
    /// Check whether it is safe or not to call GetSingle_exon_length method.
    bool CanGetSingle_exon_length(void) const;
    void ResetSingle_exon_length(void);
    const TSingle_exon_length& GetSingle_exon_length(void) const;
    void SetSingle_exon_length(TSingle_exon_length& value);
    TSingle_exon_length& SetSingle_exon_length(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CExon_params_Base(const CExon_params_Base&);
    CExon_params_Base& operator=(const CExon_params_Base&);

    // data
    Uint4 m_set_State[1];
    list< double > m_First_exon_phase_probabilities;
    list< double > m_Internal_exon_phase_probabilities;
    CRef< TFirst_exon_length > m_First_exon_length;
    CRef< TInternal_exon_length > m_Internal_exon_length;
    CRef< TLast_exon_length > m_Last_exon_length;
    CRef< TSingle_exon_length > m_Single_exon_length;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CExon_params_Base::IsSetFirst_exon_phase_probabilities(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CExon_params_Base::CanGetFirst_exon_phase_probabilities(void) const
{
    return true;
}

inline
const CExon_params_Base::TFirst_exon_phase_probabilities& CExon_params_Base::GetFirst_exon_phase_probabilities(void) const
{
    return m_First_exon_phase_probabilities;
}

inline
CExon_params_Base::TFirst_exon_phase_probabilities& CExon_params_Base::SetFirst_exon_phase_probabilities(void)
{
    m_set_State[0] |= 0x1;
    return m_First_exon_phase_probabilities;
}

inline
bool CExon_params_Base::IsSetInternal_exon_phase_probabilities(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CExon_params_Base::CanGetInternal_exon_phase_probabilities(void) const
{
    return true;
}

inline
const CExon_params_Base::TInternal_exon_phase_probabilities& CExon_params_Base::GetInternal_exon_phase_probabilities(void) const
{
    return m_Internal_exon_phase_probabilities;
}

inline
CExon_params_Base::TInternal_exon_phase_probabilities& CExon_params_Base::SetInternal_exon_phase_probabilities(void)
{
    m_set_State[0] |= 0x4;
    return m_Internal_exon_phase_probabilities;
}

inline
bool CExon_params_Base::IsSetFirst_exon_length(void) const
{
    return m_First_exon_length.NotEmpty();
}

inline
bool CExon_params_Base::CanGetFirst_exon_length(void) const
{
    return true;
}

inline
const CExon_params_Base::TFirst_exon_length& CExon_params_Base::GetFirst_exon_length(void) const
{
    if ( !m_First_exon_length ) {
        const_cast<CExon_params_Base*>(this)->ResetFirst_exon_length();
    }
    return (*m_First_exon_length);
}

inline
CExon_params_Base::TFirst_exon_length& CExon_params_Base::SetFirst_exon_length(void)
{
    if ( !m_First_exon_length ) {
        ResetFirst_exon_length();
    }
    return (*m_First_exon_length);
}

inline
bool CExon_params_Base::IsSetInternal_exon_length(void) const
{
    return m_Internal_exon_length.NotEmpty();
}

inline
bool CExon_params_Base::CanGetInternal_exon_length(void) const
{
    return true;
}

inline
const CExon_params_Base::TInternal_exon_length& CExon_params_Base::GetInternal_exon_length(void) const
{
    if ( !m_Internal_exon_length ) {
        const_cast<CExon_params_Base*>(this)->ResetInternal_exon_length();
    }
    return (*m_Internal_exon_length);
}

inline
CExon_params_Base::TInternal_exon_length& CExon_params_Base::SetInternal_exon_length(void)
{
    if ( !m_Internal_exon_length ) {
        ResetInternal_exon_length();
    }
    return (*m_Internal_exon_length);
}

inline
bool CExon_params_Base::IsSetLast_exon_length(void) const
{
    return m_Last_exon_length.NotEmpty();
}

inline
bool CExon_params_Base::CanGetLast_exon_length(void) const
{
    return true;
}

inline
const CExon_params_Base::TLast_exon_length& CExon_params_Base::GetLast_exon_length(void) const
{
    if ( !m_Last_exon_length ) {
        const_cast<CExon_params_Base*>(this)->ResetLast_exon_length();
    }
    return (*m_Last_exon_length);
}

inline
CExon_params_Base::TLast_exon_length& CExon_params_Base::SetLast_exon_length(void)
{
    if ( !m_Last_exon_length ) {
        ResetLast_exon_length();
    }
    return (*m_Last_exon_length);
}

inline
bool CExon_params_Base::IsSetSingle_exon_length(void) const
{
    return m_Single_exon_length.NotEmpty();
}

inline
bool CExon_params_Base::CanGetSingle_exon_length(void) const
{
    return true;
}

inline
const CExon_params_Base::TSingle_exon_length& CExon_params_Base::GetSingle_exon_length(void) const
{
    if ( !m_Single_exon_length ) {
        const_cast<CExon_params_Base*>(this)->ResetSingle_exon_length();
    }
    return (*m_Single_exon_length);
}

inline
CExon_params_Base::TSingle_exon_length& CExon_params_Base::SetSingle_exon_length(void)
{
    if ( !m_Single_exon_length ) {
        ResetSingle_exon_length();
    }
    return (*m_Single_exon_length);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_GNOMON_EXON_PARAMS_BASE_HPP
