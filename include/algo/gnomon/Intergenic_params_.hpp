/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Intergenic_params_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gnomon.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_GNOMON_INTERGENIC_PARAMS_BASE_HPP
#define ALGO_GNOMON_INTERGENIC_PARAMS_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CLength_distribution_params;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_XALGOGNOMON_EXPORT CIntergenic_params_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CIntergenic_params_Base(void);
    // destructor
    virtual ~CIntergenic_params_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef double TInitp;
    typedef double TTo_single;
    typedef CLength_distribution_params TLength;

    // getters
    // setters

    /// probability of a genomic point be intergenic
    /// mandatory
    /// typedef double TInitp
    ///  Check whether the Initp data member has been assigned a value.
    bool IsSetInitp(void) const;
    /// Check whether it is safe or not to call GetInitp method.
    bool CanGetInitp(void) const;
    void ResetInitp(void);
    TInitp GetInitp(void) const;
    void SetInitp(TInitp value);
    TInitp& SetInitp(void);

    /// probability of next gene to be single-exon
    /// mandatory
    /// typedef double TTo_single
    ///  Check whether the To_single data member has been assigned a value.
    bool IsSetTo_single(void) const;
    /// Check whether it is safe or not to call GetTo_single method.
    bool CanGetTo_single(void) const;
    void ResetTo_single(void);
    TTo_single GetTo_single(void) const;
    void SetTo_single(TTo_single value);
    TTo_single& SetTo_single(void);

    /// mandatory
    /// typedef CLength_distribution_params TLength
    ///  Check whether the Length data member has been assigned a value.
    bool IsSetLength(void) const;
    /// Check whether it is safe or not to call GetLength method.
    bool CanGetLength(void) const;
    void ResetLength(void);
    const TLength& GetLength(void) const;
    void SetLength(TLength& value);
    TLength& SetLength(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIntergenic_params_Base(const CIntergenic_params_Base&);
    CIntergenic_params_Base& operator=(const CIntergenic_params_Base&);

    // data
    Uint4 m_set_State[1];
    double m_Initp;
    double m_To_single;
    CRef< TLength > m_Length;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CIntergenic_params_Base::IsSetInitp(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIntergenic_params_Base::CanGetInitp(void) const
{
    return IsSetInitp();
}

inline
void CIntergenic_params_Base::ResetInitp(void)
{
    m_Initp = 0;
    m_set_State[0] &= ~0x3;
}

inline
CIntergenic_params_Base::TInitp CIntergenic_params_Base::GetInitp(void) const
{
    if (!CanGetInitp()) {
        ThrowUnassigned(0);
    }
    return m_Initp;
}

inline
void CIntergenic_params_Base::SetInitp(CIntergenic_params_Base::TInitp value)
{
    m_Initp = value;
    m_set_State[0] |= 0x3;
}

inline
CIntergenic_params_Base::TInitp& CIntergenic_params_Base::SetInitp(void)
{
#ifdef _DEBUG
    if (!IsSetInitp()) {
        memset(&m_Initp,UnassignedByte(),sizeof(m_Initp));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Initp;
}

inline
bool CIntergenic_params_Base::IsSetTo_single(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIntergenic_params_Base::CanGetTo_single(void) const
{
    return IsSetTo_single();
}

inline
void CIntergenic_params_Base::ResetTo_single(void)
{
    m_To_single = 0;
    m_set_State[0] &= ~0xc;
}

inline
CIntergenic_params_Base::TTo_single CIntergenic_params_Base::GetTo_single(void) const
{
    if (!CanGetTo_single()) {
        ThrowUnassigned(1);
    }
    return m_To_single;
}

inline
void CIntergenic_params_Base::SetTo_single(CIntergenic_params_Base::TTo_single value)
{
    m_To_single = value;
    m_set_State[0] |= 0xc;
}

inline
CIntergenic_params_Base::TTo_single& CIntergenic_params_Base::SetTo_single(void)
{
#ifdef _DEBUG
    if (!IsSetTo_single()) {
        memset(&m_To_single,UnassignedByte(),sizeof(m_To_single));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_To_single;
}

inline
bool CIntergenic_params_Base::IsSetLength(void) const
{
    return m_Length.NotEmpty();
}

inline
bool CIntergenic_params_Base::CanGetLength(void) const
{
    return true;
}

inline
const CIntergenic_params_Base::TLength& CIntergenic_params_Base::GetLength(void) const
{
    if ( !m_Length ) {
        const_cast<CIntergenic_params_Base*>(this)->ResetLength();
    }
    return (*m_Length);
}

inline
CIntergenic_params_Base::TLength& CIntergenic_params_Base::SetLength(void)
{
    if ( !m_Length ) {
        ResetLength();
    }
    return (*m_Length);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_GNOMON_INTERGENIC_PARAMS_BASE_HPP
