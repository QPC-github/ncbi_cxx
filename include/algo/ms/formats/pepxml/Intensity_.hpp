/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Intensity_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_INTENSITY_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_INTENSITY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///integrated mass intensity 
class NCBI_PEPXML_EXPORT CIntensity_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CIntensity_Base(void);
    // destructor
    virtual ~CIntensity_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TChannel;
        typedef double TTarget_mass;
        typedef double TAbsolute;
        typedef double TNormalized;
        typedef bool TReject;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TChannel
        ///  Check whether the Channel data member has been assigned a value.
        bool IsSetChannel(void) const;
        /// Check whether it is safe or not to call GetChannel method.
        bool CanGetChannel(void) const;
        void ResetChannel(void);
        TChannel GetChannel(void) const;
        void SetChannel(TChannel value);
        TChannel& SetChannel(void);
    
        /// mandatory
        /// typedef double TTarget_mass
        ///  Check whether the Target_mass data member has been assigned a value.
        bool IsSetTarget_mass(void) const;
        /// Check whether it is safe or not to call GetTarget_mass method.
        bool CanGetTarget_mass(void) const;
        void ResetTarget_mass(void);
        TTarget_mass GetTarget_mass(void) const;
        void SetTarget_mass(TTarget_mass value);
        TTarget_mass& SetTarget_mass(void);
    
        /// mandatory
        /// typedef double TAbsolute
        ///  Check whether the Absolute data member has been assigned a value.
        bool IsSetAbsolute(void) const;
        /// Check whether it is safe or not to call GetAbsolute method.
        bool CanGetAbsolute(void) const;
        void ResetAbsolute(void);
        TAbsolute GetAbsolute(void) const;
        void SetAbsolute(TAbsolute value);
        TAbsolute& SetAbsolute(void);
    
        /// mandatory
        /// typedef double TNormalized
        ///  Check whether the Normalized data member has been assigned a value.
        bool IsSetNormalized(void) const;
        /// Check whether it is safe or not to call GetNormalized method.
        bool CanGetNormalized(void) const;
        void ResetNormalized(void);
        TNormalized GetNormalized(void) const;
        void SetNormalized(TNormalized value);
        TNormalized& SetNormalized(void);
    
        /// optional
        /// typedef bool TReject
        ///  Check whether the Reject data member has been assigned a value.
        bool IsSetReject(void) const;
        /// Check whether it is safe or not to call GetReject method.
        bool CanGetReject(void) const;
        void ResetReject(void);
        TReject GetReject(void) const;
        void SetReject(TReject value);
        TReject& SetReject(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        int m_Channel;
        double m_Target_mass;
        double m_Absolute;
        double m_Normalized;
        bool m_Reject;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Intensity data member has been assigned a value.
    bool IsSetIntensity(void) const;
    /// Check whether it is safe or not to call GetIntensity method.
    bool CanGetIntensity(void) const;
    void ResetIntensity(void);
    void SetIntensity(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIntensity_Base(const CIntensity_Base&);
    CIntensity_Base& operator=(const CIntensity_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CIntensity_Base::C_Attlist::IsSetChannel(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIntensity_Base::C_Attlist::CanGetChannel(void) const
{
    return IsSetChannel();
}

inline
void CIntensity_Base::C_Attlist::ResetChannel(void)
{
    m_Channel = 0;
    m_set_State[0] &= ~0x3;
}

inline
CIntensity_Base::C_Attlist::TChannel CIntensity_Base::C_Attlist::GetChannel(void) const
{
    if (!CanGetChannel()) {
        ThrowUnassigned(0);
    }
    return m_Channel;
}

inline
void CIntensity_Base::C_Attlist::SetChannel(CIntensity_Base::C_Attlist::TChannel value)
{
    m_Channel = value;
    m_set_State[0] |= 0x3;
}

inline
CIntensity_Base::C_Attlist::TChannel& CIntensity_Base::C_Attlist::SetChannel(void)
{
#ifdef _DEBUG
    if (!IsSetChannel()) {
        memset(&m_Channel,UnassignedByte(),sizeof(m_Channel));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Channel;
}

inline
bool CIntensity_Base::C_Attlist::IsSetTarget_mass(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIntensity_Base::C_Attlist::CanGetTarget_mass(void) const
{
    return IsSetTarget_mass();
}

inline
void CIntensity_Base::C_Attlist::ResetTarget_mass(void)
{
    m_Target_mass = 0;
    m_set_State[0] &= ~0xc;
}

inline
CIntensity_Base::C_Attlist::TTarget_mass CIntensity_Base::C_Attlist::GetTarget_mass(void) const
{
    if (!CanGetTarget_mass()) {
        ThrowUnassigned(1);
    }
    return m_Target_mass;
}

inline
void CIntensity_Base::C_Attlist::SetTarget_mass(CIntensity_Base::C_Attlist::TTarget_mass value)
{
    m_Target_mass = value;
    m_set_State[0] |= 0xc;
}

inline
CIntensity_Base::C_Attlist::TTarget_mass& CIntensity_Base::C_Attlist::SetTarget_mass(void)
{
#ifdef _DEBUG
    if (!IsSetTarget_mass()) {
        memset(&m_Target_mass,UnassignedByte(),sizeof(m_Target_mass));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Target_mass;
}

inline
bool CIntensity_Base::C_Attlist::IsSetAbsolute(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CIntensity_Base::C_Attlist::CanGetAbsolute(void) const
{
    return IsSetAbsolute();
}

inline
void CIntensity_Base::C_Attlist::ResetAbsolute(void)
{
    m_Absolute = 0;
    m_set_State[0] &= ~0x30;
}

inline
CIntensity_Base::C_Attlist::TAbsolute CIntensity_Base::C_Attlist::GetAbsolute(void) const
{
    if (!CanGetAbsolute()) {
        ThrowUnassigned(2);
    }
    return m_Absolute;
}

inline
void CIntensity_Base::C_Attlist::SetAbsolute(CIntensity_Base::C_Attlist::TAbsolute value)
{
    m_Absolute = value;
    m_set_State[0] |= 0x30;
}

inline
CIntensity_Base::C_Attlist::TAbsolute& CIntensity_Base::C_Attlist::SetAbsolute(void)
{
#ifdef _DEBUG
    if (!IsSetAbsolute()) {
        memset(&m_Absolute,UnassignedByte(),sizeof(m_Absolute));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Absolute;
}

inline
bool CIntensity_Base::C_Attlist::IsSetNormalized(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CIntensity_Base::C_Attlist::CanGetNormalized(void) const
{
    return IsSetNormalized();
}

inline
void CIntensity_Base::C_Attlist::ResetNormalized(void)
{
    m_Normalized = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CIntensity_Base::C_Attlist::TNormalized CIntensity_Base::C_Attlist::GetNormalized(void) const
{
    if (!CanGetNormalized()) {
        ThrowUnassigned(3);
    }
    return m_Normalized;
}

inline
void CIntensity_Base::C_Attlist::SetNormalized(CIntensity_Base::C_Attlist::TNormalized value)
{
    m_Normalized = value;
    m_set_State[0] |= 0xc0;
}

inline
CIntensity_Base::C_Attlist::TNormalized& CIntensity_Base::C_Attlist::SetNormalized(void)
{
#ifdef _DEBUG
    if (!IsSetNormalized()) {
        memset(&m_Normalized,UnassignedByte(),sizeof(m_Normalized));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Normalized;
}

inline
bool CIntensity_Base::C_Attlist::IsSetReject(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CIntensity_Base::C_Attlist::CanGetReject(void) const
{
    return IsSetReject();
}

inline
void CIntensity_Base::C_Attlist::ResetReject(void)
{
    m_Reject = 0;
    m_set_State[0] &= ~0x300;
}

inline
CIntensity_Base::C_Attlist::TReject CIntensity_Base::C_Attlist::GetReject(void) const
{
    if (!CanGetReject()) {
        ThrowUnassigned(4);
    }
    return m_Reject;
}

inline
void CIntensity_Base::C_Attlist::SetReject(CIntensity_Base::C_Attlist::TReject value)
{
    m_Reject = value;
    m_set_State[0] |= 0x300;
}

inline
CIntensity_Base::C_Attlist::TReject& CIntensity_Base::C_Attlist::SetReject(void)
{
#ifdef _DEBUG
    if (!IsSetReject()) {
        memset(&m_Reject,UnassignedByte(),sizeof(m_Reject));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Reject;
}

inline
bool CIntensity_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CIntensity_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CIntensity_Base::TAttlist& CIntensity_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CIntensity_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CIntensity_Base::TAttlist& CIntensity_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetIntensity();
    return (*m_Attlist);
}

inline
bool CIntensity_Base::IsSetIntensity(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIntensity_Base::CanGetIntensity(void) const
{
    return false;
}

inline
void CIntensity_Base::ResetIntensity(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CIntensity_Base::SetIntensity(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_INTENSITY_BASE_HPP
