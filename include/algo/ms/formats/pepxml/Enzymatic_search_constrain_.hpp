/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Enzymatic_search_constrain_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ENZYMATIC_SEARCH_CONSTRAIN_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ENZYMATIC_SEARCH_CONSTRAIN_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Required peptide termini 
class NCBI_PEPXML_EXPORT CEnzymatic_search_constraint_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CEnzymatic_search_constraint_Base(void);
    // destructor
    virtual ~CEnzymatic_search_constraint_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TEnzyme;
        typedef int TMax_num_internal_cleavages;
        typedef int TMin_number_termini;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TEnzyme
        ///  Check whether the Enzyme data member has been assigned a value.
        bool IsSetEnzyme(void) const;
        /// Check whether it is safe or not to call GetEnzyme method.
        bool CanGetEnzyme(void) const;
        void ResetEnzyme(void);
        const TEnzyme& GetEnzyme(void) const;
        void SetEnzyme(const TEnzyme& value);
        TEnzyme& SetEnzyme(void);
    
        /// mandatory
        /// typedef int TMax_num_internal_cleavages
        ///  Check whether the Max_num_internal_cleavages data member has been assigned a value.
        bool IsSetMax_num_internal_cleavages(void) const;
        /// Check whether it is safe or not to call GetMax_num_internal_cleavages method.
        bool CanGetMax_num_internal_cleavages(void) const;
        void ResetMax_num_internal_cleavages(void);
        TMax_num_internal_cleavages GetMax_num_internal_cleavages(void) const;
        void SetMax_num_internal_cleavages(TMax_num_internal_cleavages value);
        TMax_num_internal_cleavages& SetMax_num_internal_cleavages(void);
    
        /// mandatory
        /// typedef int TMin_number_termini
        ///  Check whether the Min_number_termini data member has been assigned a value.
        bool IsSetMin_number_termini(void) const;
        /// Check whether it is safe or not to call GetMin_number_termini method.
        bool CanGetMin_number_termini(void) const;
        void ResetMin_number_termini(void);
        TMin_number_termini GetMin_number_termini(void) const;
        void SetMin_number_termini(TMin_number_termini value);
        TMin_number_termini& SetMin_number_termini(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Enzyme;
        int m_Max_num_internal_cleavages;
        int m_Min_number_termini;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Enzymatic_search_constraint data member has been assigned a value.
    bool IsSetEnzymatic_search_constraint(void) const;
    /// Check whether it is safe or not to call GetEnzymatic_search_constraint method.
    bool CanGetEnzymatic_search_constraint(void) const;
    void ResetEnzymatic_search_constraint(void);
    void SetEnzymatic_search_constraint(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CEnzymatic_search_constraint_Base(const CEnzymatic_search_constraint_Base&);
    CEnzymatic_search_constraint_Base& operator=(const CEnzymatic_search_constraint_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CEnzymatic_search_constraint_Base::C_Attlist::IsSetEnzyme(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CEnzymatic_search_constraint_Base::C_Attlist::CanGetEnzyme(void) const
{
    return IsSetEnzyme();
}

inline
const CEnzymatic_search_constraint_Base::C_Attlist::TEnzyme& CEnzymatic_search_constraint_Base::C_Attlist::GetEnzyme(void) const
{
    if (!CanGetEnzyme()) {
        ThrowUnassigned(0);
    }
    return m_Enzyme;
}

inline
void CEnzymatic_search_constraint_Base::C_Attlist::SetEnzyme(const CEnzymatic_search_constraint_Base::C_Attlist::TEnzyme& value)
{
    m_Enzyme = value;
    m_set_State[0] |= 0x3;
}

inline
CEnzymatic_search_constraint_Base::C_Attlist::TEnzyme& CEnzymatic_search_constraint_Base::C_Attlist::SetEnzyme(void)
{
#ifdef _DEBUG
    if (!IsSetEnzyme()) {
        m_Enzyme = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Enzyme;
}

inline
bool CEnzymatic_search_constraint_Base::C_Attlist::IsSetMax_num_internal_cleavages(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CEnzymatic_search_constraint_Base::C_Attlist::CanGetMax_num_internal_cleavages(void) const
{
    return IsSetMax_num_internal_cleavages();
}

inline
void CEnzymatic_search_constraint_Base::C_Attlist::ResetMax_num_internal_cleavages(void)
{
    m_Max_num_internal_cleavages = 0;
    m_set_State[0] &= ~0xc;
}

inline
CEnzymatic_search_constraint_Base::C_Attlist::TMax_num_internal_cleavages CEnzymatic_search_constraint_Base::C_Attlist::GetMax_num_internal_cleavages(void) const
{
    if (!CanGetMax_num_internal_cleavages()) {
        ThrowUnassigned(1);
    }
    return m_Max_num_internal_cleavages;
}

inline
void CEnzymatic_search_constraint_Base::C_Attlist::SetMax_num_internal_cleavages(CEnzymatic_search_constraint_Base::C_Attlist::TMax_num_internal_cleavages value)
{
    m_Max_num_internal_cleavages = value;
    m_set_State[0] |= 0xc;
}

inline
CEnzymatic_search_constraint_Base::C_Attlist::TMax_num_internal_cleavages& CEnzymatic_search_constraint_Base::C_Attlist::SetMax_num_internal_cleavages(void)
{
#ifdef _DEBUG
    if (!IsSetMax_num_internal_cleavages()) {
        memset(&m_Max_num_internal_cleavages,UnassignedByte(),sizeof(m_Max_num_internal_cleavages));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Max_num_internal_cleavages;
}

inline
bool CEnzymatic_search_constraint_Base::C_Attlist::IsSetMin_number_termini(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CEnzymatic_search_constraint_Base::C_Attlist::CanGetMin_number_termini(void) const
{
    return IsSetMin_number_termini();
}

inline
void CEnzymatic_search_constraint_Base::C_Attlist::ResetMin_number_termini(void)
{
    m_Min_number_termini = 0;
    m_set_State[0] &= ~0x30;
}

inline
CEnzymatic_search_constraint_Base::C_Attlist::TMin_number_termini CEnzymatic_search_constraint_Base::C_Attlist::GetMin_number_termini(void) const
{
    if (!CanGetMin_number_termini()) {
        ThrowUnassigned(2);
    }
    return m_Min_number_termini;
}

inline
void CEnzymatic_search_constraint_Base::C_Attlist::SetMin_number_termini(CEnzymatic_search_constraint_Base::C_Attlist::TMin_number_termini value)
{
    m_Min_number_termini = value;
    m_set_State[0] |= 0x30;
}

inline
CEnzymatic_search_constraint_Base::C_Attlist::TMin_number_termini& CEnzymatic_search_constraint_Base::C_Attlist::SetMin_number_termini(void)
{
#ifdef _DEBUG
    if (!IsSetMin_number_termini()) {
        memset(&m_Min_number_termini,UnassignedByte(),sizeof(m_Min_number_termini));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Min_number_termini;
}

inline
bool CEnzymatic_search_constraint_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CEnzymatic_search_constraint_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CEnzymatic_search_constraint_Base::TAttlist& CEnzymatic_search_constraint_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CEnzymatic_search_constraint_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CEnzymatic_search_constraint_Base::TAttlist& CEnzymatic_search_constraint_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetEnzymatic_search_constraint();
    return (*m_Attlist);
}

inline
bool CEnzymatic_search_constraint_Base::IsSetEnzymatic_search_constraint(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CEnzymatic_search_constraint_Base::CanGetEnzymatic_search_constraint(void) const
{
    return false;
}

inline
void CEnzymatic_search_constraint_Base::ResetEnzymatic_search_constraint(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CEnzymatic_search_constraint_Base::SetEnzymatic_search_constraint(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ENZYMATIC_SEARCH_CONSTRAIN_BASE_HPP
