/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Error_point_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ERROR_POINT_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ERROR_POINT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_PEPXML_EXPORT CError_point_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CError_point_Base(void);
    // destructor
    virtual ~CError_point_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef double TError;
        typedef double TMin_prob;
        typedef int TNum_corr;
        typedef int TNum_incorr;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef double TError
        ///  Check whether the Error data member has been assigned a value.
        bool IsSetError(void) const;
        /// Check whether it is safe or not to call GetError method.
        bool CanGetError(void) const;
        void ResetError(void);
        TError GetError(void) const;
        void SetError(TError value);
        TError& SetError(void);
    
        /// mandatory
        /// typedef double TMin_prob
        ///  Check whether the Min_prob data member has been assigned a value.
        bool IsSetMin_prob(void) const;
        /// Check whether it is safe or not to call GetMin_prob method.
        bool CanGetMin_prob(void) const;
        void ResetMin_prob(void);
        TMin_prob GetMin_prob(void) const;
        void SetMin_prob(TMin_prob value);
        TMin_prob& SetMin_prob(void);
    
        /// mandatory
        /// typedef int TNum_corr
        ///  Check whether the Num_corr data member has been assigned a value.
        bool IsSetNum_corr(void) const;
        /// Check whether it is safe or not to call GetNum_corr method.
        bool CanGetNum_corr(void) const;
        void ResetNum_corr(void);
        TNum_corr GetNum_corr(void) const;
        void SetNum_corr(TNum_corr value);
        TNum_corr& SetNum_corr(void);
    
        /// mandatory
        /// typedef int TNum_incorr
        ///  Check whether the Num_incorr data member has been assigned a value.
        bool IsSetNum_incorr(void) const;
        /// Check whether it is safe or not to call GetNum_incorr method.
        bool CanGetNum_incorr(void) const;
        void ResetNum_incorr(void);
        TNum_incorr GetNum_incorr(void) const;
        void SetNum_incorr(TNum_incorr value);
        TNum_incorr& SetNum_incorr(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        double m_Error;
        double m_Min_prob;
        int m_Num_corr;
        int m_Num_incorr;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Error_point data member has been assigned a value.
    bool IsSetError_point(void) const;
    /// Check whether it is safe or not to call GetError_point method.
    bool CanGetError_point(void) const;
    void ResetError_point(void);
    void SetError_point(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CError_point_Base(const CError_point_Base&);
    CError_point_Base& operator=(const CError_point_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CError_point_Base::C_Attlist::IsSetError(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CError_point_Base::C_Attlist::CanGetError(void) const
{
    return IsSetError();
}

inline
void CError_point_Base::C_Attlist::ResetError(void)
{
    m_Error = 0;
    m_set_State[0] &= ~0x3;
}

inline
CError_point_Base::C_Attlist::TError CError_point_Base::C_Attlist::GetError(void) const
{
    if (!CanGetError()) {
        ThrowUnassigned(0);
    }
    return m_Error;
}

inline
void CError_point_Base::C_Attlist::SetError(CError_point_Base::C_Attlist::TError value)
{
    m_Error = value;
    m_set_State[0] |= 0x3;
}

inline
CError_point_Base::C_Attlist::TError& CError_point_Base::C_Attlist::SetError(void)
{
#ifdef _DEBUG
    if (!IsSetError()) {
        memset(&m_Error,UnassignedByte(),sizeof(m_Error));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Error;
}

inline
bool CError_point_Base::C_Attlist::IsSetMin_prob(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CError_point_Base::C_Attlist::CanGetMin_prob(void) const
{
    return IsSetMin_prob();
}

inline
void CError_point_Base::C_Attlist::ResetMin_prob(void)
{
    m_Min_prob = 0;
    m_set_State[0] &= ~0xc;
}

inline
CError_point_Base::C_Attlist::TMin_prob CError_point_Base::C_Attlist::GetMin_prob(void) const
{
    if (!CanGetMin_prob()) {
        ThrowUnassigned(1);
    }
    return m_Min_prob;
}

inline
void CError_point_Base::C_Attlist::SetMin_prob(CError_point_Base::C_Attlist::TMin_prob value)
{
    m_Min_prob = value;
    m_set_State[0] |= 0xc;
}

inline
CError_point_Base::C_Attlist::TMin_prob& CError_point_Base::C_Attlist::SetMin_prob(void)
{
#ifdef _DEBUG
    if (!IsSetMin_prob()) {
        memset(&m_Min_prob,UnassignedByte(),sizeof(m_Min_prob));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Min_prob;
}

inline
bool CError_point_Base::C_Attlist::IsSetNum_corr(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CError_point_Base::C_Attlist::CanGetNum_corr(void) const
{
    return IsSetNum_corr();
}

inline
void CError_point_Base::C_Attlist::ResetNum_corr(void)
{
    m_Num_corr = 0;
    m_set_State[0] &= ~0x30;
}

inline
CError_point_Base::C_Attlist::TNum_corr CError_point_Base::C_Attlist::GetNum_corr(void) const
{
    if (!CanGetNum_corr()) {
        ThrowUnassigned(2);
    }
    return m_Num_corr;
}

inline
void CError_point_Base::C_Attlist::SetNum_corr(CError_point_Base::C_Attlist::TNum_corr value)
{
    m_Num_corr = value;
    m_set_State[0] |= 0x30;
}

inline
CError_point_Base::C_Attlist::TNum_corr& CError_point_Base::C_Attlist::SetNum_corr(void)
{
#ifdef _DEBUG
    if (!IsSetNum_corr()) {
        memset(&m_Num_corr,UnassignedByte(),sizeof(m_Num_corr));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Num_corr;
}

inline
bool CError_point_Base::C_Attlist::IsSetNum_incorr(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CError_point_Base::C_Attlist::CanGetNum_incorr(void) const
{
    return IsSetNum_incorr();
}

inline
void CError_point_Base::C_Attlist::ResetNum_incorr(void)
{
    m_Num_incorr = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CError_point_Base::C_Attlist::TNum_incorr CError_point_Base::C_Attlist::GetNum_incorr(void) const
{
    if (!CanGetNum_incorr()) {
        ThrowUnassigned(3);
    }
    return m_Num_incorr;
}

inline
void CError_point_Base::C_Attlist::SetNum_incorr(CError_point_Base::C_Attlist::TNum_incorr value)
{
    m_Num_incorr = value;
    m_set_State[0] |= 0xc0;
}

inline
CError_point_Base::C_Attlist::TNum_incorr& CError_point_Base::C_Attlist::SetNum_incorr(void)
{
#ifdef _DEBUG
    if (!IsSetNum_incorr()) {
        memset(&m_Num_incorr,UnassignedByte(),sizeof(m_Num_incorr));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Num_incorr;
}

inline
bool CError_point_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CError_point_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CError_point_Base::TAttlist& CError_point_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CError_point_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CError_point_Base::TAttlist& CError_point_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetError_point();
    return (*m_Attlist);
}

inline
bool CError_point_Base::IsSetError_point(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CError_point_Base::CanGetError_point(void) const
{
    return false;
}

inline
void CError_point_Base::ResetError_point(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CError_point_Base::SetError_point(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ERROR_POINT_BASE_HPP
