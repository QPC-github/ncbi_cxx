/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Interact_summary_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_INTERACT_SUMMARY_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_INTERACT_SUMMARY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CInputfile;


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Combined datasets 
class NCBI_PEPXML_EXPORT CInteract_summary_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CInteract_summary_Base(void);
    // destructor
    virtual ~CInteract_summary_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TFilename;
        typedef string TDirectory;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TFilename
        ///  Check whether the Filename data member has been assigned a value.
        bool IsSetFilename(void) const;
        /// Check whether it is safe or not to call GetFilename method.
        bool CanGetFilename(void) const;
        void ResetFilename(void);
        const TFilename& GetFilename(void) const;
        void SetFilename(const TFilename& value);
        TFilename& SetFilename(void);
    
        /// mandatory
        /// typedef string TDirectory
        ///  Check whether the Directory data member has been assigned a value.
        bool IsSetDirectory(void) const;
        /// Check whether it is safe or not to call GetDirectory method.
        bool CanGetDirectory(void) const;
        void ResetDirectory(void);
        const TDirectory& GetDirectory(void) const;
        void SetDirectory(const TDirectory& value);
        TDirectory& SetDirectory(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Filename;
        string m_Directory;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CInputfile > > TInputfile;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef list< CRef< CInputfile > > TInputfile
    ///  Check whether the Inputfile data member has been assigned a value.
    bool IsSetInputfile(void) const;
    /// Check whether it is safe or not to call GetInputfile method.
    bool CanGetInputfile(void) const;
    void ResetInputfile(void);
    const TInputfile& GetInputfile(void) const;
    TInputfile& SetInputfile(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CInteract_summary_Base(const CInteract_summary_Base&);
    CInteract_summary_Base& operator=(const CInteract_summary_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CInputfile > > m_Inputfile;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CInteract_summary_Base::C_Attlist::IsSetFilename(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CInteract_summary_Base::C_Attlist::CanGetFilename(void) const
{
    return IsSetFilename();
}

inline
const CInteract_summary_Base::C_Attlist::TFilename& CInteract_summary_Base::C_Attlist::GetFilename(void) const
{
    if (!CanGetFilename()) {
        ThrowUnassigned(0);
    }
    return m_Filename;
}

inline
void CInteract_summary_Base::C_Attlist::SetFilename(const CInteract_summary_Base::C_Attlist::TFilename& value)
{
    m_Filename = value;
    m_set_State[0] |= 0x3;
}

inline
CInteract_summary_Base::C_Attlist::TFilename& CInteract_summary_Base::C_Attlist::SetFilename(void)
{
#ifdef _DEBUG
    if (!IsSetFilename()) {
        m_Filename = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Filename;
}

inline
bool CInteract_summary_Base::C_Attlist::IsSetDirectory(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CInteract_summary_Base::C_Attlist::CanGetDirectory(void) const
{
    return IsSetDirectory();
}

inline
const CInteract_summary_Base::C_Attlist::TDirectory& CInteract_summary_Base::C_Attlist::GetDirectory(void) const
{
    if (!CanGetDirectory()) {
        ThrowUnassigned(1);
    }
    return m_Directory;
}

inline
void CInteract_summary_Base::C_Attlist::SetDirectory(const CInteract_summary_Base::C_Attlist::TDirectory& value)
{
    m_Directory = value;
    m_set_State[0] |= 0xc;
}

inline
CInteract_summary_Base::C_Attlist::TDirectory& CInteract_summary_Base::C_Attlist::SetDirectory(void)
{
#ifdef _DEBUG
    if (!IsSetDirectory()) {
        m_Directory = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Directory;
}

inline
bool CInteract_summary_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CInteract_summary_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CInteract_summary_Base::TAttlist& CInteract_summary_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CInteract_summary_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CInteract_summary_Base::TAttlist& CInteract_summary_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CInteract_summary_Base::IsSetInputfile(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CInteract_summary_Base::CanGetInputfile(void) const
{
    return true;
}

inline
const CInteract_summary_Base::TInputfile& CInteract_summary_Base::GetInputfile(void) const
{
    return m_Inputfile;
}

inline
CInteract_summary_Base::TInputfile& CInteract_summary_Base::SetInputfile(void)
{
    m_set_State[0] |= 0x4;
    return m_Inputfile;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_INTERACT_SUMMARY_BASE_HPP
