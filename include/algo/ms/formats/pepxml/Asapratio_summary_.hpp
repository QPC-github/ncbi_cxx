/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Asapratio_summary_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ASAPRATIO_SUMMARY_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ASAPRATIO_SUMMARY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Quantitation 
class NCBI_PEPXML_EXPORT CAsapratio_summary_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CAsapratio_summary_Base(void);
    // destructor
    virtual ~CAsapratio_summary_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TVersion;
        typedef string TAuthor;
        typedef int TElution;
        typedef string TLabeled_residues;
        typedef int TArea_flag;
        typedef string TStatic_quant;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TVersion
        ///  Check whether the Version data member has been assigned a value.
        bool IsSetVersion(void) const;
        /// Check whether it is safe or not to call GetVersion method.
        bool CanGetVersion(void) const;
        void ResetVersion(void);
        const TVersion& GetVersion(void) const;
        void SetVersion(const TVersion& value);
        TVersion& SetVersion(void);
    
        /// mandatory
        /// typedef string TAuthor
        ///  Check whether the Author data member has been assigned a value.
        bool IsSetAuthor(void) const;
        /// Check whether it is safe or not to call GetAuthor method.
        bool CanGetAuthor(void) const;
        void ResetAuthor(void);
        const TAuthor& GetAuthor(void) const;
        void SetAuthor(const TAuthor& value);
        TAuthor& SetAuthor(void);
    
        /// mandatory
        /// typedef int TElution
        ///  Check whether the Elution data member has been assigned a value.
        bool IsSetElution(void) const;
        /// Check whether it is safe or not to call GetElution method.
        bool CanGetElution(void) const;
        void ResetElution(void);
        TElution GetElution(void) const;
        void SetElution(TElution value);
        TElution& SetElution(void);
    
        /// mandatory
        /// typedef string TLabeled_residues
        ///  Check whether the Labeled_residues data member has been assigned a value.
        bool IsSetLabeled_residues(void) const;
        /// Check whether it is safe or not to call GetLabeled_residues method.
        bool CanGetLabeled_residues(void) const;
        void ResetLabeled_residues(void);
        const TLabeled_residues& GetLabeled_residues(void) const;
        void SetLabeled_residues(const TLabeled_residues& value);
        TLabeled_residues& SetLabeled_residues(void);
    
        /// mandatory
        /// typedef int TArea_flag
        ///  Check whether the Area_flag data member has been assigned a value.
        bool IsSetArea_flag(void) const;
        /// Check whether it is safe or not to call GetArea_flag method.
        bool CanGetArea_flag(void) const;
        void ResetArea_flag(void);
        TArea_flag GetArea_flag(void) const;
        void SetArea_flag(TArea_flag value);
        TArea_flag& SetArea_flag(void);
    
        /// mandatory
        /// typedef string TStatic_quant
        ///  Check whether the Static_quant data member has been assigned a value.
        bool IsSetStatic_quant(void) const;
        /// Check whether it is safe or not to call GetStatic_quant method.
        bool CanGetStatic_quant(void) const;
        void ResetStatic_quant(void);
        const TStatic_quant& GetStatic_quant(void) const;
        void SetStatic_quant(const TStatic_quant& value);
        TStatic_quant& SetStatic_quant(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Version;
        string m_Author;
        int m_Elution;
        string m_Labeled_residues;
        int m_Area_flag;
        string m_Static_quant;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Asapratio_summary data member has been assigned a value.
    bool IsSetAsapratio_summary(void) const;
    /// Check whether it is safe or not to call GetAsapratio_summary method.
    bool CanGetAsapratio_summary(void) const;
    void ResetAsapratio_summary(void);
    void SetAsapratio_summary(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CAsapratio_summary_Base(const CAsapratio_summary_Base&);
    CAsapratio_summary_Base& operator=(const CAsapratio_summary_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CAsapratio_summary_Base::C_Attlist::IsSetVersion(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CAsapratio_summary_Base::C_Attlist::CanGetVersion(void) const
{
    return IsSetVersion();
}

inline
const CAsapratio_summary_Base::C_Attlist::TVersion& CAsapratio_summary_Base::C_Attlist::GetVersion(void) const
{
    if (!CanGetVersion()) {
        ThrowUnassigned(0);
    }
    return m_Version;
}

inline
void CAsapratio_summary_Base::C_Attlist::SetVersion(const CAsapratio_summary_Base::C_Attlist::TVersion& value)
{
    m_Version = value;
    m_set_State[0] |= 0x3;
}

inline
CAsapratio_summary_Base::C_Attlist::TVersion& CAsapratio_summary_Base::C_Attlist::SetVersion(void)
{
#ifdef _DEBUG
    if (!IsSetVersion()) {
        m_Version = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Version;
}

inline
bool CAsapratio_summary_Base::C_Attlist::IsSetAuthor(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAsapratio_summary_Base::C_Attlist::CanGetAuthor(void) const
{
    return IsSetAuthor();
}

inline
const CAsapratio_summary_Base::C_Attlist::TAuthor& CAsapratio_summary_Base::C_Attlist::GetAuthor(void) const
{
    if (!CanGetAuthor()) {
        ThrowUnassigned(1);
    }
    return m_Author;
}

inline
void CAsapratio_summary_Base::C_Attlist::SetAuthor(const CAsapratio_summary_Base::C_Attlist::TAuthor& value)
{
    m_Author = value;
    m_set_State[0] |= 0xc;
}

inline
CAsapratio_summary_Base::C_Attlist::TAuthor& CAsapratio_summary_Base::C_Attlist::SetAuthor(void)
{
#ifdef _DEBUG
    if (!IsSetAuthor()) {
        m_Author = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Author;
}

inline
bool CAsapratio_summary_Base::C_Attlist::IsSetElution(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CAsapratio_summary_Base::C_Attlist::CanGetElution(void) const
{
    return IsSetElution();
}

inline
void CAsapratio_summary_Base::C_Attlist::ResetElution(void)
{
    m_Elution = 0;
    m_set_State[0] &= ~0x30;
}

inline
CAsapratio_summary_Base::C_Attlist::TElution CAsapratio_summary_Base::C_Attlist::GetElution(void) const
{
    if (!CanGetElution()) {
        ThrowUnassigned(2);
    }
    return m_Elution;
}

inline
void CAsapratio_summary_Base::C_Attlist::SetElution(CAsapratio_summary_Base::C_Attlist::TElution value)
{
    m_Elution = value;
    m_set_State[0] |= 0x30;
}

inline
CAsapratio_summary_Base::C_Attlist::TElution& CAsapratio_summary_Base::C_Attlist::SetElution(void)
{
#ifdef _DEBUG
    if (!IsSetElution()) {
        memset(&m_Elution,UnassignedByte(),sizeof(m_Elution));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Elution;
}

inline
bool CAsapratio_summary_Base::C_Attlist::IsSetLabeled_residues(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CAsapratio_summary_Base::C_Attlist::CanGetLabeled_residues(void) const
{
    return IsSetLabeled_residues();
}

inline
const CAsapratio_summary_Base::C_Attlist::TLabeled_residues& CAsapratio_summary_Base::C_Attlist::GetLabeled_residues(void) const
{
    if (!CanGetLabeled_residues()) {
        ThrowUnassigned(3);
    }
    return m_Labeled_residues;
}

inline
void CAsapratio_summary_Base::C_Attlist::SetLabeled_residues(const CAsapratio_summary_Base::C_Attlist::TLabeled_residues& value)
{
    m_Labeled_residues = value;
    m_set_State[0] |= 0xc0;
}

inline
CAsapratio_summary_Base::C_Attlist::TLabeled_residues& CAsapratio_summary_Base::C_Attlist::SetLabeled_residues(void)
{
#ifdef _DEBUG
    if (!IsSetLabeled_residues()) {
        m_Labeled_residues = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Labeled_residues;
}

inline
bool CAsapratio_summary_Base::C_Attlist::IsSetArea_flag(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CAsapratio_summary_Base::C_Attlist::CanGetArea_flag(void) const
{
    return IsSetArea_flag();
}

inline
void CAsapratio_summary_Base::C_Attlist::ResetArea_flag(void)
{
    m_Area_flag = 0;
    m_set_State[0] &= ~0x300;
}

inline
CAsapratio_summary_Base::C_Attlist::TArea_flag CAsapratio_summary_Base::C_Attlist::GetArea_flag(void) const
{
    if (!CanGetArea_flag()) {
        ThrowUnassigned(4);
    }
    return m_Area_flag;
}

inline
void CAsapratio_summary_Base::C_Attlist::SetArea_flag(CAsapratio_summary_Base::C_Attlist::TArea_flag value)
{
    m_Area_flag = value;
    m_set_State[0] |= 0x300;
}

inline
CAsapratio_summary_Base::C_Attlist::TArea_flag& CAsapratio_summary_Base::C_Attlist::SetArea_flag(void)
{
#ifdef _DEBUG
    if (!IsSetArea_flag()) {
        memset(&m_Area_flag,UnassignedByte(),sizeof(m_Area_flag));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Area_flag;
}

inline
bool CAsapratio_summary_Base::C_Attlist::IsSetStatic_quant(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CAsapratio_summary_Base::C_Attlist::CanGetStatic_quant(void) const
{
    return IsSetStatic_quant();
}

inline
const CAsapratio_summary_Base::C_Attlist::TStatic_quant& CAsapratio_summary_Base::C_Attlist::GetStatic_quant(void) const
{
    if (!CanGetStatic_quant()) {
        ThrowUnassigned(5);
    }
    return m_Static_quant;
}

inline
void CAsapratio_summary_Base::C_Attlist::SetStatic_quant(const CAsapratio_summary_Base::C_Attlist::TStatic_quant& value)
{
    m_Static_quant = value;
    m_set_State[0] |= 0xc00;
}

inline
CAsapratio_summary_Base::C_Attlist::TStatic_quant& CAsapratio_summary_Base::C_Attlist::SetStatic_quant(void)
{
#ifdef _DEBUG
    if (!IsSetStatic_quant()) {
        m_Static_quant = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Static_quant;
}

inline
bool CAsapratio_summary_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CAsapratio_summary_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CAsapratio_summary_Base::TAttlist& CAsapratio_summary_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CAsapratio_summary_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CAsapratio_summary_Base::TAttlist& CAsapratio_summary_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetAsapratio_summary();
    return (*m_Attlist);
}

inline
bool CAsapratio_summary_Base::IsSetAsapratio_summary(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAsapratio_summary_Base::CanGetAsapratio_summary(void) const
{
    return false;
}

inline
void CAsapratio_summary_Base::ResetAsapratio_summary(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CAsapratio_summary_Base::SetAsapratio_summary(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ASAPRATIO_SUMMARY_BASE_HPP
