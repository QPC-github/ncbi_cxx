/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Libra_summary_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_LIBRA_SUMMARY_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_LIBRA_SUMMARY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CFragment_masses;
class CIsotopic_contributions;


// generated classes

/////////////////////////////////////////////////////////////////////////////
///summary info for libra quantitation analysis 
class NCBI_PEPXML_EXPORT CLibra_summary_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CLibra_summary_Base(void);
    // destructor
    virtual ~CLibra_summary_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef double TMass_tolerance;
        typedef int TCentroiding_preference;
        typedef int TNormalization;
        typedef int TOutput_type;
        typedef string TChannel_code;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef double TMass_tolerance
        ///  Check whether the Mass_tolerance data member has been assigned a value.
        bool IsSetMass_tolerance(void) const;
        /// Check whether it is safe or not to call GetMass_tolerance method.
        bool CanGetMass_tolerance(void) const;
        void ResetMass_tolerance(void);
        TMass_tolerance GetMass_tolerance(void) const;
        void SetMass_tolerance(TMass_tolerance value);
        TMass_tolerance& SetMass_tolerance(void);
    
        /// mandatory
        /// typedef int TCentroiding_preference
        ///  Check whether the Centroiding_preference data member has been assigned a value.
        bool IsSetCentroiding_preference(void) const;
        /// Check whether it is safe or not to call GetCentroiding_preference method.
        bool CanGetCentroiding_preference(void) const;
        void ResetCentroiding_preference(void);
        TCentroiding_preference GetCentroiding_preference(void) const;
        void SetCentroiding_preference(TCentroiding_preference value);
        TCentroiding_preference& SetCentroiding_preference(void);
    
        /// mandatory
        /// typedef int TNormalization
        ///  Check whether the Normalization data member has been assigned a value.
        bool IsSetNormalization(void) const;
        /// Check whether it is safe or not to call GetNormalization method.
        bool CanGetNormalization(void) const;
        void ResetNormalization(void);
        TNormalization GetNormalization(void) const;
        void SetNormalization(TNormalization value);
        TNormalization& SetNormalization(void);
    
        /// mandatory
        /// typedef int TOutput_type
        ///  Check whether the Output_type data member has been assigned a value.
        bool IsSetOutput_type(void) const;
        /// Check whether it is safe or not to call GetOutput_type method.
        bool CanGetOutput_type(void) const;
        void ResetOutput_type(void);
        TOutput_type GetOutput_type(void) const;
        void SetOutput_type(TOutput_type value);
        TOutput_type& SetOutput_type(void);
    
        /// optional
        /// typedef string TChannel_code
        ///  Check whether the Channel_code data member has been assigned a value.
        bool IsSetChannel_code(void) const;
        /// Check whether it is safe or not to call GetChannel_code method.
        bool CanGetChannel_code(void) const;
        void ResetChannel_code(void);
        const TChannel_code& GetChannel_code(void) const;
        void SetChannel_code(const TChannel_code& value);
        TChannel_code& SetChannel_code(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        double m_Mass_tolerance;
        int m_Centroiding_preference;
        int m_Normalization;
        int m_Output_type;
        string m_Channel_code;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CFragment_masses > > TFragment_masses;
    typedef CIsotopic_contributions TIsotopic_contributions;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef list< CRef< CFragment_masses > > TFragment_masses
    ///  Check whether the Fragment_masses data member has been assigned a value.
    bool IsSetFragment_masses(void) const;
    /// Check whether it is safe or not to call GetFragment_masses method.
    bool CanGetFragment_masses(void) const;
    void ResetFragment_masses(void);
    const TFragment_masses& GetFragment_masses(void) const;
    TFragment_masses& SetFragment_masses(void);

    /// optional
    /// typedef CIsotopic_contributions TIsotopic_contributions
    ///  Check whether the Isotopic_contributions data member has been assigned a value.
    bool IsSetIsotopic_contributions(void) const;
    /// Check whether it is safe or not to call GetIsotopic_contributions method.
    bool CanGetIsotopic_contributions(void) const;
    void ResetIsotopic_contributions(void);
    const TIsotopic_contributions& GetIsotopic_contributions(void) const;
    void SetIsotopic_contributions(TIsotopic_contributions& value);
    TIsotopic_contributions& SetIsotopic_contributions(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLibra_summary_Base(const CLibra_summary_Base&);
    CLibra_summary_Base& operator=(const CLibra_summary_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CFragment_masses > > m_Fragment_masses;
    CRef< TIsotopic_contributions > m_Isotopic_contributions;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CLibra_summary_Base::C_Attlist::IsSetMass_tolerance(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLibra_summary_Base::C_Attlist::CanGetMass_tolerance(void) const
{
    return IsSetMass_tolerance();
}

inline
void CLibra_summary_Base::C_Attlist::ResetMass_tolerance(void)
{
    m_Mass_tolerance = 0;
    m_set_State[0] &= ~0x3;
}

inline
CLibra_summary_Base::C_Attlist::TMass_tolerance CLibra_summary_Base::C_Attlist::GetMass_tolerance(void) const
{
    if (!CanGetMass_tolerance()) {
        ThrowUnassigned(0);
    }
    return m_Mass_tolerance;
}

inline
void CLibra_summary_Base::C_Attlist::SetMass_tolerance(CLibra_summary_Base::C_Attlist::TMass_tolerance value)
{
    m_Mass_tolerance = value;
    m_set_State[0] |= 0x3;
}

inline
CLibra_summary_Base::C_Attlist::TMass_tolerance& CLibra_summary_Base::C_Attlist::SetMass_tolerance(void)
{
#ifdef _DEBUG
    if (!IsSetMass_tolerance()) {
        memset(&m_Mass_tolerance,UnassignedByte(),sizeof(m_Mass_tolerance));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Mass_tolerance;
}

inline
bool CLibra_summary_Base::C_Attlist::IsSetCentroiding_preference(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLibra_summary_Base::C_Attlist::CanGetCentroiding_preference(void) const
{
    return IsSetCentroiding_preference();
}

inline
void CLibra_summary_Base::C_Attlist::ResetCentroiding_preference(void)
{
    m_Centroiding_preference = 0;
    m_set_State[0] &= ~0xc;
}

inline
CLibra_summary_Base::C_Attlist::TCentroiding_preference CLibra_summary_Base::C_Attlist::GetCentroiding_preference(void) const
{
    if (!CanGetCentroiding_preference()) {
        ThrowUnassigned(1);
    }
    return m_Centroiding_preference;
}

inline
void CLibra_summary_Base::C_Attlist::SetCentroiding_preference(CLibra_summary_Base::C_Attlist::TCentroiding_preference value)
{
    m_Centroiding_preference = value;
    m_set_State[0] |= 0xc;
}

inline
CLibra_summary_Base::C_Attlist::TCentroiding_preference& CLibra_summary_Base::C_Attlist::SetCentroiding_preference(void)
{
#ifdef _DEBUG
    if (!IsSetCentroiding_preference()) {
        memset(&m_Centroiding_preference,UnassignedByte(),sizeof(m_Centroiding_preference));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Centroiding_preference;
}

inline
bool CLibra_summary_Base::C_Attlist::IsSetNormalization(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CLibra_summary_Base::C_Attlist::CanGetNormalization(void) const
{
    return IsSetNormalization();
}

inline
void CLibra_summary_Base::C_Attlist::ResetNormalization(void)
{
    m_Normalization = 0;
    m_set_State[0] &= ~0x30;
}

inline
CLibra_summary_Base::C_Attlist::TNormalization CLibra_summary_Base::C_Attlist::GetNormalization(void) const
{
    if (!CanGetNormalization()) {
        ThrowUnassigned(2);
    }
    return m_Normalization;
}

inline
void CLibra_summary_Base::C_Attlist::SetNormalization(CLibra_summary_Base::C_Attlist::TNormalization value)
{
    m_Normalization = value;
    m_set_State[0] |= 0x30;
}

inline
CLibra_summary_Base::C_Attlist::TNormalization& CLibra_summary_Base::C_Attlist::SetNormalization(void)
{
#ifdef _DEBUG
    if (!IsSetNormalization()) {
        memset(&m_Normalization,UnassignedByte(),sizeof(m_Normalization));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Normalization;
}

inline
bool CLibra_summary_Base::C_Attlist::IsSetOutput_type(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CLibra_summary_Base::C_Attlist::CanGetOutput_type(void) const
{
    return IsSetOutput_type();
}

inline
void CLibra_summary_Base::C_Attlist::ResetOutput_type(void)
{
    m_Output_type = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CLibra_summary_Base::C_Attlist::TOutput_type CLibra_summary_Base::C_Attlist::GetOutput_type(void) const
{
    if (!CanGetOutput_type()) {
        ThrowUnassigned(3);
    }
    return m_Output_type;
}

inline
void CLibra_summary_Base::C_Attlist::SetOutput_type(CLibra_summary_Base::C_Attlist::TOutput_type value)
{
    m_Output_type = value;
    m_set_State[0] |= 0xc0;
}

inline
CLibra_summary_Base::C_Attlist::TOutput_type& CLibra_summary_Base::C_Attlist::SetOutput_type(void)
{
#ifdef _DEBUG
    if (!IsSetOutput_type()) {
        memset(&m_Output_type,UnassignedByte(),sizeof(m_Output_type));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Output_type;
}

inline
bool CLibra_summary_Base::C_Attlist::IsSetChannel_code(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CLibra_summary_Base::C_Attlist::CanGetChannel_code(void) const
{
    return IsSetChannel_code();
}

inline
const CLibra_summary_Base::C_Attlist::TChannel_code& CLibra_summary_Base::C_Attlist::GetChannel_code(void) const
{
    if (!CanGetChannel_code()) {
        ThrowUnassigned(4);
    }
    return m_Channel_code;
}

inline
void CLibra_summary_Base::C_Attlist::SetChannel_code(const CLibra_summary_Base::C_Attlist::TChannel_code& value)
{
    m_Channel_code = value;
    m_set_State[0] |= 0x300;
}

inline
CLibra_summary_Base::C_Attlist::TChannel_code& CLibra_summary_Base::C_Attlist::SetChannel_code(void)
{
#ifdef _DEBUG
    if (!IsSetChannel_code()) {
        m_Channel_code = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Channel_code;
}

inline
bool CLibra_summary_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CLibra_summary_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CLibra_summary_Base::TAttlist& CLibra_summary_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CLibra_summary_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CLibra_summary_Base::TAttlist& CLibra_summary_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CLibra_summary_Base::IsSetFragment_masses(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLibra_summary_Base::CanGetFragment_masses(void) const
{
    return true;
}

inline
const CLibra_summary_Base::TFragment_masses& CLibra_summary_Base::GetFragment_masses(void) const
{
    return m_Fragment_masses;
}

inline
CLibra_summary_Base::TFragment_masses& CLibra_summary_Base::SetFragment_masses(void)
{
    m_set_State[0] |= 0x4;
    return m_Fragment_masses;
}

inline
bool CLibra_summary_Base::IsSetIsotopic_contributions(void) const
{
    return m_Isotopic_contributions.NotEmpty();
}

inline
bool CLibra_summary_Base::CanGetIsotopic_contributions(void) const
{
    return IsSetIsotopic_contributions();
}

inline
const CLibra_summary_Base::TIsotopic_contributions& CLibra_summary_Base::GetIsotopic_contributions(void) const
{
    if (!CanGetIsotopic_contributions()) {
        ThrowUnassigned(2);
    }
    return (*m_Isotopic_contributions);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_LIBRA_SUMMARY_BASE_HPP
