/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Specificity_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_SPECIFICITY_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_SPECIFICITY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Component cleavage specificity. Must be at least one specificity unless enzymeType:fidelity is nonspecific  
class NCBI_PEPXML_EXPORT CSpecificity_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CSpecificity_Base(void);
    // destructor
    virtual ~CSpecificity_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_sense {
            eAttlist_sense_C = 1,
            eAttlist_sense_N = 2
        };
        
        /// Access to EAttlist_sense's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_sense)(void);
        
        // types
        typedef EAttlist_sense TSense;
        typedef int TMin_spacing;
        typedef string TCut;
        typedef string TNo_cut;
    
        // getters
        // setters
    
        ///Defines whether cleavage occurs on the C-terminal or N-terminal side of the residue(s) listed in cut
        /// mandatory
        /// typedef EAttlist_sense TSense
        ///  Check whether the Sense data member has been assigned a value.
        bool IsSetSense(void) const;
        /// Check whether it is safe or not to call GetSense method.
        bool CanGetSense(void) const;
        void ResetSense(void);
        TSense GetSense(void) const;
        void SetSense(TSense value);
        TSense& SetSense(void);
    
        /// optional with default 1
        /// typedef int TMin_spacing
        ///  Check whether the Min_spacing data member has been assigned a value.
        bool IsSetMin_spacing(void) const;
        /// Check whether it is safe or not to call GetMin_spacing method.
        bool CanGetMin_spacing(void) const;
        void ResetMin_spacing(void);
        void SetDefaultMin_spacing(void);
        TMin_spacing GetMin_spacing(void) const;
        void SetMin_spacing(TMin_spacing value);
        TMin_spacing& SetMin_spacing(void);
    
        /// mandatory
        /// typedef string TCut
        ///  Check whether the Cut data member has been assigned a value.
        bool IsSetCut(void) const;
        /// Check whether it is safe or not to call GetCut method.
        bool CanGetCut(void) const;
        void ResetCut(void);
        const TCut& GetCut(void) const;
        void SetCut(const TCut& value);
        TCut& SetCut(void);
    
        /// optional
        /// typedef string TNo_cut
        ///  Check whether the No_cut data member has been assigned a value.
        bool IsSetNo_cut(void) const;
        /// Check whether it is safe or not to call GetNo_cut method.
        bool CanGetNo_cut(void) const;
        void ResetNo_cut(void);
        const TNo_cut& GetNo_cut(void) const;
        void SetNo_cut(const TNo_cut& value);
        TNo_cut& SetNo_cut(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        EAttlist_sense m_Sense;
        int m_Min_spacing;
        string m_Cut;
        string m_No_cut;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Specificity data member has been assigned a value.
    bool IsSetSpecificity(void) const;
    /// Check whether it is safe or not to call GetSpecificity method.
    bool CanGetSpecificity(void) const;
    void ResetSpecificity(void);
    void SetSpecificity(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSpecificity_Base(const CSpecificity_Base&);
    CSpecificity_Base& operator=(const CSpecificity_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CSpecificity_Base::C_Attlist::IsSetSense(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CSpecificity_Base::C_Attlist::CanGetSense(void) const
{
    return IsSetSense();
}

inline
void CSpecificity_Base::C_Attlist::ResetSense(void)
{
    m_Sense = (EAttlist_sense)(0);
    m_set_State[0] &= ~0x3;
}

inline
CSpecificity_Base::C_Attlist::TSense CSpecificity_Base::C_Attlist::GetSense(void) const
{
    if (!CanGetSense()) {
        ThrowUnassigned(0);
    }
    return m_Sense;
}

inline
void CSpecificity_Base::C_Attlist::SetSense(CSpecificity_Base::C_Attlist::TSense value)
{
    m_Sense = value;
    m_set_State[0] |= 0x3;
}

inline
CSpecificity_Base::C_Attlist::TSense& CSpecificity_Base::C_Attlist::SetSense(void)
{
#ifdef _DEBUG
    if (!IsSetSense()) {
        memset(&m_Sense,UnassignedByte(),sizeof(m_Sense));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Sense;
}

inline
bool CSpecificity_Base::C_Attlist::IsSetMin_spacing(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CSpecificity_Base::C_Attlist::CanGetMin_spacing(void) const
{
    return true;
}

inline
void CSpecificity_Base::C_Attlist::ResetMin_spacing(void)
{
    m_Min_spacing = 1;
    m_set_State[0] &= ~0xc;
}

inline
void CSpecificity_Base::C_Attlist::SetDefaultMin_spacing(void)
{
    ResetMin_spacing();
    m_set_State[0] |= 0x4;
}

inline
CSpecificity_Base::C_Attlist::TMin_spacing CSpecificity_Base::C_Attlist::GetMin_spacing(void) const
{
    return m_Min_spacing;
}

inline
void CSpecificity_Base::C_Attlist::SetMin_spacing(CSpecificity_Base::C_Attlist::TMin_spacing value)
{
    m_Min_spacing = value;
    m_set_State[0] |= 0xc;
}

inline
CSpecificity_Base::C_Attlist::TMin_spacing& CSpecificity_Base::C_Attlist::SetMin_spacing(void)
{
#ifdef _DEBUG
    if (!IsSetMin_spacing()) {
        memset(&m_Min_spacing,UnassignedByte(),sizeof(m_Min_spacing));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Min_spacing;
}

inline
bool CSpecificity_Base::C_Attlist::IsSetCut(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CSpecificity_Base::C_Attlist::CanGetCut(void) const
{
    return IsSetCut();
}

inline
const CSpecificity_Base::C_Attlist::TCut& CSpecificity_Base::C_Attlist::GetCut(void) const
{
    if (!CanGetCut()) {
        ThrowUnassigned(2);
    }
    return m_Cut;
}

inline
void CSpecificity_Base::C_Attlist::SetCut(const CSpecificity_Base::C_Attlist::TCut& value)
{
    m_Cut = value;
    m_set_State[0] |= 0x30;
}

inline
CSpecificity_Base::C_Attlist::TCut& CSpecificity_Base::C_Attlist::SetCut(void)
{
#ifdef _DEBUG
    if (!IsSetCut()) {
        m_Cut = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Cut;
}

inline
bool CSpecificity_Base::C_Attlist::IsSetNo_cut(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CSpecificity_Base::C_Attlist::CanGetNo_cut(void) const
{
    return IsSetNo_cut();
}

inline
const CSpecificity_Base::C_Attlist::TNo_cut& CSpecificity_Base::C_Attlist::GetNo_cut(void) const
{
    if (!CanGetNo_cut()) {
        ThrowUnassigned(3);
    }
    return m_No_cut;
}

inline
void CSpecificity_Base::C_Attlist::SetNo_cut(const CSpecificity_Base::C_Attlist::TNo_cut& value)
{
    m_No_cut = value;
    m_set_State[0] |= 0xc0;
}

inline
CSpecificity_Base::C_Attlist::TNo_cut& CSpecificity_Base::C_Attlist::SetNo_cut(void)
{
#ifdef _DEBUG
    if (!IsSetNo_cut()) {
        m_No_cut = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x40;
    return m_No_cut;
}

inline
bool CSpecificity_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CSpecificity_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CSpecificity_Base::TAttlist& CSpecificity_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CSpecificity_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CSpecificity_Base::TAttlist& CSpecificity_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetSpecificity();
    return (*m_Attlist);
}

inline
bool CSpecificity_Base::IsSetSpecificity(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CSpecificity_Base::CanGetSpecificity(void) const
{
    return false;
}

inline
void CSpecificity_Base::ResetSpecificity(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CSpecificity_Base::SetSpecificity(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_SPECIFICITY_BASE_HPP
