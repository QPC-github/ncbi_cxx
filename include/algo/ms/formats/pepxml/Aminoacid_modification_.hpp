/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Aminoacid_modification_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_AMINOACID_MODIFICATION_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_AMINOACID_MODIFICATION_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Modified aminoacid, static or variable 
class NCBI_PEPXML_EXPORT CAminoacid_modification_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CAminoacid_modification_Base(void);
    // destructor
    virtual ~CAminoacid_modification_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TAminoacid;
        typedef string TMassdiff;
        typedef double TMass;
        typedef string TVariable;
        typedef string TPeptide_terminus;
        typedef string TSymbol;
        typedef string TBinary;
        typedef string TDescription;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TAminoacid
        ///  Check whether the Aminoacid data member has been assigned a value.
        bool IsSetAminoacid(void) const;
        /// Check whether it is safe or not to call GetAminoacid method.
        bool CanGetAminoacid(void) const;
        void ResetAminoacid(void);
        const TAminoacid& GetAminoacid(void) const;
        void SetAminoacid(const TAminoacid& value);
        TAminoacid& SetAminoacid(void);
    
        /// mandatory
        /// typedef string TMassdiff
        ///  Check whether the Massdiff data member has been assigned a value.
        bool IsSetMassdiff(void) const;
        /// Check whether it is safe or not to call GetMassdiff method.
        bool CanGetMassdiff(void) const;
        void ResetMassdiff(void);
        const TMassdiff& GetMassdiff(void) const;
        void SetMassdiff(const TMassdiff& value);
        TMassdiff& SetMassdiff(void);
    
        /// mandatory
        /// typedef double TMass
        ///  Check whether the Mass data member has been assigned a value.
        bool IsSetMass(void) const;
        /// Check whether it is safe or not to call GetMass method.
        bool CanGetMass(void) const;
        void ResetMass(void);
        TMass GetMass(void) const;
        void SetMass(TMass value);
        TMass& SetMass(void);
    
        /// mandatory
        /// typedef string TVariable
        ///  Check whether the Variable data member has been assigned a value.
        bool IsSetVariable(void) const;
        /// Check whether it is safe or not to call GetVariable method.
        bool CanGetVariable(void) const;
        void ResetVariable(void);
        const TVariable& GetVariable(void) const;
        void SetVariable(const TVariable& value);
        TVariable& SetVariable(void);
    
        /// optional
        /// typedef string TPeptide_terminus
        ///  Check whether the Peptide_terminus data member has been assigned a value.
        bool IsSetPeptide_terminus(void) const;
        /// Check whether it is safe or not to call GetPeptide_terminus method.
        bool CanGetPeptide_terminus(void) const;
        void ResetPeptide_terminus(void);
        const TPeptide_terminus& GetPeptide_terminus(void) const;
        void SetPeptide_terminus(const TPeptide_terminus& value);
        TPeptide_terminus& SetPeptide_terminus(void);
    
        /// optional
        /// typedef string TSymbol
        ///  Check whether the Symbol data member has been assigned a value.
        bool IsSetSymbol(void) const;
        /// Check whether it is safe or not to call GetSymbol method.
        bool CanGetSymbol(void) const;
        void ResetSymbol(void);
        const TSymbol& GetSymbol(void) const;
        void SetSymbol(const TSymbol& value);
        TSymbol& SetSymbol(void);
    
        /// optional
        /// typedef string TBinary
        ///  Check whether the Binary data member has been assigned a value.
        bool IsSetBinary(void) const;
        /// Check whether it is safe or not to call GetBinary method.
        bool CanGetBinary(void) const;
        void ResetBinary(void);
        const TBinary& GetBinary(void) const;
        void SetBinary(const TBinary& value);
        TBinary& SetBinary(void);
    
        /// optional
        /// typedef string TDescription
        ///  Check whether the Description data member has been assigned a value.
        bool IsSetDescription(void) const;
        /// Check whether it is safe or not to call GetDescription method.
        bool CanGetDescription(void) const;
        void ResetDescription(void);
        const TDescription& GetDescription(void) const;
        void SetDescription(const TDescription& value);
        TDescription& SetDescription(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Aminoacid;
        string m_Massdiff;
        double m_Mass;
        string m_Variable;
        string m_Peptide_terminus;
        string m_Symbol;
        string m_Binary;
        string m_Description;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Aminoacid_modification data member has been assigned a value.
    bool IsSetAminoacid_modification(void) const;
    /// Check whether it is safe or not to call GetAminoacid_modification method.
    bool CanGetAminoacid_modification(void) const;
    void ResetAminoacid_modification(void);
    void SetAminoacid_modification(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CAminoacid_modification_Base(const CAminoacid_modification_Base&);
    CAminoacid_modification_Base& operator=(const CAminoacid_modification_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CAminoacid_modification_Base::C_Attlist::IsSetAminoacid(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetAminoacid(void) const
{
    return IsSetAminoacid();
}

inline
const CAminoacid_modification_Base::C_Attlist::TAminoacid& CAminoacid_modification_Base::C_Attlist::GetAminoacid(void) const
{
    if (!CanGetAminoacid()) {
        ThrowUnassigned(0);
    }
    return m_Aminoacid;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetAminoacid(const CAminoacid_modification_Base::C_Attlist::TAminoacid& value)
{
    m_Aminoacid = value;
    m_set_State[0] |= 0x3;
}

inline
CAminoacid_modification_Base::C_Attlist::TAminoacid& CAminoacid_modification_Base::C_Attlist::SetAminoacid(void)
{
#ifdef _DEBUG
    if (!IsSetAminoacid()) {
        m_Aminoacid = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Aminoacid;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetMassdiff(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetMassdiff(void) const
{
    return IsSetMassdiff();
}

inline
const CAminoacid_modification_Base::C_Attlist::TMassdiff& CAminoacid_modification_Base::C_Attlist::GetMassdiff(void) const
{
    if (!CanGetMassdiff()) {
        ThrowUnassigned(1);
    }
    return m_Massdiff;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetMassdiff(const CAminoacid_modification_Base::C_Attlist::TMassdiff& value)
{
    m_Massdiff = value;
    m_set_State[0] |= 0xc;
}

inline
CAminoacid_modification_Base::C_Attlist::TMassdiff& CAminoacid_modification_Base::C_Attlist::SetMassdiff(void)
{
#ifdef _DEBUG
    if (!IsSetMassdiff()) {
        m_Massdiff = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Massdiff;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetMass(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetMass(void) const
{
    return IsSetMass();
}

inline
void CAminoacid_modification_Base::C_Attlist::ResetMass(void)
{
    m_Mass = 0;
    m_set_State[0] &= ~0x30;
}

inline
CAminoacid_modification_Base::C_Attlist::TMass CAminoacid_modification_Base::C_Attlist::GetMass(void) const
{
    if (!CanGetMass()) {
        ThrowUnassigned(2);
    }
    return m_Mass;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetMass(CAminoacid_modification_Base::C_Attlist::TMass value)
{
    m_Mass = value;
    m_set_State[0] |= 0x30;
}

inline
CAminoacid_modification_Base::C_Attlist::TMass& CAminoacid_modification_Base::C_Attlist::SetMass(void)
{
#ifdef _DEBUG
    if (!IsSetMass()) {
        memset(&m_Mass,UnassignedByte(),sizeof(m_Mass));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Mass;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetVariable(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetVariable(void) const
{
    return IsSetVariable();
}

inline
const CAminoacid_modification_Base::C_Attlist::TVariable& CAminoacid_modification_Base::C_Attlist::GetVariable(void) const
{
    if (!CanGetVariable()) {
        ThrowUnassigned(3);
    }
    return m_Variable;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetVariable(const CAminoacid_modification_Base::C_Attlist::TVariable& value)
{
    m_Variable = value;
    m_set_State[0] |= 0xc0;
}

inline
CAminoacid_modification_Base::C_Attlist::TVariable& CAminoacid_modification_Base::C_Attlist::SetVariable(void)
{
#ifdef _DEBUG
    if (!IsSetVariable()) {
        m_Variable = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Variable;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetPeptide_terminus(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetPeptide_terminus(void) const
{
    return IsSetPeptide_terminus();
}

inline
const CAminoacid_modification_Base::C_Attlist::TPeptide_terminus& CAminoacid_modification_Base::C_Attlist::GetPeptide_terminus(void) const
{
    if (!CanGetPeptide_terminus()) {
        ThrowUnassigned(4);
    }
    return m_Peptide_terminus;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetPeptide_terminus(const CAminoacid_modification_Base::C_Attlist::TPeptide_terminus& value)
{
    m_Peptide_terminus = value;
    m_set_State[0] |= 0x300;
}

inline
CAminoacid_modification_Base::C_Attlist::TPeptide_terminus& CAminoacid_modification_Base::C_Attlist::SetPeptide_terminus(void)
{
#ifdef _DEBUG
    if (!IsSetPeptide_terminus()) {
        m_Peptide_terminus = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Peptide_terminus;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetSymbol(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetSymbol(void) const
{
    return IsSetSymbol();
}

inline
const CAminoacid_modification_Base::C_Attlist::TSymbol& CAminoacid_modification_Base::C_Attlist::GetSymbol(void) const
{
    if (!CanGetSymbol()) {
        ThrowUnassigned(5);
    }
    return m_Symbol;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetSymbol(const CAminoacid_modification_Base::C_Attlist::TSymbol& value)
{
    m_Symbol = value;
    m_set_State[0] |= 0xc00;
}

inline
CAminoacid_modification_Base::C_Attlist::TSymbol& CAminoacid_modification_Base::C_Attlist::SetSymbol(void)
{
#ifdef _DEBUG
    if (!IsSetSymbol()) {
        m_Symbol = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Symbol;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetBinary(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetBinary(void) const
{
    return IsSetBinary();
}

inline
const CAminoacid_modification_Base::C_Attlist::TBinary& CAminoacid_modification_Base::C_Attlist::GetBinary(void) const
{
    if (!CanGetBinary()) {
        ThrowUnassigned(6);
    }
    return m_Binary;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetBinary(const CAminoacid_modification_Base::C_Attlist::TBinary& value)
{
    m_Binary = value;
    m_set_State[0] |= 0x3000;
}

inline
CAminoacid_modification_Base::C_Attlist::TBinary& CAminoacid_modification_Base::C_Attlist::SetBinary(void)
{
#ifdef _DEBUG
    if (!IsSetBinary()) {
        m_Binary = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1000;
    return m_Binary;
}

inline
bool CAminoacid_modification_Base::C_Attlist::IsSetDescription(void) const
{
    return ((m_set_State[0] & 0xc000) != 0);
}

inline
bool CAminoacid_modification_Base::C_Attlist::CanGetDescription(void) const
{
    return IsSetDescription();
}

inline
const CAminoacid_modification_Base::C_Attlist::TDescription& CAminoacid_modification_Base::C_Attlist::GetDescription(void) const
{
    if (!CanGetDescription()) {
        ThrowUnassigned(7);
    }
    return m_Description;
}

inline
void CAminoacid_modification_Base::C_Attlist::SetDescription(const CAminoacid_modification_Base::C_Attlist::TDescription& value)
{
    m_Description = value;
    m_set_State[0] |= 0xc000;
}

inline
CAminoacid_modification_Base::C_Attlist::TDescription& CAminoacid_modification_Base::C_Attlist::SetDescription(void)
{
#ifdef _DEBUG
    if (!IsSetDescription()) {
        m_Description = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4000;
    return m_Description;
}

inline
bool CAminoacid_modification_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CAminoacid_modification_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CAminoacid_modification_Base::TAttlist& CAminoacid_modification_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CAminoacid_modification_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CAminoacid_modification_Base::TAttlist& CAminoacid_modification_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetAminoacid_modification();
    return (*m_Attlist);
}

inline
bool CAminoacid_modification_Base::IsSetAminoacid_modification(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAminoacid_modification_Base::CanGetAminoacid_modification(void) const
{
    return false;
}

inline
void CAminoacid_modification_Base::ResetAminoacid_modification(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CAminoacid_modification_Base::SetAminoacid_modification(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_AMINOACID_MODIFICATION_BASE_HPP
