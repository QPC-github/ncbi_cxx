/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Xpressratio_result_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_XPRESSRATIO_RESULT_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_XPRESSRATIO_RESULT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Quantitation 
class NCBI_PEPXML_EXPORT CXpressratio_result_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CXpressratio_result_Base(void);
    // destructor
    virtual ~CXpressratio_result_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TLight_firstscan;
        typedef int TLight_lastscan;
        typedef double TLight_mass;
        typedef int THeavy_firstscan;
        typedef int THeavy_lastscan;
        typedef double THeavy_mass;
        typedef double TMass_tol;
        typedef string TRatio;
        typedef string THeavy2light_ratio;
        typedef double TLight_area;
        typedef double THeavy_area;
        typedef double TDecimal_ratio;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TLight_firstscan
        ///  Check whether the Light_firstscan data member has been assigned a value.
        bool IsSetLight_firstscan(void) const;
        /// Check whether it is safe or not to call GetLight_firstscan method.
        bool CanGetLight_firstscan(void) const;
        void ResetLight_firstscan(void);
        TLight_firstscan GetLight_firstscan(void) const;
        void SetLight_firstscan(TLight_firstscan value);
        TLight_firstscan& SetLight_firstscan(void);
    
        /// mandatory
        /// typedef int TLight_lastscan
        ///  Check whether the Light_lastscan data member has been assigned a value.
        bool IsSetLight_lastscan(void) const;
        /// Check whether it is safe or not to call GetLight_lastscan method.
        bool CanGetLight_lastscan(void) const;
        void ResetLight_lastscan(void);
        TLight_lastscan GetLight_lastscan(void) const;
        void SetLight_lastscan(TLight_lastscan value);
        TLight_lastscan& SetLight_lastscan(void);
    
        /// mandatory
        /// typedef double TLight_mass
        ///  Check whether the Light_mass data member has been assigned a value.
        bool IsSetLight_mass(void) const;
        /// Check whether it is safe or not to call GetLight_mass method.
        bool CanGetLight_mass(void) const;
        void ResetLight_mass(void);
        TLight_mass GetLight_mass(void) const;
        void SetLight_mass(TLight_mass value);
        TLight_mass& SetLight_mass(void);
    
        /// mandatory
        /// typedef int THeavy_firstscan
        ///  Check whether the Heavy_firstscan data member has been assigned a value.
        bool IsSetHeavy_firstscan(void) const;
        /// Check whether it is safe or not to call GetHeavy_firstscan method.
        bool CanGetHeavy_firstscan(void) const;
        void ResetHeavy_firstscan(void);
        THeavy_firstscan GetHeavy_firstscan(void) const;
        void SetHeavy_firstscan(THeavy_firstscan value);
        THeavy_firstscan& SetHeavy_firstscan(void);
    
        /// mandatory
        /// typedef int THeavy_lastscan
        ///  Check whether the Heavy_lastscan data member has been assigned a value.
        bool IsSetHeavy_lastscan(void) const;
        /// Check whether it is safe or not to call GetHeavy_lastscan method.
        bool CanGetHeavy_lastscan(void) const;
        void ResetHeavy_lastscan(void);
        THeavy_lastscan GetHeavy_lastscan(void) const;
        void SetHeavy_lastscan(THeavy_lastscan value);
        THeavy_lastscan& SetHeavy_lastscan(void);
    
        /// mandatory
        /// typedef double THeavy_mass
        ///  Check whether the Heavy_mass data member has been assigned a value.
        bool IsSetHeavy_mass(void) const;
        /// Check whether it is safe or not to call GetHeavy_mass method.
        bool CanGetHeavy_mass(void) const;
        void ResetHeavy_mass(void);
        THeavy_mass GetHeavy_mass(void) const;
        void SetHeavy_mass(THeavy_mass value);
        THeavy_mass& SetHeavy_mass(void);
    
        /// mandatory
        /// typedef double TMass_tol
        ///  Check whether the Mass_tol data member has been assigned a value.
        bool IsSetMass_tol(void) const;
        /// Check whether it is safe or not to call GetMass_tol method.
        bool CanGetMass_tol(void) const;
        void ResetMass_tol(void);
        TMass_tol GetMass_tol(void) const;
        void SetMass_tol(TMass_tol value);
        TMass_tol& SetMass_tol(void);
    
        /// mandatory
        /// typedef string TRatio
        ///  Check whether the Ratio data member has been assigned a value.
        bool IsSetRatio(void) const;
        /// Check whether it is safe or not to call GetRatio method.
        bool CanGetRatio(void) const;
        void ResetRatio(void);
        const TRatio& GetRatio(void) const;
        void SetRatio(const TRatio& value);
        TRatio& SetRatio(void);
    
        /// mandatory
        /// typedef string THeavy2light_ratio
        ///  Check whether the Heavy2light_ratio data member has been assigned a value.
        bool IsSetHeavy2light_ratio(void) const;
        /// Check whether it is safe or not to call GetHeavy2light_ratio method.
        bool CanGetHeavy2light_ratio(void) const;
        void ResetHeavy2light_ratio(void);
        const THeavy2light_ratio& GetHeavy2light_ratio(void) const;
        void SetHeavy2light_ratio(const THeavy2light_ratio& value);
        THeavy2light_ratio& SetHeavy2light_ratio(void);
    
        /// mandatory
        /// typedef double TLight_area
        ///  Check whether the Light_area data member has been assigned a value.
        bool IsSetLight_area(void) const;
        /// Check whether it is safe or not to call GetLight_area method.
        bool CanGetLight_area(void) const;
        void ResetLight_area(void);
        TLight_area GetLight_area(void) const;
        void SetLight_area(TLight_area value);
        TLight_area& SetLight_area(void);
    
        /// mandatory
        /// typedef double THeavy_area
        ///  Check whether the Heavy_area data member has been assigned a value.
        bool IsSetHeavy_area(void) const;
        /// Check whether it is safe or not to call GetHeavy_area method.
        bool CanGetHeavy_area(void) const;
        void ResetHeavy_area(void);
        THeavy_area GetHeavy_area(void) const;
        void SetHeavy_area(THeavy_area value);
        THeavy_area& SetHeavy_area(void);
    
        /// mandatory
        /// typedef double TDecimal_ratio
        ///  Check whether the Decimal_ratio data member has been assigned a value.
        bool IsSetDecimal_ratio(void) const;
        /// Check whether it is safe or not to call GetDecimal_ratio method.
        bool CanGetDecimal_ratio(void) const;
        void ResetDecimal_ratio(void);
        TDecimal_ratio GetDecimal_ratio(void) const;
        void SetDecimal_ratio(TDecimal_ratio value);
        TDecimal_ratio& SetDecimal_ratio(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        int m_Light_firstscan;
        int m_Light_lastscan;
        double m_Light_mass;
        int m_Heavy_firstscan;
        int m_Heavy_lastscan;
        double m_Heavy_mass;
        double m_Mass_tol;
        string m_Ratio;
        string m_Heavy2light_ratio;
        double m_Light_area;
        double m_Heavy_area;
        double m_Decimal_ratio;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Xpressratio_result data member has been assigned a value.
    bool IsSetXpressratio_result(void) const;
    /// Check whether it is safe or not to call GetXpressratio_result method.
    bool CanGetXpressratio_result(void) const;
    void ResetXpressratio_result(void);
    void SetXpressratio_result(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CXpressratio_result_Base(const CXpressratio_result_Base&);
    CXpressratio_result_Base& operator=(const CXpressratio_result_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CXpressratio_result_Base::C_Attlist::IsSetLight_firstscan(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetLight_firstscan(void) const
{
    return IsSetLight_firstscan();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetLight_firstscan(void)
{
    m_Light_firstscan = 0;
    m_set_State[0] &= ~0x3;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_firstscan CXpressratio_result_Base::C_Attlist::GetLight_firstscan(void) const
{
    if (!CanGetLight_firstscan()) {
        ThrowUnassigned(0);
    }
    return m_Light_firstscan;
}

inline
void CXpressratio_result_Base::C_Attlist::SetLight_firstscan(CXpressratio_result_Base::C_Attlist::TLight_firstscan value)
{
    m_Light_firstscan = value;
    m_set_State[0] |= 0x3;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_firstscan& CXpressratio_result_Base::C_Attlist::SetLight_firstscan(void)
{
#ifdef _DEBUG
    if (!IsSetLight_firstscan()) {
        memset(&m_Light_firstscan,UnassignedByte(),sizeof(m_Light_firstscan));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Light_firstscan;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetLight_lastscan(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetLight_lastscan(void) const
{
    return IsSetLight_lastscan();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetLight_lastscan(void)
{
    m_Light_lastscan = 0;
    m_set_State[0] &= ~0xc;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_lastscan CXpressratio_result_Base::C_Attlist::GetLight_lastscan(void) const
{
    if (!CanGetLight_lastscan()) {
        ThrowUnassigned(1);
    }
    return m_Light_lastscan;
}

inline
void CXpressratio_result_Base::C_Attlist::SetLight_lastscan(CXpressratio_result_Base::C_Attlist::TLight_lastscan value)
{
    m_Light_lastscan = value;
    m_set_State[0] |= 0xc;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_lastscan& CXpressratio_result_Base::C_Attlist::SetLight_lastscan(void)
{
#ifdef _DEBUG
    if (!IsSetLight_lastscan()) {
        memset(&m_Light_lastscan,UnassignedByte(),sizeof(m_Light_lastscan));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Light_lastscan;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetLight_mass(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetLight_mass(void) const
{
    return IsSetLight_mass();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetLight_mass(void)
{
    m_Light_mass = 0;
    m_set_State[0] &= ~0x30;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_mass CXpressratio_result_Base::C_Attlist::GetLight_mass(void) const
{
    if (!CanGetLight_mass()) {
        ThrowUnassigned(2);
    }
    return m_Light_mass;
}

inline
void CXpressratio_result_Base::C_Attlist::SetLight_mass(CXpressratio_result_Base::C_Attlist::TLight_mass value)
{
    m_Light_mass = value;
    m_set_State[0] |= 0x30;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_mass& CXpressratio_result_Base::C_Attlist::SetLight_mass(void)
{
#ifdef _DEBUG
    if (!IsSetLight_mass()) {
        memset(&m_Light_mass,UnassignedByte(),sizeof(m_Light_mass));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Light_mass;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetHeavy_firstscan(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetHeavy_firstscan(void) const
{
    return IsSetHeavy_firstscan();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetHeavy_firstscan(void)
{
    m_Heavy_firstscan = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_firstscan CXpressratio_result_Base::C_Attlist::GetHeavy_firstscan(void) const
{
    if (!CanGetHeavy_firstscan()) {
        ThrowUnassigned(3);
    }
    return m_Heavy_firstscan;
}

inline
void CXpressratio_result_Base::C_Attlist::SetHeavy_firstscan(CXpressratio_result_Base::C_Attlist::THeavy_firstscan value)
{
    m_Heavy_firstscan = value;
    m_set_State[0] |= 0xc0;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_firstscan& CXpressratio_result_Base::C_Attlist::SetHeavy_firstscan(void)
{
#ifdef _DEBUG
    if (!IsSetHeavy_firstscan()) {
        memset(&m_Heavy_firstscan,UnassignedByte(),sizeof(m_Heavy_firstscan));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Heavy_firstscan;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetHeavy_lastscan(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetHeavy_lastscan(void) const
{
    return IsSetHeavy_lastscan();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetHeavy_lastscan(void)
{
    m_Heavy_lastscan = 0;
    m_set_State[0] &= ~0x300;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_lastscan CXpressratio_result_Base::C_Attlist::GetHeavy_lastscan(void) const
{
    if (!CanGetHeavy_lastscan()) {
        ThrowUnassigned(4);
    }
    return m_Heavy_lastscan;
}

inline
void CXpressratio_result_Base::C_Attlist::SetHeavy_lastscan(CXpressratio_result_Base::C_Attlist::THeavy_lastscan value)
{
    m_Heavy_lastscan = value;
    m_set_State[0] |= 0x300;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_lastscan& CXpressratio_result_Base::C_Attlist::SetHeavy_lastscan(void)
{
#ifdef _DEBUG
    if (!IsSetHeavy_lastscan()) {
        memset(&m_Heavy_lastscan,UnassignedByte(),sizeof(m_Heavy_lastscan));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Heavy_lastscan;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetHeavy_mass(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetHeavy_mass(void) const
{
    return IsSetHeavy_mass();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetHeavy_mass(void)
{
    m_Heavy_mass = 0;
    m_set_State[0] &= ~0xc00;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_mass CXpressratio_result_Base::C_Attlist::GetHeavy_mass(void) const
{
    if (!CanGetHeavy_mass()) {
        ThrowUnassigned(5);
    }
    return m_Heavy_mass;
}

inline
void CXpressratio_result_Base::C_Attlist::SetHeavy_mass(CXpressratio_result_Base::C_Attlist::THeavy_mass value)
{
    m_Heavy_mass = value;
    m_set_State[0] |= 0xc00;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_mass& CXpressratio_result_Base::C_Attlist::SetHeavy_mass(void)
{
#ifdef _DEBUG
    if (!IsSetHeavy_mass()) {
        memset(&m_Heavy_mass,UnassignedByte(),sizeof(m_Heavy_mass));
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Heavy_mass;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetMass_tol(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetMass_tol(void) const
{
    return IsSetMass_tol();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetMass_tol(void)
{
    m_Mass_tol = 0;
    m_set_State[0] &= ~0x3000;
}

inline
CXpressratio_result_Base::C_Attlist::TMass_tol CXpressratio_result_Base::C_Attlist::GetMass_tol(void) const
{
    if (!CanGetMass_tol()) {
        ThrowUnassigned(6);
    }
    return m_Mass_tol;
}

inline
void CXpressratio_result_Base::C_Attlist::SetMass_tol(CXpressratio_result_Base::C_Attlist::TMass_tol value)
{
    m_Mass_tol = value;
    m_set_State[0] |= 0x3000;
}

inline
CXpressratio_result_Base::C_Attlist::TMass_tol& CXpressratio_result_Base::C_Attlist::SetMass_tol(void)
{
#ifdef _DEBUG
    if (!IsSetMass_tol()) {
        memset(&m_Mass_tol,UnassignedByte(),sizeof(m_Mass_tol));
    }
#endif
    m_set_State[0] |= 0x1000;
    return m_Mass_tol;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetRatio(void) const
{
    return ((m_set_State[0] & 0xc000) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetRatio(void) const
{
    return IsSetRatio();
}

inline
const CXpressratio_result_Base::C_Attlist::TRatio& CXpressratio_result_Base::C_Attlist::GetRatio(void) const
{
    if (!CanGetRatio()) {
        ThrowUnassigned(7);
    }
    return m_Ratio;
}

inline
void CXpressratio_result_Base::C_Attlist::SetRatio(const CXpressratio_result_Base::C_Attlist::TRatio& value)
{
    m_Ratio = value;
    m_set_State[0] |= 0xc000;
}

inline
CXpressratio_result_Base::C_Attlist::TRatio& CXpressratio_result_Base::C_Attlist::SetRatio(void)
{
#ifdef _DEBUG
    if (!IsSetRatio()) {
        m_Ratio = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4000;
    return m_Ratio;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetHeavy2light_ratio(void) const
{
    return ((m_set_State[0] & 0x30000) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetHeavy2light_ratio(void) const
{
    return IsSetHeavy2light_ratio();
}

inline
const CXpressratio_result_Base::C_Attlist::THeavy2light_ratio& CXpressratio_result_Base::C_Attlist::GetHeavy2light_ratio(void) const
{
    if (!CanGetHeavy2light_ratio()) {
        ThrowUnassigned(8);
    }
    return m_Heavy2light_ratio;
}

inline
void CXpressratio_result_Base::C_Attlist::SetHeavy2light_ratio(const CXpressratio_result_Base::C_Attlist::THeavy2light_ratio& value)
{
    m_Heavy2light_ratio = value;
    m_set_State[0] |= 0x30000;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy2light_ratio& CXpressratio_result_Base::C_Attlist::SetHeavy2light_ratio(void)
{
#ifdef _DEBUG
    if (!IsSetHeavy2light_ratio()) {
        m_Heavy2light_ratio = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x10000;
    return m_Heavy2light_ratio;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetLight_area(void) const
{
    return ((m_set_State[0] & 0xc0000) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetLight_area(void) const
{
    return IsSetLight_area();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetLight_area(void)
{
    m_Light_area = 0;
    m_set_State[0] &= ~0xc0000;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_area CXpressratio_result_Base::C_Attlist::GetLight_area(void) const
{
    if (!CanGetLight_area()) {
        ThrowUnassigned(9);
    }
    return m_Light_area;
}

inline
void CXpressratio_result_Base::C_Attlist::SetLight_area(CXpressratio_result_Base::C_Attlist::TLight_area value)
{
    m_Light_area = value;
    m_set_State[0] |= 0xc0000;
}

inline
CXpressratio_result_Base::C_Attlist::TLight_area& CXpressratio_result_Base::C_Attlist::SetLight_area(void)
{
#ifdef _DEBUG
    if (!IsSetLight_area()) {
        memset(&m_Light_area,UnassignedByte(),sizeof(m_Light_area));
    }
#endif
    m_set_State[0] |= 0x40000;
    return m_Light_area;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetHeavy_area(void) const
{
    return ((m_set_State[0] & 0x300000) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetHeavy_area(void) const
{
    return IsSetHeavy_area();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetHeavy_area(void)
{
    m_Heavy_area = 0;
    m_set_State[0] &= ~0x300000;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_area CXpressratio_result_Base::C_Attlist::GetHeavy_area(void) const
{
    if (!CanGetHeavy_area()) {
        ThrowUnassigned(10);
    }
    return m_Heavy_area;
}

inline
void CXpressratio_result_Base::C_Attlist::SetHeavy_area(CXpressratio_result_Base::C_Attlist::THeavy_area value)
{
    m_Heavy_area = value;
    m_set_State[0] |= 0x300000;
}

inline
CXpressratio_result_Base::C_Attlist::THeavy_area& CXpressratio_result_Base::C_Attlist::SetHeavy_area(void)
{
#ifdef _DEBUG
    if (!IsSetHeavy_area()) {
        memset(&m_Heavy_area,UnassignedByte(),sizeof(m_Heavy_area));
    }
#endif
    m_set_State[0] |= 0x100000;
    return m_Heavy_area;
}

inline
bool CXpressratio_result_Base::C_Attlist::IsSetDecimal_ratio(void) const
{
    return ((m_set_State[0] & 0xc00000) != 0);
}

inline
bool CXpressratio_result_Base::C_Attlist::CanGetDecimal_ratio(void) const
{
    return IsSetDecimal_ratio();
}

inline
void CXpressratio_result_Base::C_Attlist::ResetDecimal_ratio(void)
{
    m_Decimal_ratio = 0;
    m_set_State[0] &= ~0xc00000;
}

inline
CXpressratio_result_Base::C_Attlist::TDecimal_ratio CXpressratio_result_Base::C_Attlist::GetDecimal_ratio(void) const
{
    if (!CanGetDecimal_ratio()) {
        ThrowUnassigned(11);
    }
    return m_Decimal_ratio;
}

inline
void CXpressratio_result_Base::C_Attlist::SetDecimal_ratio(CXpressratio_result_Base::C_Attlist::TDecimal_ratio value)
{
    m_Decimal_ratio = value;
    m_set_State[0] |= 0xc00000;
}

inline
CXpressratio_result_Base::C_Attlist::TDecimal_ratio& CXpressratio_result_Base::C_Attlist::SetDecimal_ratio(void)
{
#ifdef _DEBUG
    if (!IsSetDecimal_ratio()) {
        memset(&m_Decimal_ratio,UnassignedByte(),sizeof(m_Decimal_ratio));
    }
#endif
    m_set_State[0] |= 0x400000;
    return m_Decimal_ratio;
}

inline
bool CXpressratio_result_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CXpressratio_result_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CXpressratio_result_Base::TAttlist& CXpressratio_result_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CXpressratio_result_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CXpressratio_result_Base::TAttlist& CXpressratio_result_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetXpressratio_result();
    return (*m_Attlist);
}

inline
bool CXpressratio_result_Base::IsSetXpressratio_result(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CXpressratio_result_Base::CanGetXpressratio_result(void) const
{
    return false;
}

inline
void CXpressratio_result_Base::ResetXpressratio_result(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CXpressratio_result_Base::SetXpressratio_result(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_XPRESSRATIO_RESULT_BASE_HPP
