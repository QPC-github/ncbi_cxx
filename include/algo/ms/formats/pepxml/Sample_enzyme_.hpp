/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Sample_enzyme_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_SAMPLE_ENZYME_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_SAMPLE_ENZYME_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CSpecificity;


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Defines the net cleavage specificity of an enzyme, chemical reagent, or a mixture of these, for mass spectrometry purposes 
class NCBI_PEPXML_EXPORT CSample_enzyme_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CSample_enzyme_Base(void);
    // destructor
    virtual ~CSample_enzyme_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_fidelity {
            eAttlist_fidelity_specific     = 1,
            eAttlist_fidelity_semispecific = 2,
            eAttlist_fidelity_nonspecific  = 3
        };
        
        /// Access to EAttlist_fidelity's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_fidelity)(void);
        
        // types
        typedef string TName;
        typedef string TDescription;
        typedef EAttlist_fidelity TFidelity;
        typedef bool TIndependent;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TName
        ///  Check whether the Name data member has been assigned a value.
        bool IsSetName(void) const;
        /// Check whether it is safe or not to call GetName method.
        bool CanGetName(void) const;
        void ResetName(void);
        const TName& GetName(void) const;
        void SetName(const TName& value);
        TName& SetName(void);
    
        /// optional
        /// typedef string TDescription
        ///  Check whether the Description data member has been assigned a value.
        bool IsSetDescription(void) const;
        /// Check whether it is safe or not to call GetDescription method.
        bool CanGetDescription(void) const;
        void ResetDescription(void);
        const TDescription& GetDescription(void) const;
        void SetDescription(const TDescription& value);
        TDescription& SetDescription(void);
    
        /// optional with default eAttlist_fidelity_specific
        /// typedef EAttlist_fidelity TFidelity
        ///  Check whether the Fidelity data member has been assigned a value.
        bool IsSetFidelity(void) const;
        /// Check whether it is safe or not to call GetFidelity method.
        bool CanGetFidelity(void) const;
        void ResetFidelity(void);
        void SetDefaultFidelity(void);
        TFidelity GetFidelity(void) const;
        void SetFidelity(TFidelity value);
        TFidelity& SetFidelity(void);
    
        /// optional
        /// typedef bool TIndependent
        ///  Check whether the Independent data member has been assigned a value.
        bool IsSetIndependent(void) const;
        /// Check whether it is safe or not to call GetIndependent method.
        bool CanGetIndependent(void) const;
        void ResetIndependent(void);
        TIndependent GetIndependent(void) const;
        void SetIndependent(TIndependent value);
        TIndependent& SetIndependent(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Name;
        string m_Description;
        EAttlist_fidelity m_Fidelity;
        bool m_Independent;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CSpecificity > > TSpecificity;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// optional
    /// typedef list< CRef< CSpecificity > > TSpecificity
    ///  Check whether the Specificity data member has been assigned a value.
    bool IsSetSpecificity(void) const;
    /// Check whether it is safe or not to call GetSpecificity method.
    bool CanGetSpecificity(void) const;
    void ResetSpecificity(void);
    const TSpecificity& GetSpecificity(void) const;
    TSpecificity& SetSpecificity(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSample_enzyme_Base(const CSample_enzyme_Base&);
    CSample_enzyme_Base& operator=(const CSample_enzyme_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CSpecificity > > m_Specificity;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CSample_enzyme_Base::C_Attlist::IsSetName(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CSample_enzyme_Base::C_Attlist::CanGetName(void) const
{
    return IsSetName();
}

inline
const CSample_enzyme_Base::C_Attlist::TName& CSample_enzyme_Base::C_Attlist::GetName(void) const
{
    if (!CanGetName()) {
        ThrowUnassigned(0);
    }
    return m_Name;
}

inline
void CSample_enzyme_Base::C_Attlist::SetName(const CSample_enzyme_Base::C_Attlist::TName& value)
{
    m_Name = value;
    m_set_State[0] |= 0x3;
}

inline
CSample_enzyme_Base::C_Attlist::TName& CSample_enzyme_Base::C_Attlist::SetName(void)
{
#ifdef _DEBUG
    if (!IsSetName()) {
        m_Name = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Name;
}

inline
bool CSample_enzyme_Base::C_Attlist::IsSetDescription(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CSample_enzyme_Base::C_Attlist::CanGetDescription(void) const
{
    return IsSetDescription();
}

inline
const CSample_enzyme_Base::C_Attlist::TDescription& CSample_enzyme_Base::C_Attlist::GetDescription(void) const
{
    if (!CanGetDescription()) {
        ThrowUnassigned(1);
    }
    return m_Description;
}

inline
void CSample_enzyme_Base::C_Attlist::SetDescription(const CSample_enzyme_Base::C_Attlist::TDescription& value)
{
    m_Description = value;
    m_set_State[0] |= 0xc;
}

inline
CSample_enzyme_Base::C_Attlist::TDescription& CSample_enzyme_Base::C_Attlist::SetDescription(void)
{
#ifdef _DEBUG
    if (!IsSetDescription()) {
        m_Description = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Description;
}

inline
bool CSample_enzyme_Base::C_Attlist::IsSetFidelity(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CSample_enzyme_Base::C_Attlist::CanGetFidelity(void) const
{
    return true;
}

inline
void CSample_enzyme_Base::C_Attlist::ResetFidelity(void)
{
    m_Fidelity = eAttlist_fidelity_specific;
    m_set_State[0] &= ~0x30;
}

inline
void CSample_enzyme_Base::C_Attlist::SetDefaultFidelity(void)
{
    ResetFidelity();
    m_set_State[0] |= 0x10;
}

inline
CSample_enzyme_Base::C_Attlist::TFidelity CSample_enzyme_Base::C_Attlist::GetFidelity(void) const
{
    return m_Fidelity;
}

inline
void CSample_enzyme_Base::C_Attlist::SetFidelity(CSample_enzyme_Base::C_Attlist::TFidelity value)
{
    m_Fidelity = value;
    m_set_State[0] |= 0x30;
}

inline
CSample_enzyme_Base::C_Attlist::TFidelity& CSample_enzyme_Base::C_Attlist::SetFidelity(void)
{
#ifdef _DEBUG
    if (!IsSetFidelity()) {
        memset(&m_Fidelity,UnassignedByte(),sizeof(m_Fidelity));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Fidelity;
}

inline
bool CSample_enzyme_Base::C_Attlist::IsSetIndependent(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CSample_enzyme_Base::C_Attlist::CanGetIndependent(void) const
{
    return IsSetIndependent();
}

inline
void CSample_enzyme_Base::C_Attlist::ResetIndependent(void)
{
    m_Independent = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CSample_enzyme_Base::C_Attlist::TIndependent CSample_enzyme_Base::C_Attlist::GetIndependent(void) const
{
    if (!CanGetIndependent()) {
        ThrowUnassigned(3);
    }
    return m_Independent;
}

inline
void CSample_enzyme_Base::C_Attlist::SetIndependent(CSample_enzyme_Base::C_Attlist::TIndependent value)
{
    m_Independent = value;
    m_set_State[0] |= 0xc0;
}

inline
CSample_enzyme_Base::C_Attlist::TIndependent& CSample_enzyme_Base::C_Attlist::SetIndependent(void)
{
#ifdef _DEBUG
    if (!IsSetIndependent()) {
        memset(&m_Independent,UnassignedByte(),sizeof(m_Independent));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Independent;
}

inline
bool CSample_enzyme_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CSample_enzyme_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CSample_enzyme_Base::TAttlist& CSample_enzyme_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CSample_enzyme_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CSample_enzyme_Base::TAttlist& CSample_enzyme_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CSample_enzyme_Base::IsSetSpecificity(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CSample_enzyme_Base::CanGetSpecificity(void) const
{
    return true;
}

inline
const CSample_enzyme_Base::TSpecificity& CSample_enzyme_Base::GetSpecificity(void) const
{
    return m_Specificity;
}

inline
CSample_enzyme_Base::TSpecificity& CSample_enzyme_Base::SetSpecificity(void)
{
    m_set_State[0] |= 0x4;
    return m_Specificity;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_SAMPLE_ENZYME_BASE_HPP
