/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Asapratio_lc_heavypeak_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ASAPRATIO_LC_HEAVYPEAK_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ASAPRATIO_LC_HEAVYPEAK_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_PEPXML_EXPORT CAsapratio_lc_heavypeak_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CAsapratio_lc_heavypeak_Base(void);
    // destructor
    virtual ~CAsapratio_lc_heavypeak_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TStatus;
        typedef int TLeft_valley;
        typedef int TRight_valley;
        typedef double TBackground;
        typedef double TArea;
        typedef double TArea_error;
        typedef double TTime;
        typedef double TTime_width;
        typedef string TIs_heavy;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TStatus
        ///  Check whether the Status data member has been assigned a value.
        bool IsSetStatus(void) const;
        /// Check whether it is safe or not to call GetStatus method.
        bool CanGetStatus(void) const;
        void ResetStatus(void);
        TStatus GetStatus(void) const;
        void SetStatus(TStatus value);
        TStatus& SetStatus(void);
    
        /// mandatory
        /// typedef int TLeft_valley
        ///  Check whether the Left_valley data member has been assigned a value.
        bool IsSetLeft_valley(void) const;
        /// Check whether it is safe or not to call GetLeft_valley method.
        bool CanGetLeft_valley(void) const;
        void ResetLeft_valley(void);
        TLeft_valley GetLeft_valley(void) const;
        void SetLeft_valley(TLeft_valley value);
        TLeft_valley& SetLeft_valley(void);
    
        /// mandatory
        /// typedef int TRight_valley
        ///  Check whether the Right_valley data member has been assigned a value.
        bool IsSetRight_valley(void) const;
        /// Check whether it is safe or not to call GetRight_valley method.
        bool CanGetRight_valley(void) const;
        void ResetRight_valley(void);
        TRight_valley GetRight_valley(void) const;
        void SetRight_valley(TRight_valley value);
        TRight_valley& SetRight_valley(void);
    
        /// mandatory
        /// typedef double TBackground
        ///  Check whether the Background data member has been assigned a value.
        bool IsSetBackground(void) const;
        /// Check whether it is safe or not to call GetBackground method.
        bool CanGetBackground(void) const;
        void ResetBackground(void);
        TBackground GetBackground(void) const;
        void SetBackground(TBackground value);
        TBackground& SetBackground(void);
    
        /// mandatory
        /// typedef double TArea
        ///  Check whether the Area data member has been assigned a value.
        bool IsSetArea(void) const;
        /// Check whether it is safe or not to call GetArea method.
        bool CanGetArea(void) const;
        void ResetArea(void);
        TArea GetArea(void) const;
        void SetArea(TArea value);
        TArea& SetArea(void);
    
        /// mandatory
        /// typedef double TArea_error
        ///  Check whether the Area_error data member has been assigned a value.
        bool IsSetArea_error(void) const;
        /// Check whether it is safe or not to call GetArea_error method.
        bool CanGetArea_error(void) const;
        void ResetArea_error(void);
        TArea_error GetArea_error(void) const;
        void SetArea_error(TArea_error value);
        TArea_error& SetArea_error(void);
    
        /// mandatory
        /// typedef double TTime
        ///  Check whether the Time data member has been assigned a value.
        bool IsSetTime(void) const;
        /// Check whether it is safe or not to call GetTime method.
        bool CanGetTime(void) const;
        void ResetTime(void);
        TTime GetTime(void) const;
        void SetTime(TTime value);
        TTime& SetTime(void);
    
        /// mandatory
        /// typedef double TTime_width
        ///  Check whether the Time_width data member has been assigned a value.
        bool IsSetTime_width(void) const;
        /// Check whether it is safe or not to call GetTime_width method.
        bool CanGetTime_width(void) const;
        void ResetTime_width(void);
        TTime_width GetTime_width(void) const;
        void SetTime_width(TTime_width value);
        TTime_width& SetTime_width(void);
    
        /// mandatory
        /// typedef string TIs_heavy
        ///  Check whether the Is_heavy data member has been assigned a value.
        bool IsSetIs_heavy(void) const;
        /// Check whether it is safe or not to call GetIs_heavy method.
        bool CanGetIs_heavy(void) const;
        void ResetIs_heavy(void);
        const TIs_heavy& GetIs_heavy(void) const;
        void SetIs_heavy(const TIs_heavy& value);
        TIs_heavy& SetIs_heavy(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        int m_Status;
        int m_Left_valley;
        int m_Right_valley;
        double m_Background;
        double m_Area;
        double m_Area_error;
        double m_Time;
        double m_Time_width;
        string m_Is_heavy;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Asapratio_lc_heavypeak data member has been assigned a value.
    bool IsSetAsapratio_lc_heavypeak(void) const;
    /// Check whether it is safe or not to call GetAsapratio_lc_heavypeak method.
    bool CanGetAsapratio_lc_heavypeak(void) const;
    void ResetAsapratio_lc_heavypeak(void);
    void SetAsapratio_lc_heavypeak(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CAsapratio_lc_heavypeak_Base(const CAsapratio_lc_heavypeak_Base&);
    CAsapratio_lc_heavypeak_Base& operator=(const CAsapratio_lc_heavypeak_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetStatus(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetStatus(void) const
{
    return IsSetStatus();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetStatus(void)
{
    m_Status = 0;
    m_set_State[0] &= ~0x3;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TStatus CAsapratio_lc_heavypeak_Base::C_Attlist::GetStatus(void) const
{
    if (!CanGetStatus()) {
        ThrowUnassigned(0);
    }
    return m_Status;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetStatus(CAsapratio_lc_heavypeak_Base::C_Attlist::TStatus value)
{
    m_Status = value;
    m_set_State[0] |= 0x3;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TStatus& CAsapratio_lc_heavypeak_Base::C_Attlist::SetStatus(void)
{
#ifdef _DEBUG
    if (!IsSetStatus()) {
        memset(&m_Status,UnassignedByte(),sizeof(m_Status));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Status;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetLeft_valley(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetLeft_valley(void) const
{
    return IsSetLeft_valley();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetLeft_valley(void)
{
    m_Left_valley = 0;
    m_set_State[0] &= ~0xc;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TLeft_valley CAsapratio_lc_heavypeak_Base::C_Attlist::GetLeft_valley(void) const
{
    if (!CanGetLeft_valley()) {
        ThrowUnassigned(1);
    }
    return m_Left_valley;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetLeft_valley(CAsapratio_lc_heavypeak_Base::C_Attlist::TLeft_valley value)
{
    m_Left_valley = value;
    m_set_State[0] |= 0xc;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TLeft_valley& CAsapratio_lc_heavypeak_Base::C_Attlist::SetLeft_valley(void)
{
#ifdef _DEBUG
    if (!IsSetLeft_valley()) {
        memset(&m_Left_valley,UnassignedByte(),sizeof(m_Left_valley));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Left_valley;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetRight_valley(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetRight_valley(void) const
{
    return IsSetRight_valley();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetRight_valley(void)
{
    m_Right_valley = 0;
    m_set_State[0] &= ~0x30;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TRight_valley CAsapratio_lc_heavypeak_Base::C_Attlist::GetRight_valley(void) const
{
    if (!CanGetRight_valley()) {
        ThrowUnassigned(2);
    }
    return m_Right_valley;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetRight_valley(CAsapratio_lc_heavypeak_Base::C_Attlist::TRight_valley value)
{
    m_Right_valley = value;
    m_set_State[0] |= 0x30;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TRight_valley& CAsapratio_lc_heavypeak_Base::C_Attlist::SetRight_valley(void)
{
#ifdef _DEBUG
    if (!IsSetRight_valley()) {
        memset(&m_Right_valley,UnassignedByte(),sizeof(m_Right_valley));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Right_valley;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetBackground(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetBackground(void) const
{
    return IsSetBackground();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetBackground(void)
{
    m_Background = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TBackground CAsapratio_lc_heavypeak_Base::C_Attlist::GetBackground(void) const
{
    if (!CanGetBackground()) {
        ThrowUnassigned(3);
    }
    return m_Background;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetBackground(CAsapratio_lc_heavypeak_Base::C_Attlist::TBackground value)
{
    m_Background = value;
    m_set_State[0] |= 0xc0;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TBackground& CAsapratio_lc_heavypeak_Base::C_Attlist::SetBackground(void)
{
#ifdef _DEBUG
    if (!IsSetBackground()) {
        memset(&m_Background,UnassignedByte(),sizeof(m_Background));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Background;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetArea(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetArea(void) const
{
    return IsSetArea();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetArea(void)
{
    m_Area = 0;
    m_set_State[0] &= ~0x300;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TArea CAsapratio_lc_heavypeak_Base::C_Attlist::GetArea(void) const
{
    if (!CanGetArea()) {
        ThrowUnassigned(4);
    }
    return m_Area;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetArea(CAsapratio_lc_heavypeak_Base::C_Attlist::TArea value)
{
    m_Area = value;
    m_set_State[0] |= 0x300;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TArea& CAsapratio_lc_heavypeak_Base::C_Attlist::SetArea(void)
{
#ifdef _DEBUG
    if (!IsSetArea()) {
        memset(&m_Area,UnassignedByte(),sizeof(m_Area));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Area;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetArea_error(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetArea_error(void) const
{
    return IsSetArea_error();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetArea_error(void)
{
    m_Area_error = 0;
    m_set_State[0] &= ~0xc00;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TArea_error CAsapratio_lc_heavypeak_Base::C_Attlist::GetArea_error(void) const
{
    if (!CanGetArea_error()) {
        ThrowUnassigned(5);
    }
    return m_Area_error;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetArea_error(CAsapratio_lc_heavypeak_Base::C_Attlist::TArea_error value)
{
    m_Area_error = value;
    m_set_State[0] |= 0xc00;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TArea_error& CAsapratio_lc_heavypeak_Base::C_Attlist::SetArea_error(void)
{
#ifdef _DEBUG
    if (!IsSetArea_error()) {
        memset(&m_Area_error,UnassignedByte(),sizeof(m_Area_error));
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Area_error;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetTime(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetTime(void) const
{
    return IsSetTime();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetTime(void)
{
    m_Time = 0;
    m_set_State[0] &= ~0x3000;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TTime CAsapratio_lc_heavypeak_Base::C_Attlist::GetTime(void) const
{
    if (!CanGetTime()) {
        ThrowUnassigned(6);
    }
    return m_Time;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetTime(CAsapratio_lc_heavypeak_Base::C_Attlist::TTime value)
{
    m_Time = value;
    m_set_State[0] |= 0x3000;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TTime& CAsapratio_lc_heavypeak_Base::C_Attlist::SetTime(void)
{
#ifdef _DEBUG
    if (!IsSetTime()) {
        memset(&m_Time,UnassignedByte(),sizeof(m_Time));
    }
#endif
    m_set_State[0] |= 0x1000;
    return m_Time;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetTime_width(void) const
{
    return ((m_set_State[0] & 0xc000) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetTime_width(void) const
{
    return IsSetTime_width();
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::ResetTime_width(void)
{
    m_Time_width = 0;
    m_set_State[0] &= ~0xc000;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TTime_width CAsapratio_lc_heavypeak_Base::C_Attlist::GetTime_width(void) const
{
    if (!CanGetTime_width()) {
        ThrowUnassigned(7);
    }
    return m_Time_width;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetTime_width(CAsapratio_lc_heavypeak_Base::C_Attlist::TTime_width value)
{
    m_Time_width = value;
    m_set_State[0] |= 0xc000;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TTime_width& CAsapratio_lc_heavypeak_Base::C_Attlist::SetTime_width(void)
{
#ifdef _DEBUG
    if (!IsSetTime_width()) {
        memset(&m_Time_width,UnassignedByte(),sizeof(m_Time_width));
    }
#endif
    m_set_State[0] |= 0x4000;
    return m_Time_width;
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::IsSetIs_heavy(void) const
{
    return ((m_set_State[0] & 0x30000) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::C_Attlist::CanGetIs_heavy(void) const
{
    return IsSetIs_heavy();
}

inline
const CAsapratio_lc_heavypeak_Base::C_Attlist::TIs_heavy& CAsapratio_lc_heavypeak_Base::C_Attlist::GetIs_heavy(void) const
{
    if (!CanGetIs_heavy()) {
        ThrowUnassigned(8);
    }
    return m_Is_heavy;
}

inline
void CAsapratio_lc_heavypeak_Base::C_Attlist::SetIs_heavy(const CAsapratio_lc_heavypeak_Base::C_Attlist::TIs_heavy& value)
{
    m_Is_heavy = value;
    m_set_State[0] |= 0x30000;
}

inline
CAsapratio_lc_heavypeak_Base::C_Attlist::TIs_heavy& CAsapratio_lc_heavypeak_Base::C_Attlist::SetIs_heavy(void)
{
#ifdef _DEBUG
    if (!IsSetIs_heavy()) {
        m_Is_heavy = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x10000;
    return m_Is_heavy;
}

inline
bool CAsapratio_lc_heavypeak_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CAsapratio_lc_heavypeak_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CAsapratio_lc_heavypeak_Base::TAttlist& CAsapratio_lc_heavypeak_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CAsapratio_lc_heavypeak_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CAsapratio_lc_heavypeak_Base::TAttlist& CAsapratio_lc_heavypeak_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetAsapratio_lc_heavypeak();
    return (*m_Attlist);
}

inline
bool CAsapratio_lc_heavypeak_Base::IsSetAsapratio_lc_heavypeak(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAsapratio_lc_heavypeak_Base::CanGetAsapratio_lc_heavypeak(void) const
{
    return false;
}

inline
void CAsapratio_lc_heavypeak_Base::ResetAsapratio_lc_heavypeak(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CAsapratio_lc_heavypeak_Base::SetAsapratio_lc_heavypeak(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ASAPRATIO_LC_HEAVYPEAK_BASE_HPP
