/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Analysis_result_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ANALYSIS_RESULT_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ANALYSIS_RESULT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CAsapratio_result;
class CPeptideprophet_result;
class CXpressratio_result;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_PEPXML_EXPORT CAnalysis_result_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CAnalysis_result_Base(void);
    // destructor
    virtual ~CAnalysis_result_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TAnalysis;
        typedef int TId;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TAnalysis
        ///  Check whether the Analysis data member has been assigned a value.
        bool IsSetAnalysis(void) const;
        /// Check whether it is safe or not to call GetAnalysis method.
        bool CanGetAnalysis(void) const;
        void ResetAnalysis(void);
        const TAnalysis& GetAnalysis(void) const;
        void SetAnalysis(const TAnalysis& value);
        TAnalysis& SetAnalysis(void);
    
        /// optional with default 1
        /// typedef int TId
        ///  Check whether the Id data member has been assigned a value.
        bool IsSetId(void) const;
        /// Check whether it is safe or not to call GetId method.
        bool CanGetId(void) const;
        void ResetId(void);
        void SetDefaultId(void);
        TId GetId(void) const;
        void SetId(TId value);
        TId& SetId(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Analysis;
        int m_Id;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CPeptideprophet_result > > TPeptideprophet_result;
    typedef list< CRef< CAsapratio_result > > TAsapratio_result;
    typedef list< CRef< CXpressratio_result > > TXpressratio_result;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// optional
    /// typedef list< CRef< CPeptideprophet_result > > TPeptideprophet_result
    ///  Check whether the Peptideprophet_result data member has been assigned a value.
    bool IsSetPeptideprophet_result(void) const;
    /// Check whether it is safe or not to call GetPeptideprophet_result method.
    bool CanGetPeptideprophet_result(void) const;
    void ResetPeptideprophet_result(void);
    const TPeptideprophet_result& GetPeptideprophet_result(void) const;
    TPeptideprophet_result& SetPeptideprophet_result(void);

    /// optional
    /// typedef list< CRef< CAsapratio_result > > TAsapratio_result
    ///  Check whether the Asapratio_result data member has been assigned a value.
    bool IsSetAsapratio_result(void) const;
    /// Check whether it is safe or not to call GetAsapratio_result method.
    bool CanGetAsapratio_result(void) const;
    void ResetAsapratio_result(void);
    const TAsapratio_result& GetAsapratio_result(void) const;
    TAsapratio_result& SetAsapratio_result(void);

    /// optional
    /// typedef list< CRef< CXpressratio_result > > TXpressratio_result
    ///  Check whether the Xpressratio_result data member has been assigned a value.
    bool IsSetXpressratio_result(void) const;
    /// Check whether it is safe or not to call GetXpressratio_result method.
    bool CanGetXpressratio_result(void) const;
    void ResetXpressratio_result(void);
    const TXpressratio_result& GetXpressratio_result(void) const;
    TXpressratio_result& SetXpressratio_result(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CAnalysis_result_Base(const CAnalysis_result_Base&);
    CAnalysis_result_Base& operator=(const CAnalysis_result_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CPeptideprophet_result > > m_Peptideprophet_result;
    list< CRef< CAsapratio_result > > m_Asapratio_result;
    list< CRef< CXpressratio_result > > m_Xpressratio_result;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CAnalysis_result_Base::C_Attlist::IsSetAnalysis(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CAnalysis_result_Base::C_Attlist::CanGetAnalysis(void) const
{
    return IsSetAnalysis();
}

inline
const CAnalysis_result_Base::C_Attlist::TAnalysis& CAnalysis_result_Base::C_Attlist::GetAnalysis(void) const
{
    if (!CanGetAnalysis()) {
        ThrowUnassigned(0);
    }
    return m_Analysis;
}

inline
void CAnalysis_result_Base::C_Attlist::SetAnalysis(const CAnalysis_result_Base::C_Attlist::TAnalysis& value)
{
    m_Analysis = value;
    m_set_State[0] |= 0x3;
}

inline
CAnalysis_result_Base::C_Attlist::TAnalysis& CAnalysis_result_Base::C_Attlist::SetAnalysis(void)
{
#ifdef _DEBUG
    if (!IsSetAnalysis()) {
        m_Analysis = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Analysis;
}

inline
bool CAnalysis_result_Base::C_Attlist::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAnalysis_result_Base::C_Attlist::CanGetId(void) const
{
    return true;
}

inline
void CAnalysis_result_Base::C_Attlist::ResetId(void)
{
    m_Id = 1;
    m_set_State[0] &= ~0xc;
}

inline
void CAnalysis_result_Base::C_Attlist::SetDefaultId(void)
{
    ResetId();
    m_set_State[0] |= 0x4;
}

inline
CAnalysis_result_Base::C_Attlist::TId CAnalysis_result_Base::C_Attlist::GetId(void) const
{
    return m_Id;
}

inline
void CAnalysis_result_Base::C_Attlist::SetId(CAnalysis_result_Base::C_Attlist::TId value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
CAnalysis_result_Base::C_Attlist::TId& CAnalysis_result_Base::C_Attlist::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,UnassignedByte(),sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CAnalysis_result_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CAnalysis_result_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CAnalysis_result_Base::TAttlist& CAnalysis_result_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CAnalysis_result_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CAnalysis_result_Base::TAttlist& CAnalysis_result_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CAnalysis_result_Base::IsSetPeptideprophet_result(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAnalysis_result_Base::CanGetPeptideprophet_result(void) const
{
    return true;
}

inline
const CAnalysis_result_Base::TPeptideprophet_result& CAnalysis_result_Base::GetPeptideprophet_result(void) const
{
    return m_Peptideprophet_result;
}

inline
CAnalysis_result_Base::TPeptideprophet_result& CAnalysis_result_Base::SetPeptideprophet_result(void)
{
    m_set_State[0] |= 0x4;
    return m_Peptideprophet_result;
}

inline
bool CAnalysis_result_Base::IsSetAsapratio_result(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CAnalysis_result_Base::CanGetAsapratio_result(void) const
{
    return true;
}

inline
const CAnalysis_result_Base::TAsapratio_result& CAnalysis_result_Base::GetAsapratio_result(void) const
{
    return m_Asapratio_result;
}

inline
CAnalysis_result_Base::TAsapratio_result& CAnalysis_result_Base::SetAsapratio_result(void)
{
    m_set_State[0] |= 0x10;
    return m_Asapratio_result;
}

inline
bool CAnalysis_result_Base::IsSetXpressratio_result(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CAnalysis_result_Base::CanGetXpressratio_result(void) const
{
    return true;
}

inline
const CAnalysis_result_Base::TXpressratio_result& CAnalysis_result_Base::GetXpressratio_result(void) const
{
    return m_Xpressratio_result;
}

inline
CAnalysis_result_Base::TXpressratio_result& CAnalysis_result_Base::SetXpressratio_result(void)
{
    m_set_State[0] |= 0x40;
    return m_Xpressratio_result;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ANALYSIS_RESULT_BASE_HPP
