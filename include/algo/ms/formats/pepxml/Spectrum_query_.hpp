/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Spectrum_query_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_SPECTRUM_QUERY_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_SPECTRUM_QUERY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CSearch_result;


// generated classes

/////////////////////////////////////////////////////////////////////////////
///MS/MS spectrum, precursor ion charge and mass 
class NCBI_PEPXML_EXPORT CSpectrum_query_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CSpectrum_query_Base(void);
    // destructor
    virtual ~CSpectrum_query_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TSpectrum;
        typedef int TStart_scan;
        typedef int TEnd_scan;
        typedef double TRetention_time_sec;
        typedef double TPrecursor_neutral_mass;
        typedef int TAssumed_charge;
        typedef string TSearch_specification;
        typedef int TIndex;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TSpectrum
        ///  Check whether the Spectrum data member has been assigned a value.
        bool IsSetSpectrum(void) const;
        /// Check whether it is safe or not to call GetSpectrum method.
        bool CanGetSpectrum(void) const;
        void ResetSpectrum(void);
        const TSpectrum& GetSpectrum(void) const;
        void SetSpectrum(const TSpectrum& value);
        TSpectrum& SetSpectrum(void);
    
        /// mandatory
        /// typedef int TStart_scan
        ///  Check whether the Start_scan data member has been assigned a value.
        bool IsSetStart_scan(void) const;
        /// Check whether it is safe or not to call GetStart_scan method.
        bool CanGetStart_scan(void) const;
        void ResetStart_scan(void);
        TStart_scan GetStart_scan(void) const;
        void SetStart_scan(TStart_scan value);
        TStart_scan& SetStart_scan(void);
    
        /// mandatory
        /// typedef int TEnd_scan
        ///  Check whether the End_scan data member has been assigned a value.
        bool IsSetEnd_scan(void) const;
        /// Check whether it is safe or not to call GetEnd_scan method.
        bool CanGetEnd_scan(void) const;
        void ResetEnd_scan(void);
        TEnd_scan GetEnd_scan(void) const;
        void SetEnd_scan(TEnd_scan value);
        TEnd_scan& SetEnd_scan(void);
    
        /// optional
        /// typedef double TRetention_time_sec
        ///  Check whether the Retention_time_sec data member has been assigned a value.
        bool IsSetRetention_time_sec(void) const;
        /// Check whether it is safe or not to call GetRetention_time_sec method.
        bool CanGetRetention_time_sec(void) const;
        void ResetRetention_time_sec(void);
        TRetention_time_sec GetRetention_time_sec(void) const;
        void SetRetention_time_sec(TRetention_time_sec value);
        TRetention_time_sec& SetRetention_time_sec(void);
    
        /// mandatory
        /// typedef double TPrecursor_neutral_mass
        ///  Check whether the Precursor_neutral_mass data member has been assigned a value.
        bool IsSetPrecursor_neutral_mass(void) const;
        /// Check whether it is safe or not to call GetPrecursor_neutral_mass method.
        bool CanGetPrecursor_neutral_mass(void) const;
        void ResetPrecursor_neutral_mass(void);
        TPrecursor_neutral_mass GetPrecursor_neutral_mass(void) const;
        void SetPrecursor_neutral_mass(TPrecursor_neutral_mass value);
        TPrecursor_neutral_mass& SetPrecursor_neutral_mass(void);
    
        /// mandatory
        /// typedef int TAssumed_charge
        ///  Check whether the Assumed_charge data member has been assigned a value.
        bool IsSetAssumed_charge(void) const;
        /// Check whether it is safe or not to call GetAssumed_charge method.
        bool CanGetAssumed_charge(void) const;
        void ResetAssumed_charge(void);
        TAssumed_charge GetAssumed_charge(void) const;
        void SetAssumed_charge(TAssumed_charge value);
        TAssumed_charge& SetAssumed_charge(void);
    
        /// optional
        /// typedef string TSearch_specification
        ///  Check whether the Search_specification data member has been assigned a value.
        bool IsSetSearch_specification(void) const;
        /// Check whether it is safe or not to call GetSearch_specification method.
        bool CanGetSearch_specification(void) const;
        void ResetSearch_specification(void);
        const TSearch_specification& GetSearch_specification(void) const;
        void SetSearch_specification(const TSearch_specification& value);
        TSearch_specification& SetSearch_specification(void);
    
        /// mandatory
        /// typedef int TIndex
        ///  Check whether the Index data member has been assigned a value.
        bool IsSetIndex(void) const;
        /// Check whether it is safe or not to call GetIndex method.
        bool CanGetIndex(void) const;
        void ResetIndex(void);
        TIndex GetIndex(void) const;
        void SetIndex(TIndex value);
        TIndex& SetIndex(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Spectrum;
        int m_Start_scan;
        int m_End_scan;
        double m_Retention_time_sec;
        double m_Precursor_neutral_mass;
        int m_Assumed_charge;
        string m_Search_specification;
        int m_Index;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CSearch_result > > TSearch_result;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// optional
    /// typedef list< CRef< CSearch_result > > TSearch_result
    ///  Check whether the Search_result data member has been assigned a value.
    bool IsSetSearch_result(void) const;
    /// Check whether it is safe or not to call GetSearch_result method.
    bool CanGetSearch_result(void) const;
    void ResetSearch_result(void);
    const TSearch_result& GetSearch_result(void) const;
    TSearch_result& SetSearch_result(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSpectrum_query_Base(const CSpectrum_query_Base&);
    CSpectrum_query_Base& operator=(const CSpectrum_query_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CSearch_result > > m_Search_result;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CSpectrum_query_Base::C_Attlist::IsSetSpectrum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetSpectrum(void) const
{
    return IsSetSpectrum();
}

inline
const CSpectrum_query_Base::C_Attlist::TSpectrum& CSpectrum_query_Base::C_Attlist::GetSpectrum(void) const
{
    if (!CanGetSpectrum()) {
        ThrowUnassigned(0);
    }
    return m_Spectrum;
}

inline
void CSpectrum_query_Base::C_Attlist::SetSpectrum(const CSpectrum_query_Base::C_Attlist::TSpectrum& value)
{
    m_Spectrum = value;
    m_set_State[0] |= 0x3;
}

inline
CSpectrum_query_Base::C_Attlist::TSpectrum& CSpectrum_query_Base::C_Attlist::SetSpectrum(void)
{
#ifdef _DEBUG
    if (!IsSetSpectrum()) {
        m_Spectrum = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Spectrum;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetStart_scan(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetStart_scan(void) const
{
    return IsSetStart_scan();
}

inline
void CSpectrum_query_Base::C_Attlist::ResetStart_scan(void)
{
    m_Start_scan = 0;
    m_set_State[0] &= ~0xc;
}

inline
CSpectrum_query_Base::C_Attlist::TStart_scan CSpectrum_query_Base::C_Attlist::GetStart_scan(void) const
{
    if (!CanGetStart_scan()) {
        ThrowUnassigned(1);
    }
    return m_Start_scan;
}

inline
void CSpectrum_query_Base::C_Attlist::SetStart_scan(CSpectrum_query_Base::C_Attlist::TStart_scan value)
{
    m_Start_scan = value;
    m_set_State[0] |= 0xc;
}

inline
CSpectrum_query_Base::C_Attlist::TStart_scan& CSpectrum_query_Base::C_Attlist::SetStart_scan(void)
{
#ifdef _DEBUG
    if (!IsSetStart_scan()) {
        memset(&m_Start_scan,UnassignedByte(),sizeof(m_Start_scan));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Start_scan;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetEnd_scan(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetEnd_scan(void) const
{
    return IsSetEnd_scan();
}

inline
void CSpectrum_query_Base::C_Attlist::ResetEnd_scan(void)
{
    m_End_scan = 0;
    m_set_State[0] &= ~0x30;
}

inline
CSpectrum_query_Base::C_Attlist::TEnd_scan CSpectrum_query_Base::C_Attlist::GetEnd_scan(void) const
{
    if (!CanGetEnd_scan()) {
        ThrowUnassigned(2);
    }
    return m_End_scan;
}

inline
void CSpectrum_query_Base::C_Attlist::SetEnd_scan(CSpectrum_query_Base::C_Attlist::TEnd_scan value)
{
    m_End_scan = value;
    m_set_State[0] |= 0x30;
}

inline
CSpectrum_query_Base::C_Attlist::TEnd_scan& CSpectrum_query_Base::C_Attlist::SetEnd_scan(void)
{
#ifdef _DEBUG
    if (!IsSetEnd_scan()) {
        memset(&m_End_scan,UnassignedByte(),sizeof(m_End_scan));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_End_scan;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetRetention_time_sec(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetRetention_time_sec(void) const
{
    return IsSetRetention_time_sec();
}

inline
void CSpectrum_query_Base::C_Attlist::ResetRetention_time_sec(void)
{
    m_Retention_time_sec = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CSpectrum_query_Base::C_Attlist::TRetention_time_sec CSpectrum_query_Base::C_Attlist::GetRetention_time_sec(void) const
{
    if (!CanGetRetention_time_sec()) {
        ThrowUnassigned(3);
    }
    return m_Retention_time_sec;
}

inline
void CSpectrum_query_Base::C_Attlist::SetRetention_time_sec(CSpectrum_query_Base::C_Attlist::TRetention_time_sec value)
{
    m_Retention_time_sec = value;
    m_set_State[0] |= 0xc0;
}

inline
CSpectrum_query_Base::C_Attlist::TRetention_time_sec& CSpectrum_query_Base::C_Attlist::SetRetention_time_sec(void)
{
#ifdef _DEBUG
    if (!IsSetRetention_time_sec()) {
        memset(&m_Retention_time_sec,UnassignedByte(),sizeof(m_Retention_time_sec));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Retention_time_sec;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetPrecursor_neutral_mass(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetPrecursor_neutral_mass(void) const
{
    return IsSetPrecursor_neutral_mass();
}

inline
void CSpectrum_query_Base::C_Attlist::ResetPrecursor_neutral_mass(void)
{
    m_Precursor_neutral_mass = 0;
    m_set_State[0] &= ~0x300;
}

inline
CSpectrum_query_Base::C_Attlist::TPrecursor_neutral_mass CSpectrum_query_Base::C_Attlist::GetPrecursor_neutral_mass(void) const
{
    if (!CanGetPrecursor_neutral_mass()) {
        ThrowUnassigned(4);
    }
    return m_Precursor_neutral_mass;
}

inline
void CSpectrum_query_Base::C_Attlist::SetPrecursor_neutral_mass(CSpectrum_query_Base::C_Attlist::TPrecursor_neutral_mass value)
{
    m_Precursor_neutral_mass = value;
    m_set_State[0] |= 0x300;
}

inline
CSpectrum_query_Base::C_Attlist::TPrecursor_neutral_mass& CSpectrum_query_Base::C_Attlist::SetPrecursor_neutral_mass(void)
{
#ifdef _DEBUG
    if (!IsSetPrecursor_neutral_mass()) {
        memset(&m_Precursor_neutral_mass,UnassignedByte(),sizeof(m_Precursor_neutral_mass));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Precursor_neutral_mass;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetAssumed_charge(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetAssumed_charge(void) const
{
    return IsSetAssumed_charge();
}

inline
void CSpectrum_query_Base::C_Attlist::ResetAssumed_charge(void)
{
    m_Assumed_charge = 0;
    m_set_State[0] &= ~0xc00;
}

inline
CSpectrum_query_Base::C_Attlist::TAssumed_charge CSpectrum_query_Base::C_Attlist::GetAssumed_charge(void) const
{
    if (!CanGetAssumed_charge()) {
        ThrowUnassigned(5);
    }
    return m_Assumed_charge;
}

inline
void CSpectrum_query_Base::C_Attlist::SetAssumed_charge(CSpectrum_query_Base::C_Attlist::TAssumed_charge value)
{
    m_Assumed_charge = value;
    m_set_State[0] |= 0xc00;
}

inline
CSpectrum_query_Base::C_Attlist::TAssumed_charge& CSpectrum_query_Base::C_Attlist::SetAssumed_charge(void)
{
#ifdef _DEBUG
    if (!IsSetAssumed_charge()) {
        memset(&m_Assumed_charge,UnassignedByte(),sizeof(m_Assumed_charge));
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Assumed_charge;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetSearch_specification(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetSearch_specification(void) const
{
    return IsSetSearch_specification();
}

inline
const CSpectrum_query_Base::C_Attlist::TSearch_specification& CSpectrum_query_Base::C_Attlist::GetSearch_specification(void) const
{
    if (!CanGetSearch_specification()) {
        ThrowUnassigned(6);
    }
    return m_Search_specification;
}

inline
void CSpectrum_query_Base::C_Attlist::SetSearch_specification(const CSpectrum_query_Base::C_Attlist::TSearch_specification& value)
{
    m_Search_specification = value;
    m_set_State[0] |= 0x3000;
}

inline
CSpectrum_query_Base::C_Attlist::TSearch_specification& CSpectrum_query_Base::C_Attlist::SetSearch_specification(void)
{
#ifdef _DEBUG
    if (!IsSetSearch_specification()) {
        m_Search_specification = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1000;
    return m_Search_specification;
}

inline
bool CSpectrum_query_Base::C_Attlist::IsSetIndex(void) const
{
    return ((m_set_State[0] & 0xc000) != 0);
}

inline
bool CSpectrum_query_Base::C_Attlist::CanGetIndex(void) const
{
    return IsSetIndex();
}

inline
void CSpectrum_query_Base::C_Attlist::ResetIndex(void)
{
    m_Index = 0;
    m_set_State[0] &= ~0xc000;
}

inline
CSpectrum_query_Base::C_Attlist::TIndex CSpectrum_query_Base::C_Attlist::GetIndex(void) const
{
    if (!CanGetIndex()) {
        ThrowUnassigned(7);
    }
    return m_Index;
}

inline
void CSpectrum_query_Base::C_Attlist::SetIndex(CSpectrum_query_Base::C_Attlist::TIndex value)
{
    m_Index = value;
    m_set_State[0] |= 0xc000;
}

inline
CSpectrum_query_Base::C_Attlist::TIndex& CSpectrum_query_Base::C_Attlist::SetIndex(void)
{
#ifdef _DEBUG
    if (!IsSetIndex()) {
        memset(&m_Index,UnassignedByte(),sizeof(m_Index));
    }
#endif
    m_set_State[0] |= 0x4000;
    return m_Index;
}

inline
bool CSpectrum_query_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CSpectrum_query_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CSpectrum_query_Base::TAttlist& CSpectrum_query_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CSpectrum_query_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CSpectrum_query_Base::TAttlist& CSpectrum_query_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CSpectrum_query_Base::IsSetSearch_result(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CSpectrum_query_Base::CanGetSearch_result(void) const
{
    return true;
}

inline
const CSpectrum_query_Base::TSearch_result& CSpectrum_query_Base::GetSearch_result(void) const
{
    return m_Search_result;
}

inline
CSpectrum_query_Base::TSearch_result& CSpectrum_query_Base::SetSearch_result(void)
{
    m_set_State[0] |= 0x4;
    return m_Search_result;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_SPECTRUM_QUERY_BASE_HPP
