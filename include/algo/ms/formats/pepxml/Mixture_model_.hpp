/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Mixture_model_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_MIXTURE_MODEL_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_MIXTURE_MODEL_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CMixturemodel_distribution;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_PEPXML_EXPORT CMixture_model_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CMixture_model_Base(void);
    // destructor
    virtual ~CMixture_model_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TPrecursor_ion_charge;
        typedef string TComments;
        typedef double TPrior_probability;
        typedef string TEst_tot_correct;
        typedef string TTot_num_spectra;
        typedef string TNum_iterations;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TPrecursor_ion_charge
        ///  Check whether the Precursor_ion_charge data member has been assigned a value.
        bool IsSetPrecursor_ion_charge(void) const;
        /// Check whether it is safe or not to call GetPrecursor_ion_charge method.
        bool CanGetPrecursor_ion_charge(void) const;
        void ResetPrecursor_ion_charge(void);
        TPrecursor_ion_charge GetPrecursor_ion_charge(void) const;
        void SetPrecursor_ion_charge(TPrecursor_ion_charge value);
        TPrecursor_ion_charge& SetPrecursor_ion_charge(void);
    
        /// mandatory
        /// typedef string TComments
        ///  Check whether the Comments data member has been assigned a value.
        bool IsSetComments(void) const;
        /// Check whether it is safe or not to call GetComments method.
        bool CanGetComments(void) const;
        void ResetComments(void);
        const TComments& GetComments(void) const;
        void SetComments(const TComments& value);
        TComments& SetComments(void);
    
        /// mandatory
        /// typedef double TPrior_probability
        ///  Check whether the Prior_probability data member has been assigned a value.
        bool IsSetPrior_probability(void) const;
        /// Check whether it is safe or not to call GetPrior_probability method.
        bool CanGetPrior_probability(void) const;
        void ResetPrior_probability(void);
        TPrior_probability GetPrior_probability(void) const;
        void SetPrior_probability(TPrior_probability value);
        TPrior_probability& SetPrior_probability(void);
    
        /// mandatory
        /// typedef string TEst_tot_correct
        ///  Check whether the Est_tot_correct data member has been assigned a value.
        bool IsSetEst_tot_correct(void) const;
        /// Check whether it is safe or not to call GetEst_tot_correct method.
        bool CanGetEst_tot_correct(void) const;
        void ResetEst_tot_correct(void);
        const TEst_tot_correct& GetEst_tot_correct(void) const;
        void SetEst_tot_correct(const TEst_tot_correct& value);
        TEst_tot_correct& SetEst_tot_correct(void);
    
        /// mandatory
        /// typedef string TTot_num_spectra
        ///  Check whether the Tot_num_spectra data member has been assigned a value.
        bool IsSetTot_num_spectra(void) const;
        /// Check whether it is safe or not to call GetTot_num_spectra method.
        bool CanGetTot_num_spectra(void) const;
        void ResetTot_num_spectra(void);
        const TTot_num_spectra& GetTot_num_spectra(void) const;
        void SetTot_num_spectra(const TTot_num_spectra& value);
        TTot_num_spectra& SetTot_num_spectra(void);
    
        /// mandatory
        /// typedef string TNum_iterations
        ///  Check whether the Num_iterations data member has been assigned a value.
        bool IsSetNum_iterations(void) const;
        /// Check whether it is safe or not to call GetNum_iterations method.
        bool CanGetNum_iterations(void) const;
        void ResetNum_iterations(void);
        const TNum_iterations& GetNum_iterations(void) const;
        void SetNum_iterations(const TNum_iterations& value);
        TNum_iterations& SetNum_iterations(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        int m_Precursor_ion_charge;
        string m_Comments;
        double m_Prior_probability;
        string m_Est_tot_correct;
        string m_Tot_num_spectra;
        string m_Num_iterations;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CMixturemodel_distribution > > TMixturemodel_distribution;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef list< CRef< CMixturemodel_distribution > > TMixturemodel_distribution
    ///  Check whether the Mixturemodel_distribution data member has been assigned a value.
    bool IsSetMixturemodel_distribution(void) const;
    /// Check whether it is safe or not to call GetMixturemodel_distribution method.
    bool CanGetMixturemodel_distribution(void) const;
    void ResetMixturemodel_distribution(void);
    const TMixturemodel_distribution& GetMixturemodel_distribution(void) const;
    TMixturemodel_distribution& SetMixturemodel_distribution(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CMixture_model_Base(const CMixture_model_Base&);
    CMixture_model_Base& operator=(const CMixture_model_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CMixturemodel_distribution > > m_Mixturemodel_distribution;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CMixture_model_Base::C_Attlist::IsSetPrecursor_ion_charge(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CMixture_model_Base::C_Attlist::CanGetPrecursor_ion_charge(void) const
{
    return IsSetPrecursor_ion_charge();
}

inline
void CMixture_model_Base::C_Attlist::ResetPrecursor_ion_charge(void)
{
    m_Precursor_ion_charge = 0;
    m_set_State[0] &= ~0x3;
}

inline
CMixture_model_Base::C_Attlist::TPrecursor_ion_charge CMixture_model_Base::C_Attlist::GetPrecursor_ion_charge(void) const
{
    if (!CanGetPrecursor_ion_charge()) {
        ThrowUnassigned(0);
    }
    return m_Precursor_ion_charge;
}

inline
void CMixture_model_Base::C_Attlist::SetPrecursor_ion_charge(CMixture_model_Base::C_Attlist::TPrecursor_ion_charge value)
{
    m_Precursor_ion_charge = value;
    m_set_State[0] |= 0x3;
}

inline
CMixture_model_Base::C_Attlist::TPrecursor_ion_charge& CMixture_model_Base::C_Attlist::SetPrecursor_ion_charge(void)
{
#ifdef _DEBUG
    if (!IsSetPrecursor_ion_charge()) {
        memset(&m_Precursor_ion_charge,UnassignedByte(),sizeof(m_Precursor_ion_charge));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Precursor_ion_charge;
}

inline
bool CMixture_model_Base::C_Attlist::IsSetComments(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CMixture_model_Base::C_Attlist::CanGetComments(void) const
{
    return IsSetComments();
}

inline
const CMixture_model_Base::C_Attlist::TComments& CMixture_model_Base::C_Attlist::GetComments(void) const
{
    if (!CanGetComments()) {
        ThrowUnassigned(1);
    }
    return m_Comments;
}

inline
void CMixture_model_Base::C_Attlist::SetComments(const CMixture_model_Base::C_Attlist::TComments& value)
{
    m_Comments = value;
    m_set_State[0] |= 0xc;
}

inline
CMixture_model_Base::C_Attlist::TComments& CMixture_model_Base::C_Attlist::SetComments(void)
{
#ifdef _DEBUG
    if (!IsSetComments()) {
        m_Comments = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Comments;
}

inline
bool CMixture_model_Base::C_Attlist::IsSetPrior_probability(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CMixture_model_Base::C_Attlist::CanGetPrior_probability(void) const
{
    return IsSetPrior_probability();
}

inline
void CMixture_model_Base::C_Attlist::ResetPrior_probability(void)
{
    m_Prior_probability = 0;
    m_set_State[0] &= ~0x30;
}

inline
CMixture_model_Base::C_Attlist::TPrior_probability CMixture_model_Base::C_Attlist::GetPrior_probability(void) const
{
    if (!CanGetPrior_probability()) {
        ThrowUnassigned(2);
    }
    return m_Prior_probability;
}

inline
void CMixture_model_Base::C_Attlist::SetPrior_probability(CMixture_model_Base::C_Attlist::TPrior_probability value)
{
    m_Prior_probability = value;
    m_set_State[0] |= 0x30;
}

inline
CMixture_model_Base::C_Attlist::TPrior_probability& CMixture_model_Base::C_Attlist::SetPrior_probability(void)
{
#ifdef _DEBUG
    if (!IsSetPrior_probability()) {
        memset(&m_Prior_probability,UnassignedByte(),sizeof(m_Prior_probability));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Prior_probability;
}

inline
bool CMixture_model_Base::C_Attlist::IsSetEst_tot_correct(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CMixture_model_Base::C_Attlist::CanGetEst_tot_correct(void) const
{
    return IsSetEst_tot_correct();
}

inline
const CMixture_model_Base::C_Attlist::TEst_tot_correct& CMixture_model_Base::C_Attlist::GetEst_tot_correct(void) const
{
    if (!CanGetEst_tot_correct()) {
        ThrowUnassigned(3);
    }
    return m_Est_tot_correct;
}

inline
void CMixture_model_Base::C_Attlist::SetEst_tot_correct(const CMixture_model_Base::C_Attlist::TEst_tot_correct& value)
{
    m_Est_tot_correct = value;
    m_set_State[0] |= 0xc0;
}

inline
CMixture_model_Base::C_Attlist::TEst_tot_correct& CMixture_model_Base::C_Attlist::SetEst_tot_correct(void)
{
#ifdef _DEBUG
    if (!IsSetEst_tot_correct()) {
        m_Est_tot_correct = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Est_tot_correct;
}

inline
bool CMixture_model_Base::C_Attlist::IsSetTot_num_spectra(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CMixture_model_Base::C_Attlist::CanGetTot_num_spectra(void) const
{
    return IsSetTot_num_spectra();
}

inline
const CMixture_model_Base::C_Attlist::TTot_num_spectra& CMixture_model_Base::C_Attlist::GetTot_num_spectra(void) const
{
    if (!CanGetTot_num_spectra()) {
        ThrowUnassigned(4);
    }
    return m_Tot_num_spectra;
}

inline
void CMixture_model_Base::C_Attlist::SetTot_num_spectra(const CMixture_model_Base::C_Attlist::TTot_num_spectra& value)
{
    m_Tot_num_spectra = value;
    m_set_State[0] |= 0x300;
}

inline
CMixture_model_Base::C_Attlist::TTot_num_spectra& CMixture_model_Base::C_Attlist::SetTot_num_spectra(void)
{
#ifdef _DEBUG
    if (!IsSetTot_num_spectra()) {
        m_Tot_num_spectra = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Tot_num_spectra;
}

inline
bool CMixture_model_Base::C_Attlist::IsSetNum_iterations(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CMixture_model_Base::C_Attlist::CanGetNum_iterations(void) const
{
    return IsSetNum_iterations();
}

inline
const CMixture_model_Base::C_Attlist::TNum_iterations& CMixture_model_Base::C_Attlist::GetNum_iterations(void) const
{
    if (!CanGetNum_iterations()) {
        ThrowUnassigned(5);
    }
    return m_Num_iterations;
}

inline
void CMixture_model_Base::C_Attlist::SetNum_iterations(const CMixture_model_Base::C_Attlist::TNum_iterations& value)
{
    m_Num_iterations = value;
    m_set_State[0] |= 0xc00;
}

inline
CMixture_model_Base::C_Attlist::TNum_iterations& CMixture_model_Base::C_Attlist::SetNum_iterations(void)
{
#ifdef _DEBUG
    if (!IsSetNum_iterations()) {
        m_Num_iterations = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Num_iterations;
}

inline
bool CMixture_model_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CMixture_model_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CMixture_model_Base::TAttlist& CMixture_model_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CMixture_model_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CMixture_model_Base::TAttlist& CMixture_model_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CMixture_model_Base::IsSetMixturemodel_distribution(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CMixture_model_Base::CanGetMixturemodel_distribution(void) const
{
    return true;
}

inline
const CMixture_model_Base::TMixturemodel_distribution& CMixture_model_Base::GetMixturemodel_distribution(void) const
{
    return m_Mixturemodel_distribution;
}

inline
CMixture_model_Base::TMixturemodel_distribution& CMixture_model_Base::SetMixturemodel_distribution(void)
{
    m_set_State[0] |= 0x4;
    return m_Mixturemodel_distribution;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_MIXTURE_MODEL_BASE_HPP
