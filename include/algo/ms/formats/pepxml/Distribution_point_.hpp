/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Distribution_point_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_DISTRIBUTION_POINT_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_DISTRIBUTION_POINT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_PEPXML_EXPORT CDistribution_point_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CDistribution_point_Base(void);
    // destructor
    virtual ~CDistribution_point_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef double TFvalue;
        typedef int TObs_1_distr;
        typedef double TModel_1_pos_distr;
        typedef double TModel_1_neg_distr;
        typedef int TObs_2_distr;
        typedef double TModel_2_pos_distr;
        typedef double TModel_2_neg_distr;
        typedef int TObs_3_distr;
        typedef double TModel_3_pos_distr;
        typedef double TModel_3_neg_distr;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef double TFvalue
        ///  Check whether the Fvalue data member has been assigned a value.
        bool IsSetFvalue(void) const;
        /// Check whether it is safe or not to call GetFvalue method.
        bool CanGetFvalue(void) const;
        void ResetFvalue(void);
        TFvalue GetFvalue(void) const;
        void SetFvalue(TFvalue value);
        TFvalue& SetFvalue(void);
    
        /// mandatory
        /// typedef int TObs_1_distr
        ///  Check whether the Obs_1_distr data member has been assigned a value.
        bool IsSetObs_1_distr(void) const;
        /// Check whether it is safe or not to call GetObs_1_distr method.
        bool CanGetObs_1_distr(void) const;
        void ResetObs_1_distr(void);
        TObs_1_distr GetObs_1_distr(void) const;
        void SetObs_1_distr(TObs_1_distr value);
        TObs_1_distr& SetObs_1_distr(void);
    
        /// mandatory
        /// typedef double TModel_1_pos_distr
        ///  Check whether the Model_1_pos_distr data member has been assigned a value.
        bool IsSetModel_1_pos_distr(void) const;
        /// Check whether it is safe or not to call GetModel_1_pos_distr method.
        bool CanGetModel_1_pos_distr(void) const;
        void ResetModel_1_pos_distr(void);
        TModel_1_pos_distr GetModel_1_pos_distr(void) const;
        void SetModel_1_pos_distr(TModel_1_pos_distr value);
        TModel_1_pos_distr& SetModel_1_pos_distr(void);
    
        /// mandatory
        /// typedef double TModel_1_neg_distr
        ///  Check whether the Model_1_neg_distr data member has been assigned a value.
        bool IsSetModel_1_neg_distr(void) const;
        /// Check whether it is safe or not to call GetModel_1_neg_distr method.
        bool CanGetModel_1_neg_distr(void) const;
        void ResetModel_1_neg_distr(void);
        TModel_1_neg_distr GetModel_1_neg_distr(void) const;
        void SetModel_1_neg_distr(TModel_1_neg_distr value);
        TModel_1_neg_distr& SetModel_1_neg_distr(void);
    
        /// mandatory
        /// typedef int TObs_2_distr
        ///  Check whether the Obs_2_distr data member has been assigned a value.
        bool IsSetObs_2_distr(void) const;
        /// Check whether it is safe or not to call GetObs_2_distr method.
        bool CanGetObs_2_distr(void) const;
        void ResetObs_2_distr(void);
        TObs_2_distr GetObs_2_distr(void) const;
        void SetObs_2_distr(TObs_2_distr value);
        TObs_2_distr& SetObs_2_distr(void);
    
        /// mandatory
        /// typedef double TModel_2_pos_distr
        ///  Check whether the Model_2_pos_distr data member has been assigned a value.
        bool IsSetModel_2_pos_distr(void) const;
        /// Check whether it is safe or not to call GetModel_2_pos_distr method.
        bool CanGetModel_2_pos_distr(void) const;
        void ResetModel_2_pos_distr(void);
        TModel_2_pos_distr GetModel_2_pos_distr(void) const;
        void SetModel_2_pos_distr(TModel_2_pos_distr value);
        TModel_2_pos_distr& SetModel_2_pos_distr(void);
    
        /// mandatory
        /// typedef double TModel_2_neg_distr
        ///  Check whether the Model_2_neg_distr data member has been assigned a value.
        bool IsSetModel_2_neg_distr(void) const;
        /// Check whether it is safe or not to call GetModel_2_neg_distr method.
        bool CanGetModel_2_neg_distr(void) const;
        void ResetModel_2_neg_distr(void);
        TModel_2_neg_distr GetModel_2_neg_distr(void) const;
        void SetModel_2_neg_distr(TModel_2_neg_distr value);
        TModel_2_neg_distr& SetModel_2_neg_distr(void);
    
        /// mandatory
        /// typedef int TObs_3_distr
        ///  Check whether the Obs_3_distr data member has been assigned a value.
        bool IsSetObs_3_distr(void) const;
        /// Check whether it is safe or not to call GetObs_3_distr method.
        bool CanGetObs_3_distr(void) const;
        void ResetObs_3_distr(void);
        TObs_3_distr GetObs_3_distr(void) const;
        void SetObs_3_distr(TObs_3_distr value);
        TObs_3_distr& SetObs_3_distr(void);
    
        /// mandatory
        /// typedef double TModel_3_pos_distr
        ///  Check whether the Model_3_pos_distr data member has been assigned a value.
        bool IsSetModel_3_pos_distr(void) const;
        /// Check whether it is safe or not to call GetModel_3_pos_distr method.
        bool CanGetModel_3_pos_distr(void) const;
        void ResetModel_3_pos_distr(void);
        TModel_3_pos_distr GetModel_3_pos_distr(void) const;
        void SetModel_3_pos_distr(TModel_3_pos_distr value);
        TModel_3_pos_distr& SetModel_3_pos_distr(void);
    
        /// mandatory
        /// typedef double TModel_3_neg_distr
        ///  Check whether the Model_3_neg_distr data member has been assigned a value.
        bool IsSetModel_3_neg_distr(void) const;
        /// Check whether it is safe or not to call GetModel_3_neg_distr method.
        bool CanGetModel_3_neg_distr(void) const;
        void ResetModel_3_neg_distr(void);
        TModel_3_neg_distr GetModel_3_neg_distr(void) const;
        void SetModel_3_neg_distr(TModel_3_neg_distr value);
        TModel_3_neg_distr& SetModel_3_neg_distr(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        double m_Fvalue;
        int m_Obs_1_distr;
        double m_Model_1_pos_distr;
        double m_Model_1_neg_distr;
        int m_Obs_2_distr;
        double m_Model_2_pos_distr;
        double m_Model_2_neg_distr;
        int m_Obs_3_distr;
        double m_Model_3_pos_distr;
        double m_Model_3_neg_distr;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Distribution_point data member has been assigned a value.
    bool IsSetDistribution_point(void) const;
    /// Check whether it is safe or not to call GetDistribution_point method.
    bool CanGetDistribution_point(void) const;
    void ResetDistribution_point(void);
    void SetDistribution_point(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CDistribution_point_Base(const CDistribution_point_Base&);
    CDistribution_point_Base& operator=(const CDistribution_point_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CDistribution_point_Base::C_Attlist::IsSetFvalue(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetFvalue(void) const
{
    return IsSetFvalue();
}

inline
void CDistribution_point_Base::C_Attlist::ResetFvalue(void)
{
    m_Fvalue = 0;
    m_set_State[0] &= ~0x3;
}

inline
CDistribution_point_Base::C_Attlist::TFvalue CDistribution_point_Base::C_Attlist::GetFvalue(void) const
{
    if (!CanGetFvalue()) {
        ThrowUnassigned(0);
    }
    return m_Fvalue;
}

inline
void CDistribution_point_Base::C_Attlist::SetFvalue(CDistribution_point_Base::C_Attlist::TFvalue value)
{
    m_Fvalue = value;
    m_set_State[0] |= 0x3;
}

inline
CDistribution_point_Base::C_Attlist::TFvalue& CDistribution_point_Base::C_Attlist::SetFvalue(void)
{
#ifdef _DEBUG
    if (!IsSetFvalue()) {
        memset(&m_Fvalue,UnassignedByte(),sizeof(m_Fvalue));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Fvalue;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetObs_1_distr(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetObs_1_distr(void) const
{
    return IsSetObs_1_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetObs_1_distr(void)
{
    m_Obs_1_distr = 0;
    m_set_State[0] &= ~0xc;
}

inline
CDistribution_point_Base::C_Attlist::TObs_1_distr CDistribution_point_Base::C_Attlist::GetObs_1_distr(void) const
{
    if (!CanGetObs_1_distr()) {
        ThrowUnassigned(1);
    }
    return m_Obs_1_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetObs_1_distr(CDistribution_point_Base::C_Attlist::TObs_1_distr value)
{
    m_Obs_1_distr = value;
    m_set_State[0] |= 0xc;
}

inline
CDistribution_point_Base::C_Attlist::TObs_1_distr& CDistribution_point_Base::C_Attlist::SetObs_1_distr(void)
{
#ifdef _DEBUG
    if (!IsSetObs_1_distr()) {
        memset(&m_Obs_1_distr,UnassignedByte(),sizeof(m_Obs_1_distr));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Obs_1_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetModel_1_pos_distr(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetModel_1_pos_distr(void) const
{
    return IsSetModel_1_pos_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetModel_1_pos_distr(void)
{
    m_Model_1_pos_distr = 0;
    m_set_State[0] &= ~0x30;
}

inline
CDistribution_point_Base::C_Attlist::TModel_1_pos_distr CDistribution_point_Base::C_Attlist::GetModel_1_pos_distr(void) const
{
    if (!CanGetModel_1_pos_distr()) {
        ThrowUnassigned(2);
    }
    return m_Model_1_pos_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetModel_1_pos_distr(CDistribution_point_Base::C_Attlist::TModel_1_pos_distr value)
{
    m_Model_1_pos_distr = value;
    m_set_State[0] |= 0x30;
}

inline
CDistribution_point_Base::C_Attlist::TModel_1_pos_distr& CDistribution_point_Base::C_Attlist::SetModel_1_pos_distr(void)
{
#ifdef _DEBUG
    if (!IsSetModel_1_pos_distr()) {
        memset(&m_Model_1_pos_distr,UnassignedByte(),sizeof(m_Model_1_pos_distr));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Model_1_pos_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetModel_1_neg_distr(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetModel_1_neg_distr(void) const
{
    return IsSetModel_1_neg_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetModel_1_neg_distr(void)
{
    m_Model_1_neg_distr = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CDistribution_point_Base::C_Attlist::TModel_1_neg_distr CDistribution_point_Base::C_Attlist::GetModel_1_neg_distr(void) const
{
    if (!CanGetModel_1_neg_distr()) {
        ThrowUnassigned(3);
    }
    return m_Model_1_neg_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetModel_1_neg_distr(CDistribution_point_Base::C_Attlist::TModel_1_neg_distr value)
{
    m_Model_1_neg_distr = value;
    m_set_State[0] |= 0xc0;
}

inline
CDistribution_point_Base::C_Attlist::TModel_1_neg_distr& CDistribution_point_Base::C_Attlist::SetModel_1_neg_distr(void)
{
#ifdef _DEBUG
    if (!IsSetModel_1_neg_distr()) {
        memset(&m_Model_1_neg_distr,UnassignedByte(),sizeof(m_Model_1_neg_distr));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Model_1_neg_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetObs_2_distr(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetObs_2_distr(void) const
{
    return IsSetObs_2_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetObs_2_distr(void)
{
    m_Obs_2_distr = 0;
    m_set_State[0] &= ~0x300;
}

inline
CDistribution_point_Base::C_Attlist::TObs_2_distr CDistribution_point_Base::C_Attlist::GetObs_2_distr(void) const
{
    if (!CanGetObs_2_distr()) {
        ThrowUnassigned(4);
    }
    return m_Obs_2_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetObs_2_distr(CDistribution_point_Base::C_Attlist::TObs_2_distr value)
{
    m_Obs_2_distr = value;
    m_set_State[0] |= 0x300;
}

inline
CDistribution_point_Base::C_Attlist::TObs_2_distr& CDistribution_point_Base::C_Attlist::SetObs_2_distr(void)
{
#ifdef _DEBUG
    if (!IsSetObs_2_distr()) {
        memset(&m_Obs_2_distr,UnassignedByte(),sizeof(m_Obs_2_distr));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Obs_2_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetModel_2_pos_distr(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetModel_2_pos_distr(void) const
{
    return IsSetModel_2_pos_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetModel_2_pos_distr(void)
{
    m_Model_2_pos_distr = 0;
    m_set_State[0] &= ~0xc00;
}

inline
CDistribution_point_Base::C_Attlist::TModel_2_pos_distr CDistribution_point_Base::C_Attlist::GetModel_2_pos_distr(void) const
{
    if (!CanGetModel_2_pos_distr()) {
        ThrowUnassigned(5);
    }
    return m_Model_2_pos_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetModel_2_pos_distr(CDistribution_point_Base::C_Attlist::TModel_2_pos_distr value)
{
    m_Model_2_pos_distr = value;
    m_set_State[0] |= 0xc00;
}

inline
CDistribution_point_Base::C_Attlist::TModel_2_pos_distr& CDistribution_point_Base::C_Attlist::SetModel_2_pos_distr(void)
{
#ifdef _DEBUG
    if (!IsSetModel_2_pos_distr()) {
        memset(&m_Model_2_pos_distr,UnassignedByte(),sizeof(m_Model_2_pos_distr));
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Model_2_pos_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetModel_2_neg_distr(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetModel_2_neg_distr(void) const
{
    return IsSetModel_2_neg_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetModel_2_neg_distr(void)
{
    m_Model_2_neg_distr = 0;
    m_set_State[0] &= ~0x3000;
}

inline
CDistribution_point_Base::C_Attlist::TModel_2_neg_distr CDistribution_point_Base::C_Attlist::GetModel_2_neg_distr(void) const
{
    if (!CanGetModel_2_neg_distr()) {
        ThrowUnassigned(6);
    }
    return m_Model_2_neg_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetModel_2_neg_distr(CDistribution_point_Base::C_Attlist::TModel_2_neg_distr value)
{
    m_Model_2_neg_distr = value;
    m_set_State[0] |= 0x3000;
}

inline
CDistribution_point_Base::C_Attlist::TModel_2_neg_distr& CDistribution_point_Base::C_Attlist::SetModel_2_neg_distr(void)
{
#ifdef _DEBUG
    if (!IsSetModel_2_neg_distr()) {
        memset(&m_Model_2_neg_distr,UnassignedByte(),sizeof(m_Model_2_neg_distr));
    }
#endif
    m_set_State[0] |= 0x1000;
    return m_Model_2_neg_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetObs_3_distr(void) const
{
    return ((m_set_State[0] & 0xc000) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetObs_3_distr(void) const
{
    return IsSetObs_3_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetObs_3_distr(void)
{
    m_Obs_3_distr = 0;
    m_set_State[0] &= ~0xc000;
}

inline
CDistribution_point_Base::C_Attlist::TObs_3_distr CDistribution_point_Base::C_Attlist::GetObs_3_distr(void) const
{
    if (!CanGetObs_3_distr()) {
        ThrowUnassigned(7);
    }
    return m_Obs_3_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetObs_3_distr(CDistribution_point_Base::C_Attlist::TObs_3_distr value)
{
    m_Obs_3_distr = value;
    m_set_State[0] |= 0xc000;
}

inline
CDistribution_point_Base::C_Attlist::TObs_3_distr& CDistribution_point_Base::C_Attlist::SetObs_3_distr(void)
{
#ifdef _DEBUG
    if (!IsSetObs_3_distr()) {
        memset(&m_Obs_3_distr,UnassignedByte(),sizeof(m_Obs_3_distr));
    }
#endif
    m_set_State[0] |= 0x4000;
    return m_Obs_3_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetModel_3_pos_distr(void) const
{
    return ((m_set_State[0] & 0x30000) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetModel_3_pos_distr(void) const
{
    return IsSetModel_3_pos_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetModel_3_pos_distr(void)
{
    m_Model_3_pos_distr = 0;
    m_set_State[0] &= ~0x30000;
}

inline
CDistribution_point_Base::C_Attlist::TModel_3_pos_distr CDistribution_point_Base::C_Attlist::GetModel_3_pos_distr(void) const
{
    if (!CanGetModel_3_pos_distr()) {
        ThrowUnassigned(8);
    }
    return m_Model_3_pos_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetModel_3_pos_distr(CDistribution_point_Base::C_Attlist::TModel_3_pos_distr value)
{
    m_Model_3_pos_distr = value;
    m_set_State[0] |= 0x30000;
}

inline
CDistribution_point_Base::C_Attlist::TModel_3_pos_distr& CDistribution_point_Base::C_Attlist::SetModel_3_pos_distr(void)
{
#ifdef _DEBUG
    if (!IsSetModel_3_pos_distr()) {
        memset(&m_Model_3_pos_distr,UnassignedByte(),sizeof(m_Model_3_pos_distr));
    }
#endif
    m_set_State[0] |= 0x10000;
    return m_Model_3_pos_distr;
}

inline
bool CDistribution_point_Base::C_Attlist::IsSetModel_3_neg_distr(void) const
{
    return ((m_set_State[0] & 0xc0000) != 0);
}

inline
bool CDistribution_point_Base::C_Attlist::CanGetModel_3_neg_distr(void) const
{
    return IsSetModel_3_neg_distr();
}

inline
void CDistribution_point_Base::C_Attlist::ResetModel_3_neg_distr(void)
{
    m_Model_3_neg_distr = 0;
    m_set_State[0] &= ~0xc0000;
}

inline
CDistribution_point_Base::C_Attlist::TModel_3_neg_distr CDistribution_point_Base::C_Attlist::GetModel_3_neg_distr(void) const
{
    if (!CanGetModel_3_neg_distr()) {
        ThrowUnassigned(9);
    }
    return m_Model_3_neg_distr;
}

inline
void CDistribution_point_Base::C_Attlist::SetModel_3_neg_distr(CDistribution_point_Base::C_Attlist::TModel_3_neg_distr value)
{
    m_Model_3_neg_distr = value;
    m_set_State[0] |= 0xc0000;
}

inline
CDistribution_point_Base::C_Attlist::TModel_3_neg_distr& CDistribution_point_Base::C_Attlist::SetModel_3_neg_distr(void)
{
#ifdef _DEBUG
    if (!IsSetModel_3_neg_distr()) {
        memset(&m_Model_3_neg_distr,UnassignedByte(),sizeof(m_Model_3_neg_distr));
    }
#endif
    m_set_State[0] |= 0x40000;
    return m_Model_3_neg_distr;
}

inline
bool CDistribution_point_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CDistribution_point_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CDistribution_point_Base::TAttlist& CDistribution_point_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CDistribution_point_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CDistribution_point_Base::TAttlist& CDistribution_point_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetDistribution_point();
    return (*m_Attlist);
}

inline
bool CDistribution_point_Base::IsSetDistribution_point(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CDistribution_point_Base::CanGetDistribution_point(void) const
{
    return false;
}

inline
void CDistribution_point_Base::ResetDistribution_point(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CDistribution_point_Base::SetDistribution_point(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_DISTRIBUTION_POINT_BASE_HPP
