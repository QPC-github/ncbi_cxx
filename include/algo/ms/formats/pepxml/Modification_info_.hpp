/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Modification_info_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_MODIFICATION_INFO_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_MODIFICATION_INFO_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CMod_aminoacid_mass;


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Positions and masses of modifications 
class NCBI_PEPXML_EXPORT CModification_info_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CModification_info_Base(void);
    // destructor
    virtual ~CModification_info_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef double TMod_nterm_mass;
        typedef double TMod_cterm_mass;
        typedef string TModified_peptide;
    
        // getters
        // setters
    
        /// optional
        /// typedef double TMod_nterm_mass
        ///  Check whether the Mod_nterm_mass data member has been assigned a value.
        bool IsSetMod_nterm_mass(void) const;
        /// Check whether it is safe or not to call GetMod_nterm_mass method.
        bool CanGetMod_nterm_mass(void) const;
        void ResetMod_nterm_mass(void);
        TMod_nterm_mass GetMod_nterm_mass(void) const;
        void SetMod_nterm_mass(TMod_nterm_mass value);
        TMod_nterm_mass& SetMod_nterm_mass(void);
    
        /// optional
        /// typedef double TMod_cterm_mass
        ///  Check whether the Mod_cterm_mass data member has been assigned a value.
        bool IsSetMod_cterm_mass(void) const;
        /// Check whether it is safe or not to call GetMod_cterm_mass method.
        bool CanGetMod_cterm_mass(void) const;
        void ResetMod_cterm_mass(void);
        TMod_cterm_mass GetMod_cterm_mass(void) const;
        void SetMod_cterm_mass(TMod_cterm_mass value);
        TMod_cterm_mass& SetMod_cterm_mass(void);
    
        /// optional
        /// typedef string TModified_peptide
        ///  Check whether the Modified_peptide data member has been assigned a value.
        bool IsSetModified_peptide(void) const;
        /// Check whether it is safe or not to call GetModified_peptide method.
        bool CanGetModified_peptide(void) const;
        void ResetModified_peptide(void);
        const TModified_peptide& GetModified_peptide(void) const;
        void SetModified_peptide(const TModified_peptide& value);
        TModified_peptide& SetModified_peptide(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        double m_Mod_nterm_mass;
        double m_Mod_cterm_mass;
        string m_Modified_peptide;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CMod_aminoacid_mass > > TMod_aminoacid_mass;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// optional
    /// typedef list< CRef< CMod_aminoacid_mass > > TMod_aminoacid_mass
    ///  Check whether the Mod_aminoacid_mass data member has been assigned a value.
    bool IsSetMod_aminoacid_mass(void) const;
    /// Check whether it is safe or not to call GetMod_aminoacid_mass method.
    bool CanGetMod_aminoacid_mass(void) const;
    void ResetMod_aminoacid_mass(void);
    const TMod_aminoacid_mass& GetMod_aminoacid_mass(void) const;
    TMod_aminoacid_mass& SetMod_aminoacid_mass(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CModification_info_Base(const CModification_info_Base&);
    CModification_info_Base& operator=(const CModification_info_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CMod_aminoacid_mass > > m_Mod_aminoacid_mass;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CModification_info_Base::C_Attlist::IsSetMod_nterm_mass(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CModification_info_Base::C_Attlist::CanGetMod_nterm_mass(void) const
{
    return IsSetMod_nterm_mass();
}

inline
void CModification_info_Base::C_Attlist::ResetMod_nterm_mass(void)
{
    m_Mod_nterm_mass = 0;
    m_set_State[0] &= ~0x3;
}

inline
CModification_info_Base::C_Attlist::TMod_nterm_mass CModification_info_Base::C_Attlist::GetMod_nterm_mass(void) const
{
    if (!CanGetMod_nterm_mass()) {
        ThrowUnassigned(0);
    }
    return m_Mod_nterm_mass;
}

inline
void CModification_info_Base::C_Attlist::SetMod_nterm_mass(CModification_info_Base::C_Attlist::TMod_nterm_mass value)
{
    m_Mod_nterm_mass = value;
    m_set_State[0] |= 0x3;
}

inline
CModification_info_Base::C_Attlist::TMod_nterm_mass& CModification_info_Base::C_Attlist::SetMod_nterm_mass(void)
{
#ifdef _DEBUG
    if (!IsSetMod_nterm_mass()) {
        memset(&m_Mod_nterm_mass,UnassignedByte(),sizeof(m_Mod_nterm_mass));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Mod_nterm_mass;
}

inline
bool CModification_info_Base::C_Attlist::IsSetMod_cterm_mass(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CModification_info_Base::C_Attlist::CanGetMod_cterm_mass(void) const
{
    return IsSetMod_cterm_mass();
}

inline
void CModification_info_Base::C_Attlist::ResetMod_cterm_mass(void)
{
    m_Mod_cterm_mass = 0;
    m_set_State[0] &= ~0xc;
}

inline
CModification_info_Base::C_Attlist::TMod_cterm_mass CModification_info_Base::C_Attlist::GetMod_cterm_mass(void) const
{
    if (!CanGetMod_cterm_mass()) {
        ThrowUnassigned(1);
    }
    return m_Mod_cterm_mass;
}

inline
void CModification_info_Base::C_Attlist::SetMod_cterm_mass(CModification_info_Base::C_Attlist::TMod_cterm_mass value)
{
    m_Mod_cterm_mass = value;
    m_set_State[0] |= 0xc;
}

inline
CModification_info_Base::C_Attlist::TMod_cterm_mass& CModification_info_Base::C_Attlist::SetMod_cterm_mass(void)
{
#ifdef _DEBUG
    if (!IsSetMod_cterm_mass()) {
        memset(&m_Mod_cterm_mass,UnassignedByte(),sizeof(m_Mod_cterm_mass));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Mod_cterm_mass;
}

inline
bool CModification_info_Base::C_Attlist::IsSetModified_peptide(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CModification_info_Base::C_Attlist::CanGetModified_peptide(void) const
{
    return IsSetModified_peptide();
}

inline
const CModification_info_Base::C_Attlist::TModified_peptide& CModification_info_Base::C_Attlist::GetModified_peptide(void) const
{
    if (!CanGetModified_peptide()) {
        ThrowUnassigned(2);
    }
    return m_Modified_peptide;
}

inline
void CModification_info_Base::C_Attlist::SetModified_peptide(const CModification_info_Base::C_Attlist::TModified_peptide& value)
{
    m_Modified_peptide = value;
    m_set_State[0] |= 0x30;
}

inline
CModification_info_Base::C_Attlist::TModified_peptide& CModification_info_Base::C_Attlist::SetModified_peptide(void)
{
#ifdef _DEBUG
    if (!IsSetModified_peptide()) {
        m_Modified_peptide = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Modified_peptide;
}

inline
bool CModification_info_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CModification_info_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CModification_info_Base::TAttlist& CModification_info_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CModification_info_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CModification_info_Base::TAttlist& CModification_info_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CModification_info_Base::IsSetMod_aminoacid_mass(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CModification_info_Base::CanGetMod_aminoacid_mass(void) const
{
    return true;
}

inline
const CModification_info_Base::TMod_aminoacid_mass& CModification_info_Base::GetMod_aminoacid_mass(void) const
{
    return m_Mod_aminoacid_mass;
}

inline
CModification_info_Base::TMod_aminoacid_mass& CModification_info_Base::SetMod_aminoacid_mass(void)
{
    m_set_State[0] |= 0x4;
    return m_Mod_aminoacid_mass;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_MODIFICATION_INFO_BASE_HPP
