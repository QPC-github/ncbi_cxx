/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Alternative_protein_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ALTERNATIVE_PROTEIN_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ALTERNATIVE_PROTEIN_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
///Other protein in search database that contains peptide 
class NCBI_PEPXML_EXPORT CAlternative_protein_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CAlternative_protein_Base(void);
    // destructor
    virtual ~CAlternative_protein_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef string TProtein;
        typedef string TProtein_descr;
        typedef int TNum_tol_term;
        typedef double TProtein_mw;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef string TProtein
        ///  Check whether the Protein data member has been assigned a value.
        bool IsSetProtein(void) const;
        /// Check whether it is safe or not to call GetProtein method.
        bool CanGetProtein(void) const;
        void ResetProtein(void);
        const TProtein& GetProtein(void) const;
        void SetProtein(const TProtein& value);
        TProtein& SetProtein(void);
    
        /// optional
        /// typedef string TProtein_descr
        ///  Check whether the Protein_descr data member has been assigned a value.
        bool IsSetProtein_descr(void) const;
        /// Check whether it is safe or not to call GetProtein_descr method.
        bool CanGetProtein_descr(void) const;
        void ResetProtein_descr(void);
        const TProtein_descr& GetProtein_descr(void) const;
        void SetProtein_descr(const TProtein_descr& value);
        TProtein_descr& SetProtein_descr(void);
    
        /// optional
        /// typedef int TNum_tol_term
        ///  Check whether the Num_tol_term data member has been assigned a value.
        bool IsSetNum_tol_term(void) const;
        /// Check whether it is safe or not to call GetNum_tol_term method.
        bool CanGetNum_tol_term(void) const;
        void ResetNum_tol_term(void);
        TNum_tol_term GetNum_tol_term(void) const;
        void SetNum_tol_term(TNum_tol_term value);
        TNum_tol_term& SetNum_tol_term(void);
    
        /// optional
        /// typedef double TProtein_mw
        ///  Check whether the Protein_mw data member has been assigned a value.
        bool IsSetProtein_mw(void) const;
        /// Check whether it is safe or not to call GetProtein_mw method.
        bool CanGetProtein_mw(void) const;
        void ResetProtein_mw(void);
        TProtein_mw GetProtein_mw(void) const;
        void SetProtein_mw(TProtein_mw value);
        TProtein_mw& SetProtein_mw(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        string m_Protein;
        string m_Protein_descr;
        int m_Num_tol_term;
        double m_Protein_mw;
    };
    // types
    typedef C_Attlist TAttlist;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    ///  Check whether the Alternative_protein data member has been assigned a value.
    bool IsSetAlternative_protein(void) const;
    /// Check whether it is safe or not to call GetAlternative_protein method.
    bool CanGetAlternative_protein(void) const;
    void ResetAlternative_protein(void);
    void SetAlternative_protein(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CAlternative_protein_Base(const CAlternative_protein_Base&);
    CAlternative_protein_Base& operator=(const CAlternative_protein_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CAlternative_protein_Base::C_Attlist::IsSetProtein(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CAlternative_protein_Base::C_Attlist::CanGetProtein(void) const
{
    return IsSetProtein();
}

inline
const CAlternative_protein_Base::C_Attlist::TProtein& CAlternative_protein_Base::C_Attlist::GetProtein(void) const
{
    if (!CanGetProtein()) {
        ThrowUnassigned(0);
    }
    return m_Protein;
}

inline
void CAlternative_protein_Base::C_Attlist::SetProtein(const CAlternative_protein_Base::C_Attlist::TProtein& value)
{
    m_Protein = value;
    m_set_State[0] |= 0x3;
}

inline
CAlternative_protein_Base::C_Attlist::TProtein& CAlternative_protein_Base::C_Attlist::SetProtein(void)
{
#ifdef _DEBUG
    if (!IsSetProtein()) {
        m_Protein = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Protein;
}

inline
bool CAlternative_protein_Base::C_Attlist::IsSetProtein_descr(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAlternative_protein_Base::C_Attlist::CanGetProtein_descr(void) const
{
    return IsSetProtein_descr();
}

inline
const CAlternative_protein_Base::C_Attlist::TProtein_descr& CAlternative_protein_Base::C_Attlist::GetProtein_descr(void) const
{
    if (!CanGetProtein_descr()) {
        ThrowUnassigned(1);
    }
    return m_Protein_descr;
}

inline
void CAlternative_protein_Base::C_Attlist::SetProtein_descr(const CAlternative_protein_Base::C_Attlist::TProtein_descr& value)
{
    m_Protein_descr = value;
    m_set_State[0] |= 0xc;
}

inline
CAlternative_protein_Base::C_Attlist::TProtein_descr& CAlternative_protein_Base::C_Attlist::SetProtein_descr(void)
{
#ifdef _DEBUG
    if (!IsSetProtein_descr()) {
        m_Protein_descr = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Protein_descr;
}

inline
bool CAlternative_protein_Base::C_Attlist::IsSetNum_tol_term(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CAlternative_protein_Base::C_Attlist::CanGetNum_tol_term(void) const
{
    return IsSetNum_tol_term();
}

inline
void CAlternative_protein_Base::C_Attlist::ResetNum_tol_term(void)
{
    m_Num_tol_term = 0;
    m_set_State[0] &= ~0x30;
}

inline
CAlternative_protein_Base::C_Attlist::TNum_tol_term CAlternative_protein_Base::C_Attlist::GetNum_tol_term(void) const
{
    if (!CanGetNum_tol_term()) {
        ThrowUnassigned(2);
    }
    return m_Num_tol_term;
}

inline
void CAlternative_protein_Base::C_Attlist::SetNum_tol_term(CAlternative_protein_Base::C_Attlist::TNum_tol_term value)
{
    m_Num_tol_term = value;
    m_set_State[0] |= 0x30;
}

inline
CAlternative_protein_Base::C_Attlist::TNum_tol_term& CAlternative_protein_Base::C_Attlist::SetNum_tol_term(void)
{
#ifdef _DEBUG
    if (!IsSetNum_tol_term()) {
        memset(&m_Num_tol_term,UnassignedByte(),sizeof(m_Num_tol_term));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Num_tol_term;
}

inline
bool CAlternative_protein_Base::C_Attlist::IsSetProtein_mw(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CAlternative_protein_Base::C_Attlist::CanGetProtein_mw(void) const
{
    return IsSetProtein_mw();
}

inline
void CAlternative_protein_Base::C_Attlist::ResetProtein_mw(void)
{
    m_Protein_mw = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CAlternative_protein_Base::C_Attlist::TProtein_mw CAlternative_protein_Base::C_Attlist::GetProtein_mw(void) const
{
    if (!CanGetProtein_mw()) {
        ThrowUnassigned(3);
    }
    return m_Protein_mw;
}

inline
void CAlternative_protein_Base::C_Attlist::SetProtein_mw(CAlternative_protein_Base::C_Attlist::TProtein_mw value)
{
    m_Protein_mw = value;
    m_set_State[0] |= 0xc0;
}

inline
CAlternative_protein_Base::C_Attlist::TProtein_mw& CAlternative_protein_Base::C_Attlist::SetProtein_mw(void)
{
#ifdef _DEBUG
    if (!IsSetProtein_mw()) {
        memset(&m_Protein_mw,UnassignedByte(),sizeof(m_Protein_mw));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Protein_mw;
}

inline
bool CAlternative_protein_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CAlternative_protein_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CAlternative_protein_Base::TAttlist& CAlternative_protein_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CAlternative_protein_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CAlternative_protein_Base::TAttlist& CAlternative_protein_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    SetAlternative_protein();
    return (*m_Attlist);
}

inline
bool CAlternative_protein_Base::IsSetAlternative_protein(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAlternative_protein_Base::CanGetAlternative_protein(void) const
{
    return false;
}

inline
void CAlternative_protein_Base::ResetAlternative_protein(void)
{
    m_set_State[0] &= ~0xc;
}

inline
void CAlternative_protein_Base::SetAlternative_protein(void)
{
    m_set_State[0] |= 0xc;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ALTERNATIVE_PROTEIN_BASE_HPP
