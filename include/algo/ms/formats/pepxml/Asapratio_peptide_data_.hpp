/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Asapratio_peptide_data_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'pepXML.xsd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef ALGO_MS_FORMATS_PEPXML_ASAPRATIO_PEPTIDE_DATA_BASE_HPP
#define ALGO_MS_FORMATS_PEPXML_ASAPRATIO_PEPTIDE_DATA_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CAsapratio_contribution;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_PEPXML_EXPORT CAsapratio_peptide_data_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CAsapratio_peptide_data_Base(void);
    // destructor
    virtual ~CAsapratio_peptide_data_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_PEPXML_EXPORT C_Attlist : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef int TStatus;
        typedef int TCidIndex;
        typedef double TLight_mass;
        typedef double THeavy_mass;
        typedef int TArea_flag;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef int TStatus
        ///  Check whether the Status data member has been assigned a value.
        bool IsSetStatus(void) const;
        /// Check whether it is safe or not to call GetStatus method.
        bool CanGetStatus(void) const;
        void ResetStatus(void);
        TStatus GetStatus(void) const;
        void SetStatus(TStatus value);
        TStatus& SetStatus(void);
    
        /// mandatory
        /// typedef int TCidIndex
        ///  Check whether the CidIndex data member has been assigned a value.
        bool IsSetCidIndex(void) const;
        /// Check whether it is safe or not to call GetCidIndex method.
        bool CanGetCidIndex(void) const;
        void ResetCidIndex(void);
        TCidIndex GetCidIndex(void) const;
        void SetCidIndex(TCidIndex value);
        TCidIndex& SetCidIndex(void);
    
        /// mandatory
        /// typedef double TLight_mass
        ///  Check whether the Light_mass data member has been assigned a value.
        bool IsSetLight_mass(void) const;
        /// Check whether it is safe or not to call GetLight_mass method.
        bool CanGetLight_mass(void) const;
        void ResetLight_mass(void);
        TLight_mass GetLight_mass(void) const;
        void SetLight_mass(TLight_mass value);
        TLight_mass& SetLight_mass(void);
    
        /// mandatory
        /// typedef double THeavy_mass
        ///  Check whether the Heavy_mass data member has been assigned a value.
        bool IsSetHeavy_mass(void) const;
        /// Check whether it is safe or not to call GetHeavy_mass method.
        bool CanGetHeavy_mass(void) const;
        void ResetHeavy_mass(void);
        THeavy_mass GetHeavy_mass(void) const;
        void SetHeavy_mass(THeavy_mass value);
        THeavy_mass& SetHeavy_mass(void);
    
        /// mandatory
        /// typedef int TArea_flag
        ///  Check whether the Area_flag data member has been assigned a value.
        bool IsSetArea_flag(void) const;
        /// Check whether it is safe or not to call GetArea_flag method.
        bool CanGetArea_flag(void) const;
        void ResetArea_flag(void);
        TArea_flag GetArea_flag(void) const;
        void SetArea_flag(TArea_flag value);
        TArea_flag& SetArea_flag(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        int m_Status;
        int m_CidIndex;
        double m_Light_mass;
        double m_Heavy_mass;
        int m_Area_flag;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef list< CRef< CAsapratio_contribution > > TAsapratio_contribution;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    ///  Check whether the Attlist data member has been assigned a value.
    bool IsSetAttlist(void) const;
    /// Check whether it is safe or not to call GetAttlist method.
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef list< CRef< CAsapratio_contribution > > TAsapratio_contribution
    ///  Check whether the Asapratio_contribution data member has been assigned a value.
    bool IsSetAsapratio_contribution(void) const;
    /// Check whether it is safe or not to call GetAsapratio_contribution method.
    bool CanGetAsapratio_contribution(void) const;
    void ResetAsapratio_contribution(void);
    const TAsapratio_contribution& GetAsapratio_contribution(void) const;
    TAsapratio_contribution& SetAsapratio_contribution(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CAsapratio_peptide_data_Base(const CAsapratio_peptide_data_Base&);
    CAsapratio_peptide_data_Base& operator=(const CAsapratio_peptide_data_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TAttlist > m_Attlist;
    list< CRef< CAsapratio_contribution > > m_Asapratio_contribution;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CAsapratio_peptide_data_Base::C_Attlist::IsSetStatus(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::CanGetStatus(void) const
{
    return IsSetStatus();
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::ResetStatus(void)
{
    m_Status = 0;
    m_set_State[0] &= ~0x3;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TStatus CAsapratio_peptide_data_Base::C_Attlist::GetStatus(void) const
{
    if (!CanGetStatus()) {
        ThrowUnassigned(0);
    }
    return m_Status;
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::SetStatus(CAsapratio_peptide_data_Base::C_Attlist::TStatus value)
{
    m_Status = value;
    m_set_State[0] |= 0x3;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TStatus& CAsapratio_peptide_data_Base::C_Attlist::SetStatus(void)
{
#ifdef _DEBUG
    if (!IsSetStatus()) {
        memset(&m_Status,UnassignedByte(),sizeof(m_Status));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Status;
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::IsSetCidIndex(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::CanGetCidIndex(void) const
{
    return IsSetCidIndex();
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::ResetCidIndex(void)
{
    m_CidIndex = 0;
    m_set_State[0] &= ~0xc;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TCidIndex CAsapratio_peptide_data_Base::C_Attlist::GetCidIndex(void) const
{
    if (!CanGetCidIndex()) {
        ThrowUnassigned(1);
    }
    return m_CidIndex;
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::SetCidIndex(CAsapratio_peptide_data_Base::C_Attlist::TCidIndex value)
{
    m_CidIndex = value;
    m_set_State[0] |= 0xc;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TCidIndex& CAsapratio_peptide_data_Base::C_Attlist::SetCidIndex(void)
{
#ifdef _DEBUG
    if (!IsSetCidIndex()) {
        memset(&m_CidIndex,UnassignedByte(),sizeof(m_CidIndex));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_CidIndex;
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::IsSetLight_mass(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::CanGetLight_mass(void) const
{
    return IsSetLight_mass();
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::ResetLight_mass(void)
{
    m_Light_mass = 0;
    m_set_State[0] &= ~0x30;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TLight_mass CAsapratio_peptide_data_Base::C_Attlist::GetLight_mass(void) const
{
    if (!CanGetLight_mass()) {
        ThrowUnassigned(2);
    }
    return m_Light_mass;
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::SetLight_mass(CAsapratio_peptide_data_Base::C_Attlist::TLight_mass value)
{
    m_Light_mass = value;
    m_set_State[0] |= 0x30;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TLight_mass& CAsapratio_peptide_data_Base::C_Attlist::SetLight_mass(void)
{
#ifdef _DEBUG
    if (!IsSetLight_mass()) {
        memset(&m_Light_mass,UnassignedByte(),sizeof(m_Light_mass));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Light_mass;
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::IsSetHeavy_mass(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::CanGetHeavy_mass(void) const
{
    return IsSetHeavy_mass();
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::ResetHeavy_mass(void)
{
    m_Heavy_mass = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::THeavy_mass CAsapratio_peptide_data_Base::C_Attlist::GetHeavy_mass(void) const
{
    if (!CanGetHeavy_mass()) {
        ThrowUnassigned(3);
    }
    return m_Heavy_mass;
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::SetHeavy_mass(CAsapratio_peptide_data_Base::C_Attlist::THeavy_mass value)
{
    m_Heavy_mass = value;
    m_set_State[0] |= 0xc0;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::THeavy_mass& CAsapratio_peptide_data_Base::C_Attlist::SetHeavy_mass(void)
{
#ifdef _DEBUG
    if (!IsSetHeavy_mass()) {
        memset(&m_Heavy_mass,UnassignedByte(),sizeof(m_Heavy_mass));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Heavy_mass;
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::IsSetArea_flag(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CAsapratio_peptide_data_Base::C_Attlist::CanGetArea_flag(void) const
{
    return IsSetArea_flag();
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::ResetArea_flag(void)
{
    m_Area_flag = 0;
    m_set_State[0] &= ~0x300;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TArea_flag CAsapratio_peptide_data_Base::C_Attlist::GetArea_flag(void) const
{
    if (!CanGetArea_flag()) {
        ThrowUnassigned(4);
    }
    return m_Area_flag;
}

inline
void CAsapratio_peptide_data_Base::C_Attlist::SetArea_flag(CAsapratio_peptide_data_Base::C_Attlist::TArea_flag value)
{
    m_Area_flag = value;
    m_set_State[0] |= 0x300;
}

inline
CAsapratio_peptide_data_Base::C_Attlist::TArea_flag& CAsapratio_peptide_data_Base::C_Attlist::SetArea_flag(void)
{
#ifdef _DEBUG
    if (!IsSetArea_flag()) {
        memset(&m_Area_flag,UnassignedByte(),sizeof(m_Area_flag));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Area_flag;
}

inline
bool CAsapratio_peptide_data_Base::IsSetAttlist(void) const
{
    return m_Attlist.NotEmpty();
}

inline
bool CAsapratio_peptide_data_Base::CanGetAttlist(void) const
{
    return true;
}

inline
const CAsapratio_peptide_data_Base::TAttlist& CAsapratio_peptide_data_Base::GetAttlist(void) const
{
    if ( !m_Attlist ) {
        const_cast<CAsapratio_peptide_data_Base*>(this)->ResetAttlist();
    }
    return (*m_Attlist);
}

inline
CAsapratio_peptide_data_Base::TAttlist& CAsapratio_peptide_data_Base::SetAttlist(void)
{
    if ( !m_Attlist ) {
        ResetAttlist();
    }
    return (*m_Attlist);
}

inline
bool CAsapratio_peptide_data_Base::IsSetAsapratio_contribution(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CAsapratio_peptide_data_Base::CanGetAsapratio_contribution(void) const
{
    return true;
}

inline
const CAsapratio_peptide_data_Base::TAsapratio_contribution& CAsapratio_peptide_data_Base::GetAsapratio_contribution(void) const
{
    return m_Asapratio_contribution;
}

inline
CAsapratio_peptide_data_Base::TAsapratio_contribution& CAsapratio_peptide_data_Base::SetAsapratio_contribution(void)
{
    m_set_State[0] |= 0x4;
    return m_Asapratio_contribution;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // ALGO_MS_FORMATS_PEPXML_ASAPRATIO_PEPTIDE_DATA_BASE_HPP
