/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'xsd_sample_lib.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <sample/lib/xsd/Data_set_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CData_set_id_Base::C_Data_set_id_type::C_Attlist::, EData_set_id_type_Attlist_value, true)
{
    SET_ENUM_INTERNAL_NAME("Data-set-id.Data-set-id_type.Attlist", "value");
    SET_ENUM_MODULE("xsd_sample_lib");
    ADD_ENUM_VALUE("dump", eData_set_id_type_Attlist_value_dump);
    ADD_ENUM_VALUE("query", eData_set_id_type_Attlist_value_query);
    ADD_ENUM_VALUE("single", eData_set_id_type_Attlist_value_single);
}
END_ENUM_INFO

void CData_set_id_Base::C_Data_set_id_type::C_Attlist::Reset(void)
{
    ResetValue();
}

BEGIN_NAMED_CLASS_INFO("", CData_set_id_Base::C_Data_set_id_type::C_Attlist)
{
    SET_INTERNAL_NAME("Data-set-id.Data-set-id_type", "Attlist");
    SET_CLASS_MODULE("xsd_sample_lib");
    ADD_NAMED_ENUM_MEMBER("value", m_Value, EData_set_id_type_Attlist_value)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CData_set_id_Base::C_Data_set_id_type::C_Attlist::C_Attlist(void)
    : m_Value((EData_set_id_type_Attlist_value)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CData_set_id_Base::C_Data_set_id_type::C_Attlist::~C_Attlist(void)
{
}


void CData_set_id_Base::C_Data_set_id_type::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CData_set_id_Base::C_Data_set_id_type::SetAttlist(CData_set_id_Base::C_Data_set_id_type::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CData_set_id_Base::C_Data_set_id_type::Reset(void)
{
    ResetAttlist();
    ResetData_set_id_type();
}

BEGIN_NAMED_CLASS_INFO("Data-set-id_type", CData_set_id_Base::C_Data_set_id_type)
{
    SET_CLASS_MODULE("xsd_sample_lib");
    SET_NAMESPACE("http://www.ncbi.nlm.nih.gov")->SetNsQualified(true);
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_STD_MEMBER("Data-set-id_type", m_Data_set_id_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix()->SetNotag();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CData_set_id_Base::C_Data_set_id_type::C_Data_set_id_type(void)
    : m_Data_set_id_type(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CData_set_id_Base::C_Data_set_id_type::~C_Data_set_id_type(void)
{
}


void CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::Reset(void)
{
    ResetData_set_id_uids_E();
}

BEGIN_NAMED_CLASS_INFO("", CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids)
{
    SET_INTERNAL_NAME("Data-set-id.Data-set-id_uids.EData-set-id_uids", "E");
    SET_CLASS_MODULE("xsd_sample_lib");
    SET_NAMESPACE("http://www.ncbi.nlm.nih.gov")->SetNsQualified(true);
    ADD_NAMED_STD_MEMBER("Data-set-id_uids_E", m_Data_set_id_uids_E)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::C_E_EData_set_id_uids(void)
    : m_Data_set_id_uids_E(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CData_set_id_Base::C_Data_set_id_uids::C_E_EData_set_id_uids::~C_E_EData_set_id_uids(void)
{
}


void CData_set_id_Base::C_Data_set_id_uids::ResetEData_set_id_uids(void)
{
    m_EData_set_id_uids.clear();
    m_set_State[0] &= ~0x3;
}

void CData_set_id_Base::C_Data_set_id_uids::Reset(void)
{
    ResetEData_set_id_uids();
}

BEGIN_NAMED_CLASS_INFO("Data-set-id_uids", CData_set_id_Base::C_Data_set_id_uids)
{
    SET_CLASS_MODULE("xsd_sample_lib");
    ADD_NAMED_MEMBER("EData-set-id_uids", m_EData_set_id_uids, STL_list, (STL_CRef, (CLASS, (C_E_EData_set_id_uids))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix()->SetNotag()->SetNsQualified(true);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CData_set_id_Base::C_Data_set_id_uids::C_Data_set_id_uids(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CData_set_id_Base::C_Data_set_id_uids::~C_Data_set_id_uids(void)
{
}


void CData_set_id_Base::ResetData_set_id_version(void)
{
    m_Data_set_id_version.erase();
    m_set_State[0] &= ~0x3;
}

void CData_set_id_Base::ResetData_set_id_name(void)
{
    m_Data_set_id_name.erase();
    m_set_State[0] &= ~0xc;
}

void CData_set_id_Base::ResetData_set_id_type(void)
{
    if ( !m_Data_set_id_type ) {
        m_Data_set_id_type.Reset(new TData_set_id_type());
        return;
    }
    (*m_Data_set_id_type).Reset();
}

void CData_set_id_Base::SetData_set_id_type(CData_set_id_Base::TData_set_id_type& value)
{
    m_Data_set_id_type.Reset(&value);
}

void CData_set_id_Base::ResetData_set_id_uids(void)
{
    m_Data_set_id_uids.Reset();
}

void CData_set_id_Base::SetData_set_id_uids(CData_set_id_Base::TData_set_id_uids& value)
{
    m_Data_set_id_uids.Reset(&value);
}

CData_set_id_Base::TData_set_id_uids& CData_set_id_Base::SetData_set_id_uids(void)
{
    if ( !m_Data_set_id_uids )
        m_Data_set_id_uids.Reset(new C_Data_set_id_uids());
    return (*m_Data_set_id_uids);
}

void CData_set_id_Base::Reset(void)
{
    ResetData_set_id_version();
    ResetData_set_id_name();
    ResetData_set_id_num();
    ResetData_set_id_type();
    ResetData_set_id_weight();
    ResetData_set_id_uids();
}

BEGIN_NAMED_BASE_CLASS_INFO("Data-set-id", CData_set_id)
{
    SET_CLASS_MODULE("xsd_sample_lib");
    SET_NAMESPACE("http://www.ncbi.nlm.nih.gov")->SetNsQualified(true);
    ADD_NAMED_STD_MEMBER("Data-set-id_version", m_Data_set_id_version)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("Data-set-id_name", m_Data_set_id_name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("Data-set-id_num", m_Data_set_id_num)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Data-set-id_type", m_Data_set_id_type, C_Data_set_id_type)->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("Data-set-id_weight", m_Data_set_id_weight)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Data-set-id_uids", m_Data_set_id_uids, C_Data_set_id_uids)->SetOptional()->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CData_set_id_Base::CData_set_id_Base(void)
    : m_Data_set_id_num(0), m_Data_set_id_weight(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetData_set_id_type();
    }
}

// destructor
CData_set_id_Base::~CData_set_id_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

