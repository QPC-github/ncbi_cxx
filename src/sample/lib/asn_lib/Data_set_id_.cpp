/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'asn_sample_lib.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <sample/lib/asn_lib/Data_set_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CData_set_id_Base::, EType, true)
{
    SET_ENUM_INTERNAL_NAME("Data-set-id", "type");
    SET_ENUM_MODULE("NCBI-sample");
    ADD_ENUM_VALUE("dump", eType_dump);
    ADD_ENUM_VALUE("query", eType_query);
    ADD_ENUM_VALUE("single", eType_single);
}
END_ENUM_INFO

void CData_set_id_Base::ResetVersion(void)
{
    m_Version.erase();
    m_set_State[0] &= ~0x3;
}

void CData_set_id_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0xc;
}

void CData_set_id_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc00;
}

void CData_set_id_Base::Reset(void)
{
    ResetVersion();
    ResetName();
    ResetNum();
    ResetType();
    ResetWeight();
    ResetUids();
}

BEGIN_NAMED_BASE_CLASS_INFO("Data-set-id", CData_set_id)
{
    SET_CLASS_MODULE("NCBI-sample");
    ADD_NAMED_STD_MEMBER("version", m_Version)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("name", m_Name, CStringUTF8, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("weight", m_Weight)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CData_set_id_Base::CData_set_id_Base(void)
    : m_Num(0), m_Type((EType)(0)), m_Weight(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CData_set_id_Base::~CData_set_id_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

