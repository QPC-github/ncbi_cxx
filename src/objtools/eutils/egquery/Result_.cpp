/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'egquery.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/egquery/Result.hpp>
#include <objtools/eutils/egquery/EGQueryResult.hpp>
BEGIN_egquery_SCOPE // namespace egquery::


// generated classes

void CResult_Base::ResetTerm(void)
{
    m_Term.erase();
    m_set_State[0] &= ~0x3;
}

void CResult_Base::ResetEGQueryResult(void)
{
    if ( !m_EGQueryResult ) {
        m_EGQueryResult.Reset(new TEGQueryResult());
        return;
    }
    (*m_EGQueryResult).Reset();
}

void CResult_Base::SetEGQueryResult(CResult_Base::TEGQueryResult& value)
{
    m_EGQueryResult.Reset(&value);
}

void CResult_Base::Reset(void)
{
    ResetTerm();
    ResetEGQueryResult();
}

BEGIN_NAMED_BASE_CLASS_INFO("Result", CResult)
{
    SET_CLASS_MODULE("egquery");
    ADD_NAMED_STD_MEMBER("Term", m_Term)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("eGQueryResult", m_EGQueryResult, CEGQueryResult)->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CResult_Base::CResult_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetEGQueryResult();
    }
}

// destructor
CResult_Base::~CResult_Base(void)
{
}



END_egquery_SCOPE // namespace egquery::

