/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'esearch.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/esearch/TranslationStack.hpp>
#include <objtools/eutils/esearch/TermSet.hpp>
BEGIN_esearch_SCOPE // namespace esearch::


// generated classes

void CTranslationStack_Base::C_Data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CTranslationStack_Base::C_Data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_OP:
        m_string.Destruct();
        break;
    case e_TermSet:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CTranslationStack_Base::C_Data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_TermSet:
        (m_object = new(pool) esearch::CTermSet())->AddReference();
        break;
    case e_OP:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CTranslationStack_Base::C_Data::sm_SelectionNames[] = {
    "not set",
    "TermSet",
    "OP"
};

NCBI_NS_STD::string CTranslationStack_Base::C_Data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CTranslationStack_Base::C_Data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CTranslationStack_Base::C_Data::TTermSet& CTranslationStack_Base::C_Data::GetTermSet(void) const
{
    CheckSelected(e_TermSet);
    return *static_cast<const TTermSet*>(m_object);
}

CTranslationStack_Base::C_Data::TTermSet& CTranslationStack_Base::C_Data::SetTermSet(void)
{
    Select(e_TermSet, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTermSet*>(m_object);
}

void CTranslationStack_Base::C_Data::SetTermSet(CTranslationStack_Base::C_Data::TTermSet& value)
{
    TTermSet* ptr = &value;
    if ( m_choice != e_TermSet || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_TermSet;
    }
}

void CTranslationStack_Base::C_Data::SetOP(const CTranslationStack_Base::C_Data::TOP& value)
{
    Select(e_OP, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CTranslationStack_Base::C_Data)
{
    SET_INTERNAL_NAME("TranslationStack", "E");
    SET_CHOICE_MODULE("esearch");
    ADD_NAMED_REF_CHOICE_VARIANT("TermSet", m_object, CTermSet)->SetNoPrefix();
    ADD_NAMED_BUF_CHOICE_VARIANT("OP", m_string, STD, (NCBI_NS_STD::string))->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CTranslationStack_Base::C_Data::C_Data(void)
    : m_choice(e_not_set)
{
}

// destructor
CTranslationStack_Base::C_Data::~C_Data(void)
{
    Reset();
}


void CTranslationStack_Base::Reset(void)
{
    m_data.clear();
    m_set_State[0] &= ~0x3;
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("TranslationStack", CTranslationStack)
{
    SET_CLASS_MODULE("esearch");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (C_Data))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CTranslationStack_Base::CTranslationStack_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CTranslationStack_Base::~CTranslationStack_Base(void)
{
}



END_esearch_SCOPE // namespace esearch::

