/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'esearch.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/esearch/ESearchResult.hpp>
#include <objtools/eutils/esearch/ErrorList.hpp>
#include <objtools/eutils/esearch/IdList.hpp>
#include <objtools/eutils/esearch/TranslationSet.hpp>
#include <objtools/eutils/esearch/TranslationStack.hpp>
#include <objtools/eutils/esearch/WarningList.hpp>
BEGIN_esearch_SCOPE // namespace esearch::


// generated classes

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetRetMax(void)
{
    m_RetMax.erase();
    m_set_State[0] &= ~0x3;
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetRetStart(void)
{
    m_RetStart.erase();
    m_set_State[0] &= ~0xc;
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetQueryKey(void)
{
    m_QueryKey.erase();
    m_set_State[0] &= ~0x30;
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetWebEnv(void)
{
    m_WebEnv.erase();
    m_set_State[0] &= ~0xc0;
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetIdList(void)
{
    if ( !m_IdList ) {
        m_IdList.Reset(new TIdList());
        return;
    }
    (*m_IdList).Reset();
}

void CESearchResult_Base::C_Data::C_Info::C_Content::SetIdList(CESearchResult_Base::C_Data::C_Info::C_Content::TIdList& value)
{
    m_IdList.Reset(&value);
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetTranslationSet(void)
{
    if ( !m_TranslationSet ) {
        m_TranslationSet.Reset(new TTranslationSet());
        return;
    }
    (*m_TranslationSet).Reset();
}

void CESearchResult_Base::C_Data::C_Info::C_Content::SetTranslationSet(CESearchResult_Base::C_Data::C_Info::C_Content::TTranslationSet& value)
{
    m_TranslationSet.Reset(&value);
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetTranslationStack(void)
{
    m_TranslationStack.Reset();
}

void CESearchResult_Base::C_Data::C_Info::C_Content::SetTranslationStack(CESearchResult_Base::C_Data::C_Info::C_Content::TTranslationStack& value)
{
    m_TranslationStack.Reset(&value);
}

CESearchResult_Base::C_Data::C_Info::C_Content::TTranslationStack& CESearchResult_Base::C_Data::C_Info::C_Content::SetTranslationStack(void)
{
    if ( !m_TranslationStack )
        m_TranslationStack.Reset(new esearch::CTranslationStack());
    return (*m_TranslationStack);
}

void CESearchResult_Base::C_Data::C_Info::C_Content::ResetQueryTranslation(void)
{
    m_QueryTranslation.erase();
    m_set_State[0] &= ~0xc000;
}

void CESearchResult_Base::C_Data::C_Info::C_Content::Reset(void)
{
    ResetRetMax();
    ResetRetStart();
    ResetQueryKey();
    ResetWebEnv();
    ResetIdList();
    ResetTranslationSet();
    ResetTranslationStack();
    ResetQueryTranslation();
}

BEGIN_NAMED_CLASS_INFO("", CESearchResult_Base::C_Data::C_Info::C_Content)
{
    SET_INTERNAL_NAME("eSearchResult.CE.CR", "RRQWITTQ");
    SET_CLASS_MODULE("esearch");
    ADD_NAMED_STD_MEMBER("RetMax", m_RetMax)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("RetStart", m_RetStart)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("QueryKey", m_QueryKey)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("WebEnv", m_WebEnv)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("IdList", m_IdList, CIdList)->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("TranslationSet", m_TranslationSet, CTranslationSet)->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("TranslationStack", m_TranslationStack, CTranslationStack)->SetOptional()->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("QueryTranslation", m_QueryTranslation)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CESearchResult_Base::C_Data::C_Info::C_Content::C_Content(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetIdList();
        ResetTranslationSet();
    }
}

// destructor
CESearchResult_Base::C_Data::C_Info::C_Content::~C_Content(void)
{
}


void CESearchResult_Base::C_Data::C_Info::ResetCount(void)
{
    m_Count.erase();
    m_set_State[0] &= ~0x3;
}

void CESearchResult_Base::C_Data::C_Info::ResetContent(void)
{
    m_Content.Reset();
}

void CESearchResult_Base::C_Data::C_Info::SetContent(CESearchResult_Base::C_Data::C_Info::TContent& value)
{
    m_Content.Reset(&value);
}

CESearchResult_Base::C_Data::C_Info::TContent& CESearchResult_Base::C_Data::C_Info::SetContent(void)
{
    if ( !m_Content )
        m_Content.Reset(new C_Content());
    return (*m_Content);
}

void CESearchResult_Base::C_Data::C_Info::Reset(void)
{
    ResetCount();
    ResetContent();
}

BEGIN_NAMED_CLASS_INFO("", CESearchResult_Base::C_Data::C_Info)
{
    SET_INTERNAL_NAME("eSearchResult.CE", "CR");
    SET_CLASS_MODULE("esearch");
    ADD_NAMED_STD_MEMBER("Count", m_Count)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Content", m_Content, C_Content)->SetOptional()->SetNoPrefix()->SetNotag();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CESearchResult_Base::C_Data::C_Info::C_Info(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CESearchResult_Base::C_Data::C_Info::~C_Info(void)
{
}


void CESearchResult_Base::C_Data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CESearchResult_Base::C_Data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_ERROR:
        m_string.Destruct();
        break;
    case e_Info:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CESearchResult_Base::C_Data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Info:
        (m_object = new(pool) C_Info())->AddReference();
        break;
    case e_ERROR:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CESearchResult_Base::C_Data::sm_SelectionNames[] = {
    "not set",
    "Info",
    "ERROR"
};

NCBI_NS_STD::string CESearchResult_Base::C_Data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CESearchResult_Base::C_Data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CESearchResult_Base::C_Data::TInfo& CESearchResult_Base::C_Data::GetInfo(void) const
{
    CheckSelected(e_Info);
    return *static_cast<const TInfo*>(m_object);
}

CESearchResult_Base::C_Data::TInfo& CESearchResult_Base::C_Data::SetInfo(void)
{
    Select(e_Info, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TInfo*>(m_object);
}

void CESearchResult_Base::C_Data::SetInfo(CESearchResult_Base::C_Data::TInfo& value)
{
    TInfo* ptr = &value;
    if ( m_choice != e_Info || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Info;
    }
}

void CESearchResult_Base::C_Data::SetERROR(const CESearchResult_Base::C_Data::TERROR& value)
{
    Select(e_ERROR, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CESearchResult_Base::C_Data)
{
    SET_INTERNAL_NAME("eSearchResult", "CE");
    SET_CHOICE_MODULE("esearch");
    ADD_NAMED_REF_CHOICE_VARIANT("Info", m_object, C_Info)->SetNoPrefix()->SetNotag();
    ADD_NAMED_BUF_CHOICE_VARIANT("ERROR", m_string, STD, (NCBI_NS_STD::string))->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CESearchResult_Base::C_Data::C_Data(void)
    : m_choice(e_not_set)
{
}

// destructor
CESearchResult_Base::C_Data::~C_Data(void)
{
    Reset();
}


void CESearchResult_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CESearchResult_Base::SetData(CESearchResult_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CESearchResult_Base::ResetErrorList(void)
{
    m_ErrorList.Reset();
}

void CESearchResult_Base::SetErrorList(CESearchResult_Base::TErrorList& value)
{
    m_ErrorList.Reset(&value);
}

CESearchResult_Base::TErrorList& CESearchResult_Base::SetErrorList(void)
{
    if ( !m_ErrorList )
        m_ErrorList.Reset(new esearch::CErrorList());
    return (*m_ErrorList);
}

void CESearchResult_Base::ResetWarningList(void)
{
    m_WarningList.Reset();
}

void CESearchResult_Base::SetWarningList(CESearchResult_Base::TWarningList& value)
{
    m_WarningList.Reset(&value);
}

CESearchResult_Base::TWarningList& CESearchResult_Base::SetWarningList(void)
{
    if ( !m_WarningList )
        m_WarningList.Reset(new esearch::CWarningList());
    return (*m_WarningList);
}

void CESearchResult_Base::Reset(void)
{
    ResetData();
    ResetErrorList();
    ResetWarningList();
}

BEGIN_NAMED_BASE_CLASS_INFO("eSearchResult", CESearchResult)
{
    SET_CLASS_MODULE("esearch");
    ADD_NAMED_REF_MEMBER("Data", m_Data, C_Data)->SetNoPrefix()->SetNotag();
    ADD_NAMED_REF_MEMBER("ErrorList", m_ErrorList, CErrorList)->SetOptional()->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("WarningList", m_WarningList, CWarningList)->SetOptional()->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CESearchResult_Base::CESearchResult_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetData();
    }
}

// destructor
CESearchResult_Base::~CESearchResult_Base(void)
{
}



END_esearch_SCOPE // namespace esearch::

