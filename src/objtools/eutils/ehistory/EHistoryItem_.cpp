/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'ehistory.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/ehistory/EHistoryItem.hpp>
BEGIN_ehistory_SCOPE // namespace ehistory::


// generated classes

void CEHistoryItem_Base::C_E::ResetQueryKey(void)
{
    m_QueryKey.erase();
    m_set_State[0] &= ~0x3;
}

void CEHistoryItem_Base::C_E::ResetQueryName(void)
{
    m_QueryName.erase();
    m_set_State[0] &= ~0xc;
}

void CEHistoryItem_Base::C_E::ResetDbName(void)
{
    m_DbName.erase();
    m_set_State[0] &= ~0x30;
}

void CEHistoryItem_Base::C_E::ResetTitle(void)
{
    m_Title.erase();
    m_set_State[0] &= ~0xc0;
}

void CEHistoryItem_Base::C_E::ResetTime(void)
{
    m_Time.erase();
    m_set_State[0] &= ~0x300;
}

void CEHistoryItem_Base::C_E::ResetCount(void)
{
    m_Count.erase();
    m_set_State[0] &= ~0xc00;
}

void CEHistoryItem_Base::C_E::Reset(void)
{
    ResetQueryKey();
    ResetQueryName();
    ResetDbName();
    ResetTitle();
    ResetTime();
    ResetCount();
}

BEGIN_NAMED_CLASS_INFO("", CEHistoryItem_Base::C_E)
{
    SET_INTERNAL_NAME("eHistoryItem", "E");
    SET_CLASS_MODULE("ehistory");
    ADD_NAMED_STD_MEMBER("QueryKey", m_QueryKey)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("QueryName", m_QueryName)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("DbName", m_DbName)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("Title", m_Title)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("Time", m_Time)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("Count", m_Count)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CEHistoryItem_Base::C_E::C_E(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CEHistoryItem_Base::C_E::~C_E(void)
{
}


void CEHistoryItem_Base::Reset(void)
{
    m_data.clear();
    m_set_State[0] &= ~0x3;
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("eHistoryItem", CEHistoryItem)
{
    SET_CLASS_MODULE("ehistory");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (C_E))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CEHistoryItem_Base::CEHistoryItem_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CEHistoryItem_Base::~CEHistoryItem_Base(void)
{
}



END_ehistory_SCOPE // namespace ehistory::

