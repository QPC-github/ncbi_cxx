/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'linkout.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/linkout/Link.hpp>
#include <objtools/eutils/linkout/IconUrl.hpp>
#include <objtools/eutils/linkout/ObjectSelector.hpp>
#include <objtools/eutils/linkout/ObjectUrl.hpp>
#include <objtools/eutils/linkout/SubObjectSelector.hpp>
BEGIN_linkout_SCOPE // namespace linkout::


// generated classes

void CLink_Base::C_Selector::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CLink_Base::C_Selector::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_ObjectSelector:
    case e_SubObjectSelector:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CLink_Base::C_Selector::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_ObjectSelector:
        (m_object = new(pool) linkout::CObjectSelector())->AddReference();
        break;
    case e_SubObjectSelector:
        (m_object = new(pool) linkout::CSubObjectSelector())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CLink_Base::C_Selector::sm_SelectionNames[] = {
    "not set",
    "ObjectSelector",
    "SubObjectSelector"
};

NCBI_NS_STD::string CLink_Base::C_Selector::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CLink_Base::C_Selector::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CLink_Base::C_Selector::TObjectSelector& CLink_Base::C_Selector::GetObjectSelector(void) const
{
    CheckSelected(e_ObjectSelector);
    return *static_cast<const TObjectSelector*>(m_object);
}

CLink_Base::C_Selector::TObjectSelector& CLink_Base::C_Selector::SetObjectSelector(void)
{
    Select(e_ObjectSelector, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TObjectSelector*>(m_object);
}

void CLink_Base::C_Selector::SetObjectSelector(CLink_Base::C_Selector::TObjectSelector& value)
{
    TObjectSelector* ptr = &value;
    if ( m_choice != e_ObjectSelector || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_ObjectSelector;
    }
}

const CLink_Base::C_Selector::TSubObjectSelector& CLink_Base::C_Selector::GetSubObjectSelector(void) const
{
    CheckSelected(e_SubObjectSelector);
    return *static_cast<const TSubObjectSelector*>(m_object);
}

CLink_Base::C_Selector::TSubObjectSelector& CLink_Base::C_Selector::SetSubObjectSelector(void)
{
    Select(e_SubObjectSelector, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSubObjectSelector*>(m_object);
}

void CLink_Base::C_Selector::SetSubObjectSelector(CLink_Base::C_Selector::TSubObjectSelector& value)
{
    TSubObjectSelector* ptr = &value;
    if ( m_choice != e_SubObjectSelector || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_SubObjectSelector;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CLink_Base::C_Selector)
{
    SET_INTERNAL_NAME("Link", "OS");
    SET_CHOICE_MODULE("linkout");
    ADD_NAMED_REF_CHOICE_VARIANT("ObjectSelector", m_object, CObjectSelector)->SetNoPrefix();
    ADD_NAMED_REF_CHOICE_VARIANT("SubObjectSelector", m_object, CSubObjectSelector)->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CLink_Base::C_Selector::C_Selector(void)
    : m_choice(e_not_set)
{
}

// destructor
CLink_Base::C_Selector::~C_Selector(void)
{
    Reset();
}


void CLink_Base::ResetLinkId(void)
{
    m_LinkId.erase();
    m_set_State[0] &= ~0x3;
}

void CLink_Base::ResetProviderId(void)
{
    m_ProviderId.erase();
    m_set_State[0] &= ~0xc;
}

void CLink_Base::ResetIconUrl(void)
{
    m_IconUrl.clear();
    m_set_State[0] &= ~0x30;
}

void CLink_Base::ResetSelector(void)
{
    if ( !m_Selector ) {
        m_Selector.Reset(new TSelector());
        return;
    }
    (*m_Selector).Reset();
}

void CLink_Base::SetSelector(CLink_Base::TSelector& value)
{
    m_Selector.Reset(&value);
}

void CLink_Base::ResetObjectUrl(void)
{
    m_ObjectUrl.clear();
    m_set_State[0] &= ~0x300;
}

void CLink_Base::Reset(void)
{
    ResetLinkId();
    ResetProviderId();
    ResetIconUrl();
    ResetSelector();
    ResetObjectUrl();
}

BEGIN_NAMED_BASE_CLASS_INFO("Link", CLink)
{
    SET_CLASS_MODULE("linkout");
    ADD_NAMED_STD_MEMBER("LinkId", m_LinkId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("ProviderId", m_ProviderId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("IconUrl", m_IconUrl, STL_list, (STL_CRef, (CLASS, (CIconUrl))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Selector", m_Selector, C_Selector)->SetNoPrefix()->SetNotag();
    ADD_NAMED_MEMBER("ObjectUrl", m_ObjectUrl, STL_list, (STL_CRef, (CLASS, (CObjectUrl))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CLink_Base::CLink_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSelector();
    }
}

// destructor
CLink_Base::~CLink_Base(void)
{
}



END_linkout_SCOPE // namespace linkout::

