/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'linkout.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/linkout/ObjectUrl.hpp>
#include <objtools/eutils/linkout/Rule.hpp>
#include <objtools/eutils/linkout/RuleToMany.hpp>
BEGIN_linkout_SCOPE // namespace linkout::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CObjectUrl_Base::C_Attlist::, EAttlist_LNG, false)
{
    SET_ENUM_INTERNAL_NAME("ObjectUrl.Attlist", "LNG");
    SET_ENUM_MODULE("linkout");
    ADD_ENUM_VALUE("DA", eAttlist_LNG_DA);
    ADD_ENUM_VALUE("DE", eAttlist_LNG_DE);
    ADD_ENUM_VALUE("EN", eAttlist_LNG_EN);
    ADD_ENUM_VALUE("EL", eAttlist_LNG_EL);
    ADD_ENUM_VALUE("ES", eAttlist_LNG_ES);
    ADD_ENUM_VALUE("FR", eAttlist_LNG_FR);
    ADD_ENUM_VALUE("IT", eAttlist_LNG_IT);
    ADD_ENUM_VALUE("IW", eAttlist_LNG_IW);
    ADD_ENUM_VALUE("JA", eAttlist_LNG_JA);
    ADD_ENUM_VALUE("NL", eAttlist_LNG_NL);
    ADD_ENUM_VALUE("NO", eAttlist_LNG_NO);
    ADD_ENUM_VALUE("RU", eAttlist_LNG_RU);
    ADD_ENUM_VALUE("SV", eAttlist_LNG_SV);
    ADD_ENUM_VALUE("ZH", eAttlist_LNG_ZH);
}
END_ENUM_INFO

void CObjectUrl_Base::C_Attlist::Reset(void)
{
    ResetLNG();
}

BEGIN_NAMED_CLASS_INFO("", CObjectUrl_Base::C_Attlist)
{
    SET_INTERNAL_NAME("ObjectUrl", "Attlist");
    SET_CLASS_MODULE("linkout");
    ADD_NAMED_ENUM_MEMBER("LNG", m_LNG, EAttlist_LNG)->SetDefault(new TLNG(eAttlist_LNG_EN))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CObjectUrl_Base::C_Attlist::C_Attlist(void)
    : m_LNG(eAttlist_LNG_EN)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CObjectUrl_Base::C_Attlist::~C_Attlist(void)
{
}


void CObjectUrl_Base::C_Data::C_BaseData::C_Rule::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CObjectUrl_Base::C_Data::C_BaseData::C_Rule::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Rule:
    case e_RuleToMany:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CObjectUrl_Base::C_Data::C_BaseData::C_Rule::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Rule:
        (m_object = new(pool) linkout::CRule())->AddReference();
        break;
    case e_RuleToMany:
        (m_object = new(pool) linkout::CRuleToMany())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CObjectUrl_Base::C_Data::C_BaseData::C_Rule::sm_SelectionNames[] = {
    "not set",
    "Rule",
    "RuleToMany"
};

NCBI_NS_STD::string CObjectUrl_Base::C_Data::C_BaseData::C_Rule::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CObjectUrl_Base::C_Data::C_BaseData::C_Rule::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CObjectUrl_Base::C_Data::C_BaseData::C_Rule::TRule& CObjectUrl_Base::C_Data::C_BaseData::C_Rule::GetRule(void) const
{
    CheckSelected(e_Rule);
    return *static_cast<const TRule*>(m_object);
}

CObjectUrl_Base::C_Data::C_BaseData::C_Rule::TRule& CObjectUrl_Base::C_Data::C_BaseData::C_Rule::SetRule(void)
{
    Select(e_Rule, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRule*>(m_object);
}

void CObjectUrl_Base::C_Data::C_BaseData::C_Rule::SetRule(CObjectUrl_Base::C_Data::C_BaseData::C_Rule::TRule& value)
{
    TRule* ptr = &value;
    if ( m_choice != e_Rule || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Rule;
    }
}

const CObjectUrl_Base::C_Data::C_BaseData::C_Rule::TRuleToMany& CObjectUrl_Base::C_Data::C_BaseData::C_Rule::GetRuleToMany(void) const
{
    CheckSelected(e_RuleToMany);
    return *static_cast<const TRuleToMany*>(m_object);
}

CObjectUrl_Base::C_Data::C_BaseData::C_Rule::TRuleToMany& CObjectUrl_Base::C_Data::C_BaseData::C_Rule::SetRuleToMany(void)
{
    Select(e_RuleToMany, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRuleToMany*>(m_object);
}

void CObjectUrl_Base::C_Data::C_BaseData::C_Rule::SetRuleToMany(CObjectUrl_Base::C_Data::C_BaseData::C_Rule::TRuleToMany& value)
{
    TRuleToMany* ptr = &value;
    if ( m_choice != e_RuleToMany || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_RuleToMany;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CObjectUrl_Base::C_Data::C_BaseData::C_Rule)
{
    SET_INTERNAL_NAME("ObjectUrl.BR_2.BR", "RR");
    SET_CHOICE_MODULE("linkout");
    ADD_NAMED_REF_CHOICE_VARIANT("Rule", m_object, CRule)->SetNoPrefix();
    ADD_NAMED_REF_CHOICE_VARIANT("RuleToMany", m_object, CRuleToMany)->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CObjectUrl_Base::C_Data::C_BaseData::C_Rule::C_Rule(void)
    : m_choice(e_not_set)
{
}

// destructor
CObjectUrl_Base::C_Data::C_BaseData::C_Rule::~C_Rule(void)
{
    Reset();
}


void CObjectUrl_Base::C_Data::C_BaseData::ResetBase(void)
{
    m_Base.erase();
    m_set_State[0] &= ~0x3;
}

void CObjectUrl_Base::C_Data::C_BaseData::ResetRule(void)
{
    m_Rule.Reset();
}

void CObjectUrl_Base::C_Data::C_BaseData::SetRule(CObjectUrl_Base::C_Data::C_BaseData::TRule& value)
{
    m_Rule.Reset(&value);
}

CObjectUrl_Base::C_Data::C_BaseData::TRule& CObjectUrl_Base::C_Data::C_BaseData::SetRule(void)
{
    if ( !m_Rule )
        m_Rule.Reset(new C_Rule());
    return (*m_Rule);
}

void CObjectUrl_Base::C_Data::C_BaseData::Reset(void)
{
    ResetBase();
    ResetRule();
}

BEGIN_NAMED_CLASS_INFO("", CObjectUrl_Base::C_Data::C_BaseData)
{
    SET_INTERNAL_NAME("ObjectUrl.BR_2", "BR");
    SET_CLASS_MODULE("linkout");
    ADD_NAMED_STD_MEMBER("Base", m_Base)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Rule", m_Rule, C_Rule)->SetOptional()->SetNoPrefix()->SetNotag();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CObjectUrl_Base::C_Data::C_BaseData::C_BaseData(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CObjectUrl_Base::C_Data::C_BaseData::~C_BaseData(void)
{
}


void CObjectUrl_Base::C_Data::C_Rule::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CObjectUrl_Base::C_Data::C_Rule::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Rule:
    case e_RuleToMany:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CObjectUrl_Base::C_Data::C_Rule::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Rule:
        (m_object = new(pool) linkout::CRule())->AddReference();
        break;
    case e_RuleToMany:
        (m_object = new(pool) linkout::CRuleToMany())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CObjectUrl_Base::C_Data::C_Rule::sm_SelectionNames[] = {
    "not set",
    "Rule",
    "RuleToMany"
};

NCBI_NS_STD::string CObjectUrl_Base::C_Data::C_Rule::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CObjectUrl_Base::C_Data::C_Rule::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CObjectUrl_Base::C_Data::C_Rule::TRule& CObjectUrl_Base::C_Data::C_Rule::GetRule(void) const
{
    CheckSelected(e_Rule);
    return *static_cast<const TRule*>(m_object);
}

CObjectUrl_Base::C_Data::C_Rule::TRule& CObjectUrl_Base::C_Data::C_Rule::SetRule(void)
{
    Select(e_Rule, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRule*>(m_object);
}

void CObjectUrl_Base::C_Data::C_Rule::SetRule(CObjectUrl_Base::C_Data::C_Rule::TRule& value)
{
    TRule* ptr = &value;
    if ( m_choice != e_Rule || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Rule;
    }
}

const CObjectUrl_Base::C_Data::C_Rule::TRuleToMany& CObjectUrl_Base::C_Data::C_Rule::GetRuleToMany(void) const
{
    CheckSelected(e_RuleToMany);
    return *static_cast<const TRuleToMany*>(m_object);
}

CObjectUrl_Base::C_Data::C_Rule::TRuleToMany& CObjectUrl_Base::C_Data::C_Rule::SetRuleToMany(void)
{
    Select(e_RuleToMany, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRuleToMany*>(m_object);
}

void CObjectUrl_Base::C_Data::C_Rule::SetRuleToMany(CObjectUrl_Base::C_Data::C_Rule::TRuleToMany& value)
{
    TRuleToMany* ptr = &value;
    if ( m_choice != e_RuleToMany || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_RuleToMany;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CObjectUrl_Base::C_Data::C_Rule)
{
    SET_INTERNAL_NAME("ObjectUrl.BR_2", "RR");
    SET_CHOICE_MODULE("linkout");
    ADD_NAMED_REF_CHOICE_VARIANT("Rule", m_object, CRule)->SetNoPrefix();
    ADD_NAMED_REF_CHOICE_VARIANT("RuleToMany", m_object, CRuleToMany)->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CObjectUrl_Base::C_Data::C_Rule::C_Rule(void)
    : m_choice(e_not_set)
{
}

// destructor
CObjectUrl_Base::C_Data::C_Rule::~C_Rule(void)
{
    Reset();
}


void CObjectUrl_Base::C_Data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CObjectUrl_Base::C_Data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_BaseData:
    case e_Rule:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CObjectUrl_Base::C_Data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_BaseData:
        (m_object = new(pool) C_BaseData())->AddReference();
        break;
    case e_Rule:
        (m_object = new(pool) C_Rule())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CObjectUrl_Base::C_Data::sm_SelectionNames[] = {
    "not set",
    "BaseData",
    "Rule"
};

NCBI_NS_STD::string CObjectUrl_Base::C_Data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CObjectUrl_Base::C_Data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CObjectUrl_Base::C_Data::TBaseData& CObjectUrl_Base::C_Data::GetBaseData(void) const
{
    CheckSelected(e_BaseData);
    return *static_cast<const TBaseData*>(m_object);
}

CObjectUrl_Base::C_Data::TBaseData& CObjectUrl_Base::C_Data::SetBaseData(void)
{
    Select(e_BaseData, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBaseData*>(m_object);
}

void CObjectUrl_Base::C_Data::SetBaseData(CObjectUrl_Base::C_Data::TBaseData& value)
{
    TBaseData* ptr = &value;
    if ( m_choice != e_BaseData || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_BaseData;
    }
}

const CObjectUrl_Base::C_Data::TRule& CObjectUrl_Base::C_Data::GetRule(void) const
{
    CheckSelected(e_Rule);
    return *static_cast<const TRule*>(m_object);
}

CObjectUrl_Base::C_Data::TRule& CObjectUrl_Base::C_Data::SetRule(void)
{
    Select(e_Rule, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRule*>(m_object);
}

void CObjectUrl_Base::C_Data::SetRule(CObjectUrl_Base::C_Data::TRule& value)
{
    TRule* ptr = &value;
    if ( m_choice != e_Rule || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Rule;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CObjectUrl_Base::C_Data)
{
    SET_INTERNAL_NAME("ObjectUrl", "BR_2");
    SET_CHOICE_MODULE("linkout");
    ADD_NAMED_REF_CHOICE_VARIANT("BaseData", m_object, C_BaseData)->SetNoPrefix()->SetNotag();
    ADD_NAMED_REF_CHOICE_VARIANT("Rule", m_object, C_Rule)->SetNoPrefix()->SetNotag();
}
END_CHOICE_INFO

// constructor
CObjectUrl_Base::C_Data::C_Data(void)
    : m_choice(e_not_set)
{
}

// destructor
CObjectUrl_Base::C_Data::~C_Data(void)
{
    Reset();
}


void CObjectUrl_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CObjectUrl_Base::SetAttlist(CObjectUrl_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CObjectUrl_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CObjectUrl_Base::SetData(CObjectUrl_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CObjectUrl_Base::ResetUrlName(void)
{
    m_UrlName.erase();
    m_set_State[0] &= ~0x30;
}

void CObjectUrl_Base::ResetSubjectType(void)
{
    m_SubjectType.clear();
    m_set_State[0] &= ~0xc0;
}

void CObjectUrl_Base::ResetAttribute(void)
{
    m_Attribute.clear();
    m_set_State[0] &= ~0x300;
}

void CObjectUrl_Base::Reset(void)
{
    ResetAttlist();
    ResetData();
    ResetUrlName();
    ResetSubjectType();
    ResetAttribute();
}

BEGIN_NAMED_BASE_CLASS_INFO("ObjectUrl", CObjectUrl)
{
    SET_CLASS_MODULE("linkout");
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_REF_MEMBER("Data", m_Data, C_Data)->SetNoPrefix()->SetNotag();
    ADD_NAMED_STD_MEMBER("UrlName", m_UrlName)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("SubjectType", m_SubjectType, STL_list, (STD, (NCBI_NS_STD::string)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("Attribute", m_Attribute, STL_list, (STD, (NCBI_NS_STD::string)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CObjectUrl_Base::CObjectUrl_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
        ResetData();
    }
}

// destructor
CObjectUrl_Base::~CObjectUrl_Base(void)
{
}



END_linkout_SCOPE // namespace linkout::

