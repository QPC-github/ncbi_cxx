/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'epost.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/epost/EPostResult.hpp>
#include <objtools/eutils/epost/InvalidIdList.hpp>
BEGIN_epost_SCOPE // namespace epost::


// generated classes

void CEPostResult_Base::C_History::ResetQueryKey(void)
{
    m_QueryKey.erase();
    m_set_State[0] &= ~0x3;
}

void CEPostResult_Base::C_History::ResetWebEnv(void)
{
    m_WebEnv.erase();
    m_set_State[0] &= ~0xc;
}

void CEPostResult_Base::C_History::Reset(void)
{
    ResetQueryKey();
    ResetWebEnv();
}

BEGIN_NAMED_CLASS_INFO("", CEPostResult_Base::C_History)
{
    SET_INTERNAL_NAME("ePostResult", "QW");
    SET_CLASS_MODULE("epost");
    ADD_NAMED_STD_MEMBER("QueryKey", m_QueryKey)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("WebEnv", m_WebEnv)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CEPostResult_Base::C_History::C_History(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CEPostResult_Base::C_History::~C_History(void)
{
}


void CEPostResult_Base::ResetInvalidIdList(void)
{
    m_InvalidIdList.Reset();
}

void CEPostResult_Base::SetInvalidIdList(CEPostResult_Base::TInvalidIdList& value)
{
    m_InvalidIdList.Reset(&value);
}

CEPostResult_Base::TInvalidIdList& CEPostResult_Base::SetInvalidIdList(void)
{
    if ( !m_InvalidIdList )
        m_InvalidIdList.Reset(new epost::CInvalidIdList());
    return (*m_InvalidIdList);
}

void CEPostResult_Base::ResetHistory(void)
{
    m_History.Reset();
}

void CEPostResult_Base::SetHistory(CEPostResult_Base::THistory& value)
{
    m_History.Reset(&value);
}

CEPostResult_Base::THistory& CEPostResult_Base::SetHistory(void)
{
    if ( !m_History )
        m_History.Reset(new C_History());
    return (*m_History);
}

void CEPostResult_Base::ResetERROR(void)
{
    m_ERROR.erase();
    m_set_State[0] &= ~0x30;
}

void CEPostResult_Base::Reset(void)
{
    ResetInvalidIdList();
    ResetHistory();
    ResetERROR();
}

BEGIN_NAMED_BASE_CLASS_INFO("ePostResult", CEPostResult)
{
    SET_CLASS_MODULE("epost");
    ADD_NAMED_REF_MEMBER("InvalidIdList", m_InvalidIdList, CInvalidIdList)->SetOptional()->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("History", m_History, C_History)->SetOptional()->SetNoPrefix()->SetNotag();
    ADD_NAMED_STD_MEMBER("ERROR", m_ERROR)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CEPostResult_Base::CEPostResult_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CEPostResult_Base::~CEPostResult_Base(void)
{
}



END_epost_SCOPE // namespace epost::

