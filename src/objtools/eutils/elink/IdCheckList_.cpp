/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'elink.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/elink/IdCheckList.hpp>
#include <objtools/eutils/elink/Id.hpp>
#include <objtools/eutils/elink/IdLinkSet.hpp>
BEGIN_elink_SCOPE // namespace elink::


// generated classes

void CIdCheckList_Base::C_II::C_E_II::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CIdCheckList_Base::C_II::C_E_II::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Id:
    case e_IdLinkSet:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CIdCheckList_Base::C_II::C_E_II::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Id:
        (m_object = new(pool) elink::CId())->AddReference();
        break;
    case e_IdLinkSet:
        (m_object = new(pool) elink::CIdLinkSet())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CIdCheckList_Base::C_II::C_E_II::sm_SelectionNames[] = {
    "not set",
    "Id",
    "IdLinkSet"
};

NCBI_NS_STD::string CIdCheckList_Base::C_II::C_E_II::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CIdCheckList_Base::C_II::C_E_II::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CIdCheckList_Base::C_II::C_E_II::TId& CIdCheckList_Base::C_II::C_E_II::GetId(void) const
{
    CheckSelected(e_Id);
    return *static_cast<const TId*>(m_object);
}

CIdCheckList_Base::C_II::C_E_II::TId& CIdCheckList_Base::C_II::C_E_II::SetId(void)
{
    Select(e_Id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TId*>(m_object);
}

void CIdCheckList_Base::C_II::C_E_II::SetId(CIdCheckList_Base::C_II::C_E_II::TId& value)
{
    TId* ptr = &value;
    if ( m_choice != e_Id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Id;
    }
}

void CIdCheckList_Base::C_II::C_E_II::SetId(const NCBI_NS_STD::string& value)
{
    SetId() = value;
}

const CIdCheckList_Base::C_II::C_E_II::TIdLinkSet& CIdCheckList_Base::C_II::C_E_II::GetIdLinkSet(void) const
{
    CheckSelected(e_IdLinkSet);
    return *static_cast<const TIdLinkSet*>(m_object);
}

CIdCheckList_Base::C_II::C_E_II::TIdLinkSet& CIdCheckList_Base::C_II::C_E_II::SetIdLinkSet(void)
{
    Select(e_IdLinkSet, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TIdLinkSet*>(m_object);
}

void CIdCheckList_Base::C_II::C_E_II::SetIdLinkSet(CIdCheckList_Base::C_II::C_E_II::TIdLinkSet& value)
{
    TIdLinkSet* ptr = &value;
    if ( m_choice != e_IdLinkSet || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_IdLinkSet;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CIdCheckList_Base::C_II::C_E_II)
{
    SET_INTERNAL_NAME("IdCheckList.II.II", "E");
    SET_CHOICE_MODULE("elink");
    ADD_NAMED_REF_CHOICE_VARIANT("Id", m_object, CId)->SetNoPrefix();
    ADD_NAMED_REF_CHOICE_VARIANT("IdLinkSet", m_object, CIdLinkSet)->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CIdCheckList_Base::C_II::C_E_II::C_E_II(void)
    : m_choice(e_not_set)
{
}

// destructor
CIdCheckList_Base::C_II::C_E_II::~C_E_II(void)
{
    Reset();
}


void CIdCheckList_Base::C_II::ResetII(void)
{
    m_II.clear();
    m_set_State[0] &= ~0x3;
}

void CIdCheckList_Base::C_II::Reset(void)
{
    ResetII();
}

BEGIN_NAMED_CLASS_INFO("", CIdCheckList_Base::C_II)
{
    SET_INTERNAL_NAME("IdCheckList", "II");
    SET_CLASS_MODULE("elink");
    ADD_NAMED_MEMBER("II", m_II, STL_list, (STL_CRef, (CLASS, (C_E_II))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix()->SetNotag();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIdCheckList_Base::C_II::C_II(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIdCheckList_Base::C_II::~C_II(void)
{
}


void CIdCheckList_Base::ResetII(void)
{
    m_II.Reset();
}

void CIdCheckList_Base::SetII(CIdCheckList_Base::TII& value)
{
    m_II.Reset(&value);
}

CIdCheckList_Base::TII& CIdCheckList_Base::SetII(void)
{
    if ( !m_II )
        m_II.Reset(new C_II());
    return (*m_II);
}

void CIdCheckList_Base::ResetERROR(void)
{
    m_ERROR.erase();
    m_set_State[0] &= ~0xc;
}

void CIdCheckList_Base::Reset(void)
{
    ResetII();
    ResetERROR();
}

BEGIN_NAMED_BASE_CLASS_INFO("IdCheckList", CIdCheckList)
{
    SET_CLASS_MODULE("elink");
    ADD_NAMED_REF_MEMBER("II", m_II, C_II)->SetOptional()->SetNoPrefix()->SetNotag();
    ADD_NAMED_STD_MEMBER("ERROR", m_ERROR)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIdCheckList_Base::CIdCheckList_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIdCheckList_Base::~CIdCheckList_Base(void)
{
}



END_elink_SCOPE // namespace elink::

