/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'elink.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/elink/LinkSetDb.hpp>
#include <objtools/eutils/elink/Link.hpp>
BEGIN_elink_SCOPE // namespace elink::


// generated classes

void CLinkSetDb_Base::C_Data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CLinkSetDb_Base::C_Data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Link:
        m_Link.Destruct();
        break;
    case e_Info:
        m_string.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CLinkSetDb_Base::C_Data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Link:
        m_Link.Construct();
        break;
    case e_Info:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CLinkSetDb_Base::C_Data::sm_SelectionNames[] = {
    "not set",
    "Link",
    "Info"
};

NCBI_NS_STD::string CLinkSetDb_Base::C_Data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CLinkSetDb_Base::C_Data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CLinkSetDb_Base::C_Data::SetInfo(const CLinkSetDb_Base::C_Data::TInfo& value)
{
    Select(e_Info, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CLinkSetDb_Base::C_Data)
{
    SET_INTERNAL_NAME("LinkSetDb", "LI");
    SET_CHOICE_MODULE("elink");
    ADD_NAMED_BUF_CHOICE_VARIANT("Link", m_Link, STL_list, (STL_CRef, (CLASS, (CLink))))->SetNoPrefix();
    ADD_NAMED_BUF_CHOICE_VARIANT("Info", m_string, STD, (NCBI_NS_STD::string))->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CLinkSetDb_Base::C_Data::C_Data(void)
    : m_choice(e_not_set)
{
}

// destructor
CLinkSetDb_Base::C_Data::~C_Data(void)
{
    Reset();
}


void CLinkSetDb_Base::ResetDbTo(void)
{
    m_DbTo.erase();
    m_set_State[0] &= ~0x3;
}

void CLinkSetDb_Base::ResetLinkName(void)
{
    m_LinkName.erase();
    m_set_State[0] &= ~0xc;
}

void CLinkSetDb_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CLinkSetDb_Base::SetData(CLinkSetDb_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CLinkSetDb_Base::ResetERROR(void)
{
    m_ERROR.erase();
    m_set_State[0] &= ~0xc0;
}

void CLinkSetDb_Base::Reset(void)
{
    ResetDbTo();
    ResetLinkName();
    ResetData();
    ResetERROR();
}

BEGIN_NAMED_BASE_CLASS_INFO("LinkSetDb", CLinkSetDb)
{
    SET_CLASS_MODULE("elink");
    ADD_NAMED_STD_MEMBER("DbTo", m_DbTo)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("LinkName", m_LinkName)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Data", m_Data, C_Data)->SetNoPrefix()->SetNotag();
    ADD_NAMED_STD_MEMBER("ERROR", m_ERROR)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CLinkSetDb_Base::CLinkSetDb_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetData();
    }
}

// destructor
CLinkSetDb_Base::~CLinkSetDb_Base(void)
{
}



END_elink_SCOPE // namespace elink::

