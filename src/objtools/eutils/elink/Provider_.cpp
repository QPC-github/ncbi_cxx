/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'elink.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/elink/Provider.hpp>
#include <objtools/eutils/elink/IconUrl.hpp>
#include <objtools/eutils/elink/Id.hpp>
#include <objtools/eutils/elink/Url.hpp>
BEGIN_elink_SCOPE // namespace elink::


// generated classes

void CProvider_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CProvider_Base::ResetNameAbbr(void)
{
    m_NameAbbr.erase();
    m_set_State[0] &= ~0xc;
}

void CProvider_Base::ResetId(void)
{
    if ( !m_Id ) {
        m_Id.Reset(new TId());
        return;
    }
    (*m_Id).Reset();
}

void CProvider_Base::SetId(CProvider_Base::TId& value)
{
    m_Id.Reset(&value);
}

void CProvider_Base::SetId(const NCBI_NS_STD::string& value)
{
    SetId() = value;
}

void CProvider_Base::ResetUrl(void)
{
    if ( !m_Url ) {
        m_Url.Reset(new TUrl());
        return;
    }
    (*m_Url).Reset();
}

void CProvider_Base::SetUrl(CProvider_Base::TUrl& value)
{
    m_Url.Reset(&value);
}

void CProvider_Base::SetUrl(const NCBI_NS_STD::string& value)
{
    SetUrl() = value;
}

void CProvider_Base::ResetIconUrl(void)
{
    m_IconUrl.Reset();
}

void CProvider_Base::SetIconUrl(CProvider_Base::TIconUrl& value)
{
    m_IconUrl.Reset(&value);
}

CProvider_Base::TIconUrl& CProvider_Base::SetIconUrl(void)
{
    if ( !m_IconUrl )
        m_IconUrl.Reset(new elink::CIconUrl());
    return (*m_IconUrl);
}

void CProvider_Base::SetIconUrl(const NCBI_NS_STD::string& value)
{
    SetIconUrl() = value;
}

void CProvider_Base::Reset(void)
{
    ResetName();
    ResetNameAbbr();
    ResetId();
    ResetUrl();
    ResetIconUrl();
}

BEGIN_NAMED_BASE_CLASS_INFO("Provider", CProvider)
{
    SET_CLASS_MODULE("elink");
    ADD_NAMED_STD_MEMBER("Name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("NameAbbr", m_NameAbbr)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Id", m_Id, CId)->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("Url", m_Url, CUrl)->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("IconUrl", m_IconUrl, CIconUrl)->SetOptional()->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CProvider_Base::CProvider_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetId();
        ResetUrl();
    }
}

// destructor
CProvider_Base::~CProvider_Base(void)
{
}



END_elink_SCOPE // namespace elink::

