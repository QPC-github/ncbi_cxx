/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'esummary.dtd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objtools/eutils/esummary/Item.hpp>
BEGIN_esummary_SCOPE // namespace esummary::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CItem_Base::C_Attlist::, EAttlist_Type, false)
{
    SET_ENUM_INTERNAL_NAME("Item.Attlist", "Type");
    SET_ENUM_MODULE("esummary");
    ADD_ENUM_VALUE("Integer", eAttlist_Type_Integer);
    ADD_ENUM_VALUE("Date", eAttlist_Type_Date);
    ADD_ENUM_VALUE("String", eAttlist_Type_String);
    ADD_ENUM_VALUE("Structure", eAttlist_Type_Structure);
    ADD_ENUM_VALUE("List", eAttlist_Type_List);
    ADD_ENUM_VALUE("Flags", eAttlist_Type_Flags);
    ADD_ENUM_VALUE("Qualifier", eAttlist_Type_Qualifier);
    ADD_ENUM_VALUE("Enumerator", eAttlist_Type_Enumerator);
    ADD_ENUM_VALUE("Unknown", eAttlist_Type_Unknown);
}
END_ENUM_INFO

void CItem_Base::C_Attlist::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CItem_Base::C_Attlist::Reset(void)
{
    ResetName();
    ResetType();
}

BEGIN_NAMED_CLASS_INFO("", CItem_Base::C_Attlist)
{
    SET_INTERNAL_NAME("Item", "Attlist");
    SET_CLASS_MODULE("esummary");
    ADD_NAMED_STD_MEMBER("Name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_ENUM_MEMBER("Type", m_Type, EAttlist_Type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CItem_Base::C_Attlist::C_Attlist(void)
    : m_Type((EAttlist_Type)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CItem_Base::C_Attlist::~C_Attlist(void)
{
}


void CItem_Base::C_E_Item::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CItem_Base::C_E_Item::ResetSelection(void)
{
    switch ( m_choice ) {
    case e__CharData:
        m_string.Destruct();
        break;
    case e_Item:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CItem_Base::C_E_Item::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Item:
        (m_object = new(pool) esummary::CItem())->AddReference();
        break;
    case e__CharData:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CItem_Base::C_E_Item::sm_SelectionNames[] = {
    "not set",
    "_CharData",
    "Item"
};

NCBI_NS_STD::string CItem_Base::C_E_Item::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CItem_Base::C_E_Item::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CItem_Base::C_E_Item::Set_CharData(const CItem_Base::C_E_Item::T_CharData& value)
{
    Select(e__CharData, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CItem_Base::C_E_Item::TItem& CItem_Base::C_E_Item::GetItem(void) const
{
    CheckSelected(e_Item);
    return *static_cast<const TItem*>(m_object);
}

CItem_Base::C_E_Item::TItem& CItem_Base::C_E_Item::SetItem(void)
{
    Select(e_Item, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TItem*>(m_object);
}

void CItem_Base::C_E_Item::SetItem(CItem_Base::C_E_Item::TItem& value)
{
    TItem* ptr = &value;
    if ( m_choice != e_Item || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Item;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CItem_Base::C_E_Item)
{
    SET_INTERNAL_NAME("Item.Item", "E");
    SET_CHOICE_MODULE("esummary");
    ADD_NAMED_BUF_CHOICE_VARIANT("_CharData", m_string, STD, (NCBI_NS_STD::string))->SetNoPrefix()->SetNotag();
    ADD_NAMED_REF_CHOICE_VARIANT("Item", m_object, CItem)->SetNoPrefix();
}
END_CHOICE_INFO

// constructor
CItem_Base::C_E_Item::C_E_Item(void)
    : m_choice(e_not_set)
{
}

// destructor
CItem_Base::C_E_Item::~C_E_Item(void)
{
    Reset();
}


void CItem_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CItem_Base::SetAttlist(CItem_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CItem_Base::ResetItem(void)
{
    m_Item.clear();
    m_set_State[0] &= ~0xc;
}

void CItem_Base::Reset(void)
{
    ResetAttlist();
    ResetItem();
}

BEGIN_NAMED_BASE_CLASS_INFO("Item", CItem)
{
    SET_CLASS_MODULE("esummary");
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_MEMBER("Item", m_Item, STL_list, (STL_CRef, (CLASS, (C_E_Item))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix()->SetNotag();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CItem_Base::CItem_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CItem_Base::~CItem_Base(void)
{
}



END_esummary_SCOPE // namespace esummary::

