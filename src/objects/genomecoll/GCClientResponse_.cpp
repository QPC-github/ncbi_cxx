/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'gencoll_client.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/genomecoll/GCClientResponse.hpp>
#include <objects/genomecoll/GCClient_Error.hpp>
#include <objects/genomecoll/GC_Assembly.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGCClientResponse_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CGCClientResponse_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Get_chrtype_valid:
        m_string.Destruct();
        break;
    case e_Get_assembly:
    case e_Srvr_error:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CGCClientResponse_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Get_assembly:
        (m_object = new(pool) ncbi::objects::CGC_Assembly())->AddReference();
        break;
    case e_Srvr_error:
        (m_object = new(pool) ncbi::objects::CGCClient_Error())->AddReference();
        break;
    case e_Get_chrtype_valid:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CGCClientResponse_Base::sm_SelectionNames[] = {
    "not set",
    "get-assembly",
    "get-chrtype-valid",
    "srvr-error"
};

NCBI_NS_STD::string CGCClientResponse_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CGCClientResponse_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CGCClientResponse_Base::TGet_assembly& CGCClientResponse_Base::GetGet_assembly(void) const
{
    CheckSelected(e_Get_assembly);
    return *static_cast<const TGet_assembly*>(m_object);
}

CGCClientResponse_Base::TGet_assembly& CGCClientResponse_Base::SetGet_assembly(void)
{
    Select(e_Get_assembly, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_assembly*>(m_object);
}

void CGCClientResponse_Base::SetGet_assembly(CGCClientResponse_Base::TGet_assembly& value)
{
    TGet_assembly* ptr = &value;
    if ( m_choice != e_Get_assembly || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_assembly;
    }
}

void CGCClientResponse_Base::SetGet_chrtype_valid(const CGCClientResponse_Base::TGet_chrtype_valid& value)
{
    Select(e_Get_chrtype_valid, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CGCClientResponse_Base::TSrvr_error& CGCClientResponse_Base::GetSrvr_error(void) const
{
    CheckSelected(e_Srvr_error);
    return *static_cast<const TSrvr_error*>(m_object);
}

CGCClientResponse_Base::TSrvr_error& CGCClientResponse_Base::SetSrvr_error(void)
{
    Select(e_Srvr_error, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSrvr_error*>(m_object);
}

void CGCClientResponse_Base::SetSrvr_error(CGCClientResponse_Base::TSrvr_error& value)
{
    TSrvr_error* ptr = &value;
    if ( m_choice != e_Srvr_error || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Srvr_error;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("GCClientResponse", CGCClientResponse)
{
    SET_CHOICE_MODULE("NCBI-GencollClient");
    ADD_NAMED_REF_CHOICE_VARIANT("get-assembly", m_object, CGC_Assembly);
    ADD_NAMED_BUF_CHOICE_VARIANT("get-chrtype-valid", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("srvr-error", m_object, CGCClient_Error);
}
END_CHOICE_INFO

// constructor
CGCClientResponse_Base::CGCClientResponse_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CGCClientResponse_Base::~CGCClientResponse_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

