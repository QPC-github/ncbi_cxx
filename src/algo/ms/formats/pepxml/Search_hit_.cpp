/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pepXML.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <algo/ms/formats/pepxml/Search_hit.hpp>
#include <algo/ms/formats/pepxml/Alternative_protein.hpp>
#include <algo/ms/formats/pepxml/Analysis_result.hpp>
#include <algo/ms/formats/pepxml/Modification_info.hpp>
#include <algo/ms/formats/pepxml/Parameter.hpp>
#include <algo/ms/formats/pepxml/Search_score.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSearch_hit_Base::C_Attlist::, EAttlist_is_rejected, false)
{
    SET_ENUM_INTERNAL_NAME("search_hit.Attlist", "is_rejected");
    SET_ENUM_MODULE("pepXML");
    ADD_ENUM_VALUE("0", eAttlist_is_rejected_0);
    ADD_ENUM_VALUE("1", eAttlist_is_rejected_1);
}
END_ENUM_INFO

void CSearch_hit_Base::C_Attlist::ResetPeptide(void)
{
    m_Peptide.erase();
    m_set_State[0] &= ~0xc;
}

void CSearch_hit_Base::C_Attlist::ResetPeptide_prev_aa(void)
{
    m_Peptide_prev_aa.erase();
    m_set_State[0] &= ~0x30;
}

void CSearch_hit_Base::C_Attlist::ResetPeptide_next_aa(void)
{
    m_Peptide_next_aa.erase();
    m_set_State[0] &= ~0xc0;
}

void CSearch_hit_Base::C_Attlist::ResetProtein(void)
{
    m_Protein.erase();
    m_set_State[0] &= ~0x300;
}

void CSearch_hit_Base::C_Attlist::ResetMassdiff(void)
{
    m_Massdiff.erase();
    m_set_State[0] &= ~0xc0000;
}

void CSearch_hit_Base::C_Attlist::ResetProtein_descr(void)
{
    m_Protein_descr.erase();
    m_set_State[0] &= ~0xc000000;
}

void CSearch_hit_Base::C_Attlist::ResetCalc_pI(void)
{
    m_Calc_pI.erase();
    m_set_State[0] &= ~0x30000000;
}

void CSearch_hit_Base::C_Attlist::Reset(void)
{
    ResetHit_rank();
    ResetPeptide();
    ResetPeptide_prev_aa();
    ResetPeptide_next_aa();
    ResetProtein();
    ResetNum_tot_proteins();
    ResetNum_matched_ions();
    ResetTot_num_ions();
    ResetCalc_neutral_pep_mass();
    ResetMassdiff();
    ResetNum_tol_term();
    ResetNum_missed_cleavages();
    ResetIs_rejected();
    ResetProtein_descr();
    ResetCalc_pI();
    ResetProtein_mw();
}

BEGIN_NAMED_CLASS_INFO("", CSearch_hit_Base::C_Attlist)
{
    SET_INTERNAL_NAME("search_hit", "Attlist");
    SET_CLASS_MODULE("pepXML");
    ADD_NAMED_STD_MEMBER("hit_rank", m_Hit_rank)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("peptide", m_Peptide)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("peptide_prev_aa", m_Peptide_prev_aa)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("peptide_next_aa", m_Peptide_next_aa)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("protein", m_Protein)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("num_tot_proteins", m_Num_tot_proteins)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("num_matched_ions", m_Num_matched_ions)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("tot_num_ions", m_Tot_num_ions)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("calc_neutral_pep_mass", m_Calc_neutral_pep_mass)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("massdiff", m_Massdiff)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("num_tol_term", m_Num_tol_term)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("num_missed_cleavages", m_Num_missed_cleavages)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_ENUM_MEMBER("is_rejected", m_Is_rejected, EAttlist_is_rejected)->SetDefault(new TIs_rejected(eAttlist_is_rejected_0))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("protein_descr", m_Protein_descr)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("calc_pI", m_Calc_pI)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("protein_mw", m_Protein_mw)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CSearch_hit_Base::C_Attlist::C_Attlist(void)
    : m_Hit_rank(0), m_Num_tot_proteins(0), m_Num_matched_ions(0), m_Tot_num_ions(0), m_Calc_neutral_pep_mass(0), m_Num_tol_term(0), m_Num_missed_cleavages(0), m_Is_rejected(eAttlist_is_rejected_0), m_Protein_mw(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CSearch_hit_Base::C_Attlist::~C_Attlist(void)
{
}


void CSearch_hit_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CSearch_hit_Base::SetAttlist(CSearch_hit_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CSearch_hit_Base::ResetAlternative_protein(void)
{
    m_Alternative_protein.clear();
    m_set_State[0] &= ~0xc;
}

void CSearch_hit_Base::ResetModification_info(void)
{
    m_Modification_info.Reset();
}

void CSearch_hit_Base::SetModification_info(CSearch_hit_Base::TModification_info& value)
{
    m_Modification_info.Reset(&value);
}

CSearch_hit_Base::TModification_info& CSearch_hit_Base::SetModification_info(void)
{
    if ( !m_Modification_info )
        m_Modification_info.Reset(new ncbi::objects::CModification_info());
    return (*m_Modification_info);
}

void CSearch_hit_Base::ResetSearch_score(void)
{
    m_Search_score.clear();
    m_set_State[0] &= ~0xc0;
}

void CSearch_hit_Base::ResetAnalysis_result(void)
{
    m_Analysis_result.clear();
    m_set_State[0] &= ~0x300;
}

void CSearch_hit_Base::ResetParameter(void)
{
    m_Parameter.clear();
    m_set_State[0] &= ~0xc00;
}

void CSearch_hit_Base::Reset(void)
{
    ResetAttlist();
    ResetAlternative_protein();
    ResetModification_info();
    ResetSearch_score();
    ResetAnalysis_result();
    ResetParameter();
}

BEGIN_NAMED_BASE_CLASS_INFO("search_hit", CSearch_hit)
{
    SET_CLASS_MODULE("pepXML");
    SET_NAMESPACE("http://regis-web.systemsbiology.net/pepXML")->SetNsQualified(true);
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_MEMBER("alternative_protein", m_Alternative_protein, STL_list, (STL_CRef, (CLASS, (CAlternative_protein))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("modification_info", m_Modification_info, CModification_info)->SetOptional()->SetNoPrefix();
    ADD_NAMED_MEMBER("search_score", m_Search_score, STL_list, (STL_CRef, (CLASS, (CSearch_score))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("analysis_result", m_Analysis_result, STL_list, (STL_CRef, (CLASS, (CAnalysis_result))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("parameter", m_Parameter, STL_list, (STL_CRef, (CLASS, (CParameter))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CSearch_hit_Base::CSearch_hit_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CSearch_hit_Base::~CSearch_hit_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

