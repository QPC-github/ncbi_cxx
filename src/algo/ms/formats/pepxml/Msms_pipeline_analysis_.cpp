/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pepXML.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <algo/ms/formats/pepxml/Msms_pipeline_analysis.hpp>
#include <algo/ms/formats/pepxml/Analysis_summary.hpp>
#include <algo/ms/formats/pepxml/Dataset_derivation.hpp>
#include <algo/ms/formats/pepxml/Msms_run_summary.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CMsms_pipeline_analysis_Base::C_Attlist::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CMsms_pipeline_analysis_Base::C_Attlist::ResetDate(void)
{
    m_Date.erase();
    m_set_State[0] &= ~0xc;
}

void CMsms_pipeline_analysis_Base::C_Attlist::ResetSummary_xml(void)
{
    m_Summary_xml.erase();
    m_set_State[0] &= ~0x30;
}

void CMsms_pipeline_analysis_Base::C_Attlist::Reset(void)
{
    ResetName();
    ResetDate();
    ResetSummary_xml();
}

BEGIN_NAMED_CLASS_INFO("", CMsms_pipeline_analysis_Base::C_Attlist)
{
    SET_INTERNAL_NAME("msms_pipeline_analysis", "Attlist");
    SET_CLASS_MODULE("pepXML");
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("date", m_Date)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("summary_xml", m_Summary_xml)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CMsms_pipeline_analysis_Base::C_Attlist::C_Attlist(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CMsms_pipeline_analysis_Base::C_Attlist::~C_Attlist(void)
{
}


void CMsms_pipeline_analysis_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CMsms_pipeline_analysis_Base::SetAttlist(CMsms_pipeline_analysis_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CMsms_pipeline_analysis_Base::ResetAnalysis_summary(void)
{
    m_Analysis_summary.clear();
    m_set_State[0] &= ~0xc;
}

void CMsms_pipeline_analysis_Base::ResetDataset_derivation(void)
{
    m_Dataset_derivation.Reset();
}

void CMsms_pipeline_analysis_Base::SetDataset_derivation(CMsms_pipeline_analysis_Base::TDataset_derivation& value)
{
    m_Dataset_derivation.Reset(&value);
}

CMsms_pipeline_analysis_Base::TDataset_derivation& CMsms_pipeline_analysis_Base::SetDataset_derivation(void)
{
    if ( !m_Dataset_derivation )
        m_Dataset_derivation.Reset(new ncbi::objects::CDataset_derivation());
    return (*m_Dataset_derivation);
}

void CMsms_pipeline_analysis_Base::ResetMsms_run_summary(void)
{
    m_Msms_run_summary.clear();
    m_set_State[0] &= ~0xc0;
}

void CMsms_pipeline_analysis_Base::Reset(void)
{
    ResetAttlist();
    ResetAnalysis_summary();
    ResetDataset_derivation();
    ResetMsms_run_summary();
}

BEGIN_NAMED_BASE_CLASS_INFO("msms_pipeline_analysis", CMsms_pipeline_analysis)
{
    SET_CLASS_MODULE("pepXML");
    SET_NAMESPACE("http://regis-web.systemsbiology.net/pepXML")->SetNsQualified(true);
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_MEMBER("analysis_summary", m_Analysis_summary, STL_list, (STL_CRef, (CLASS, (CAnalysis_summary))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("dataset_derivation", m_Dataset_derivation, CDataset_derivation)->SetOptional()->SetNoPrefix();
    ADD_NAMED_MEMBER("msms_run_summary", m_Msms_run_summary, STL_list, (STL_CRef, (CLASS, (CMsms_run_summary))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CMsms_pipeline_analysis_Base::CMsms_pipeline_analysis_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CMsms_pipeline_analysis_Base::~CMsms_pipeline_analysis_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

