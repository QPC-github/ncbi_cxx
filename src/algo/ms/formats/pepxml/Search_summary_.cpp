/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pepXML.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <algo/ms/formats/pepxml/Search_summary.hpp>
#include <algo/ms/formats/pepxml/Aminoacid_modification.hpp>
#include <algo/ms/formats/pepxml/Enzymatic_search_constrain.hpp>
#include <algo/ms/formats/pepxml/Parameter.hpp>
#include <algo/ms/formats/pepxml/Search_database.hpp>
#include <algo/ms/formats/pepxml/Sequence_search_constraint.hpp>
#include <algo/ms/formats/pepxml/Terminal_modification.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSearch_summary_Base::C_Attlist::, EAttlist_precursor_mass_type, false)
{
    SET_ENUM_INTERNAL_NAME("search_summary.Attlist", "precursor_mass_type");
    SET_ENUM_MODULE("pepXML");
    ADD_ENUM_VALUE("monoisotopic", eAttlist_precursor_mass_type_monoisotopic);
    ADD_ENUM_VALUE("average", eAttlist_precursor_mass_type_average);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CSearch_summary_Base::C_Attlist::, EAttlist_fragment_mass_type, false)
{
    SET_ENUM_INTERNAL_NAME("search_summary.Attlist", "fragment_mass_type");
    SET_ENUM_MODULE("pepXML");
    ADD_ENUM_VALUE("monoisotopic", eAttlist_fragment_mass_type_monoisotopic);
    ADD_ENUM_VALUE("average", eAttlist_fragment_mass_type_average);
}
END_ENUM_INFO

void CSearch_summary_Base::C_Attlist::ResetBase_name(void)
{
    m_Base_name.erase();
    m_set_State[0] &= ~0x3;
}

void CSearch_summary_Base::C_Attlist::ResetSearch_engine(void)
{
    m_Search_engine.erase();
    m_set_State[0] &= ~0xc;
}

void CSearch_summary_Base::C_Attlist::ResetOut_data_type(void)
{
    m_Out_data_type.erase();
    m_set_State[0] &= ~0x300;
}

void CSearch_summary_Base::C_Attlist::ResetOut_data(void)
{
    m_Out_data.erase();
    m_set_State[0] &= ~0xc00;
}

void CSearch_summary_Base::C_Attlist::Reset(void)
{
    ResetBase_name();
    ResetSearch_engine();
    ResetPrecursor_mass_type();
    ResetFragment_mass_type();
    ResetOut_data_type();
    ResetOut_data();
    ResetSearch_id();
}

BEGIN_NAMED_CLASS_INFO("", CSearch_summary_Base::C_Attlist)
{
    SET_INTERNAL_NAME("search_summary", "Attlist");
    SET_CLASS_MODULE("pepXML");
    ADD_NAMED_STD_MEMBER("base_name", m_Base_name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("search_engine", m_Search_engine)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_ENUM_MEMBER("precursor_mass_type", m_Precursor_mass_type, EAttlist_precursor_mass_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_ENUM_MEMBER("fragment_mass_type", m_Fragment_mass_type, EAttlist_fragment_mass_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("out_data_type", m_Out_data_type)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("out_data", m_Out_data)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("search_id", m_Search_id)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CSearch_summary_Base::C_Attlist::C_Attlist(void)
    : m_Precursor_mass_type((EAttlist_precursor_mass_type)(0)), m_Fragment_mass_type((EAttlist_fragment_mass_type)(0)), m_Search_id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CSearch_summary_Base::C_Attlist::~C_Attlist(void)
{
}


void CSearch_summary_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CSearch_summary_Base::SetAttlist(CSearch_summary_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

bool CSearch_summary_Base::IsSetSearch_database(void) const
{
    return m_Search_database ? m_Search_database->IsSetSearch_database() : false;
}

void CSearch_summary_Base::ResetSearch_database(void)
{
    m_Search_database.Reset();
}

void CSearch_summary_Base::SetSearch_database(CSearch_summary_Base::TSearch_database& value)
{
    m_Search_database.Reset(&value);
}

CSearch_summary_Base::TSearch_database& CSearch_summary_Base::SetSearch_database(void)
{
    if ( !m_Search_database )
        m_Search_database.Reset(new ncbi::objects::CSearch_database());
    m_Search_database->SetSearch_database();
    return (*m_Search_database);
}

bool CSearch_summary_Base::IsSetEnzymatic_search_constraint(void) const
{
    return m_Enzymatic_search_constraint ? m_Enzymatic_search_constraint->IsSetEnzymatic_search_constraint() : false;
}

void CSearch_summary_Base::ResetEnzymatic_search_constraint(void)
{
    m_Enzymatic_search_constraint.Reset();
}

void CSearch_summary_Base::SetEnzymatic_search_constraint(CSearch_summary_Base::TEnzymatic_search_constraint& value)
{
    m_Enzymatic_search_constraint.Reset(&value);
}

CSearch_summary_Base::TEnzymatic_search_constraint& CSearch_summary_Base::SetEnzymatic_search_constraint(void)
{
    if ( !m_Enzymatic_search_constraint )
        m_Enzymatic_search_constraint.Reset(new ncbi::objects::CEnzymatic_search_constraint());
    m_Enzymatic_search_constraint->SetEnzymatic_search_constraint();
    return (*m_Enzymatic_search_constraint);
}

void CSearch_summary_Base::ResetSequence_search_constraint(void)
{
    m_Sequence_search_constraint.clear();
    m_set_State[0] &= ~0xc0;
}

void CSearch_summary_Base::ResetAminoacid_modification(void)
{
    m_Aminoacid_modification.clear();
    m_set_State[0] &= ~0x300;
}

void CSearch_summary_Base::ResetTerminal_modification(void)
{
    m_Terminal_modification.clear();
    m_set_State[0] &= ~0xc00;
}

void CSearch_summary_Base::ResetParameter(void)
{
    m_Parameter.clear();
    m_set_State[0] &= ~0x3000;
}

void CSearch_summary_Base::Reset(void)
{
    ResetAttlist();
    ResetSearch_database();
    ResetEnzymatic_search_constraint();
    ResetSequence_search_constraint();
    ResetAminoacid_modification();
    ResetTerminal_modification();
    ResetParameter();
}

BEGIN_NAMED_BASE_CLASS_INFO("search_summary", CSearch_summary)
{
    SET_CLASS_MODULE("pepXML");
    SET_NAMESPACE("http://regis-web.systemsbiology.net/pepXML")->SetNsQualified(true);
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_REF_MEMBER("search_database", m_Search_database, CSearch_database)->SetOptional()->SetNoPrefix();
    ADD_NAMED_REF_MEMBER("enzymatic_search_constraint", m_Enzymatic_search_constraint, CEnzymatic_search_constraint)->SetOptional()->SetNoPrefix();
    ADD_NAMED_MEMBER("sequence_search_constraint", m_Sequence_search_constraint, STL_list, (STL_CRef, (CLASS, (CSequence_search_constraint))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("aminoacid_modification", m_Aminoacid_modification, STL_list, (STL_CRef, (CLASS, (CAminoacid_modification))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("terminal_modification", m_Terminal_modification, STL_list, (STL_CRef, (CLASS, (CTerminal_modification))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("parameter", m_Parameter, STL_list, (STL_CRef, (CLASS, (CParameter))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CSearch_summary_Base::CSearch_summary_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CSearch_summary_Base::~CSearch_summary_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

