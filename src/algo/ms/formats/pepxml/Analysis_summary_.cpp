/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pepXML.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <algo/ms/formats/pepxml/Analysis_summary.hpp>
#include <algo/ms/formats/pepxml/Asapratio_summary.hpp>
#include <algo/ms/formats/pepxml/Interact_summary.hpp>
#include <algo/ms/formats/pepxml/Libra_summary.hpp>
#include <algo/ms/formats/pepxml/Peptideprophet_summary.hpp>
#include <algo/ms/formats/pepxml/Xpressratio_summary.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CAnalysis_summary_Base::C_Attlist::ResetTime(void)
{
    m_Time.erase();
    m_set_State[0] &= ~0x3;
}

void CAnalysis_summary_Base::C_Attlist::ResetAnalysis(void)
{
    m_Analysis.erase();
    m_set_State[0] &= ~0xc;
}

void CAnalysis_summary_Base::C_Attlist::ResetVersion(void)
{
    m_Version.erase();
    m_set_State[0] &= ~0x30;
}

void CAnalysis_summary_Base::C_Attlist::Reset(void)
{
    ResetTime();
    ResetAnalysis();
    ResetVersion();
}

BEGIN_NAMED_CLASS_INFO("", CAnalysis_summary_Base::C_Attlist)
{
    SET_INTERNAL_NAME("analysis_summary", "Attlist");
    SET_CLASS_MODULE("pepXML");
    ADD_NAMED_STD_MEMBER("time", m_Time)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("analysis", m_Analysis)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("version", m_Version)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CAnalysis_summary_Base::C_Attlist::C_Attlist(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAnalysis_summary_Base::C_Attlist::~C_Attlist(void)
{
}


void CAnalysis_summary_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CAnalysis_summary_Base::SetAttlist(CAnalysis_summary_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CAnalysis_summary_Base::ResetPeptideprophet_summary(void)
{
    m_Peptideprophet_summary.clear();
    m_set_State[0] &= ~0xc;
}

void CAnalysis_summary_Base::ResetInteract_summary(void)
{
    m_Interact_summary.clear();
    m_set_State[0] &= ~0x30;
}

void CAnalysis_summary_Base::ResetLibra_summary(void)
{
    m_Libra_summary.clear();
    m_set_State[0] &= ~0xc0;
}

void CAnalysis_summary_Base::ResetAsapratio_summary(void)
{
    m_Asapratio_summary.clear();
    m_set_State[0] &= ~0x300;
}

void CAnalysis_summary_Base::ResetXpressratio_summary(void)
{
    m_Xpressratio_summary.clear();
    m_set_State[0] &= ~0xc00;
}

void CAnalysis_summary_Base::Reset(void)
{
    ResetAttlist();
    ResetPeptideprophet_summary();
    ResetInteract_summary();
    ResetLibra_summary();
    ResetAsapratio_summary();
    ResetXpressratio_summary();
}

BEGIN_NAMED_BASE_CLASS_INFO("analysis_summary", CAnalysis_summary)
{
    SET_CLASS_MODULE("pepXML");
    SET_NAMESPACE("http://regis-web.systemsbiology.net/pepXML")->SetNsQualified(true);
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_MEMBER("peptideprophet_summary", m_Peptideprophet_summary, STL_list, (STL_CRef, (CLASS, (CPeptideprophet_summary))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("interact_summary", m_Interact_summary, STL_list, (STL_CRef, (CLASS, (CInteract_summary))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("libra_summary", m_Libra_summary, STL_list, (STL_CRef, (CLASS, (CLibra_summary))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("asapratio_summary", m_Asapratio_summary, STL_list, (STL_CRef, (CLASS, (CAsapratio_summary))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("xpressratio_summary", m_Xpressratio_summary, STL_list, (STL_CRef, (CLASS, (CXpressratio_summary))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CAnalysis_summary_Base::CAnalysis_summary_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CAnalysis_summary_Base::~CAnalysis_summary_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

