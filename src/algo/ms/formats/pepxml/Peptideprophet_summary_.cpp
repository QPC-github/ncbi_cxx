/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pepXML.xsd'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <algo/ms/formats/pepxml/Peptideprophet_summary.hpp>
#include <algo/ms/formats/pepxml/Distribution_point.hpp>
#include <algo/ms/formats/pepxml/Error_point.hpp>
#include <algo/ms/formats/pepxml/Inputfile.hpp>
#include <algo/ms/formats/pepxml/Mixture_model.hpp>
#include <algo/ms/formats/pepxml/Roc_data_point.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CPeptideprophet_summary_Base::C_Attlist::ResetVersion(void)
{
    m_Version.erase();
    m_set_State[0] &= ~0x3;
}

void CPeptideprophet_summary_Base::C_Attlist::ResetAuthor(void)
{
    m_Author.erase();
    m_set_State[0] &= ~0xc;
}

void CPeptideprophet_summary_Base::C_Attlist::ResetOptions(void)
{
    m_Options.erase();
    m_set_State[0] &= ~0xc0;
}

void CPeptideprophet_summary_Base::C_Attlist::Reset(void)
{
    ResetVersion();
    ResetAuthor();
    ResetMin_prob();
    ResetOptions();
    ResetEst_tot_num_correct();
}

BEGIN_NAMED_CLASS_INFO("", CPeptideprophet_summary_Base::C_Attlist)
{
    SET_INTERNAL_NAME("peptideprophet_summary", "Attlist");
    SET_CLASS_MODULE("pepXML");
    ADD_NAMED_STD_MEMBER("version", m_Version)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("author", m_Author)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("min_prob", m_Min_prob)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("options", m_Options)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_STD_MEMBER("est_tot_num_correct", m_Est_tot_num_correct)->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->SetRandomOrder(true);
}
END_CLASS_INFO

// constructor
CPeptideprophet_summary_Base::C_Attlist::C_Attlist(void)
    : m_Min_prob(0), m_Est_tot_num_correct(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CPeptideprophet_summary_Base::C_Attlist::~C_Attlist(void)
{
}


void CPeptideprophet_summary_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CPeptideprophet_summary_Base::SetAttlist(CPeptideprophet_summary_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CPeptideprophet_summary_Base::ResetInputfile(void)
{
    m_Inputfile.clear();
    m_set_State[0] &= ~0xc;
}

void CPeptideprophet_summary_Base::ResetRoc_data_point(void)
{
    m_Roc_data_point.clear();
    m_set_State[0] &= ~0x30;
}

void CPeptideprophet_summary_Base::ResetError_point(void)
{
    m_Error_point.clear();
    m_set_State[0] &= ~0xc0;
}

void CPeptideprophet_summary_Base::ResetDistribution_point(void)
{
    m_Distribution_point.clear();
    m_set_State[0] &= ~0x300;
}

void CPeptideprophet_summary_Base::ResetMixture_model(void)
{
    m_Mixture_model.clear();
    m_set_State[0] &= ~0xc00;
}

void CPeptideprophet_summary_Base::Reset(void)
{
    ResetAttlist();
    ResetInputfile();
    ResetRoc_data_point();
    ResetError_point();
    ResetDistribution_point();
    ResetMixture_model();
}

BEGIN_NAMED_BASE_CLASS_INFO("peptideprophet_summary", CPeptideprophet_summary)
{
    SET_CLASS_MODULE("pepXML");
    SET_NAMESPACE("http://regis-web.systemsbiology.net/pepXML")->SetNsQualified(true);
    ADD_NAMED_REF_MEMBER("Attlist", m_Attlist, C_Attlist)->SetNoPrefix()->SetAttlist();
    ADD_NAMED_MEMBER("inputfile", m_Inputfile, STL_list, (STL_CRef, (CLASS, (CInputfile))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("roc_data_point", m_Roc_data_point, STL_list, (STL_CRef, (CLASS, (CRoc_data_point))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("error_point", m_Error_point, STL_list, (STL_CRef, (CLASS, (CError_point))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("distribution_point", m_Distribution_point, STL_list, (STL_CRef, (CLASS, (CDistribution_point))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    ADD_NAMED_MEMBER("mixture_model", m_Mixture_model, STL_list, (STL_CRef, (CLASS, (CMixture_model))))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetNoPrefix();
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CPeptideprophet_summary_Base::CPeptideprophet_summary_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CPeptideprophet_summary_Base::~CPeptideprophet_summary_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

