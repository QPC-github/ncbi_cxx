/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'gnomon.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <algo/gnomon/Exon_params.hpp>
#include <algo/gnomon/Length_distribution_params.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CExon_params_Base::ResetFirst_exon_phase_probabilities(void)
{
    m_First_exon_phase_probabilities.clear();
    m_set_State[0] &= ~0x3;
}

void CExon_params_Base::ResetInternal_exon_phase_probabilities(void)
{
    m_Internal_exon_phase_probabilities.clear();
    m_set_State[0] &= ~0xc;
}

void CExon_params_Base::ResetFirst_exon_length(void)
{
    if ( !m_First_exon_length ) {
        m_First_exon_length.Reset(new TFirst_exon_length());
        return;
    }
    (*m_First_exon_length).Reset();
}

void CExon_params_Base::SetFirst_exon_length(CExon_params_Base::TFirst_exon_length& value)
{
    m_First_exon_length.Reset(&value);
}

void CExon_params_Base::ResetInternal_exon_length(void)
{
    if ( !m_Internal_exon_length ) {
        m_Internal_exon_length.Reset(new TInternal_exon_length());
        return;
    }
    (*m_Internal_exon_length).Reset();
}

void CExon_params_Base::SetInternal_exon_length(CExon_params_Base::TInternal_exon_length& value)
{
    m_Internal_exon_length.Reset(&value);
}

void CExon_params_Base::ResetLast_exon_length(void)
{
    if ( !m_Last_exon_length ) {
        m_Last_exon_length.Reset(new TLast_exon_length());
        return;
    }
    (*m_Last_exon_length).Reset();
}

void CExon_params_Base::SetLast_exon_length(CExon_params_Base::TLast_exon_length& value)
{
    m_Last_exon_length.Reset(&value);
}

void CExon_params_Base::ResetSingle_exon_length(void)
{
    if ( !m_Single_exon_length ) {
        m_Single_exon_length.Reset(new TSingle_exon_length());
        return;
    }
    (*m_Single_exon_length).Reset();
}

void CExon_params_Base::SetSingle_exon_length(CExon_params_Base::TSingle_exon_length& value)
{
    m_Single_exon_length.Reset(&value);
}

void CExon_params_Base::Reset(void)
{
    ResetFirst_exon_phase_probabilities();
    ResetInternal_exon_phase_probabilities();
    ResetFirst_exon_length();
    ResetInternal_exon_length();
    ResetLast_exon_length();
    ResetSingle_exon_length();
}

BEGIN_NAMED_BASE_CLASS_INFO("Exon-params", CExon_params)
{
    SET_CLASS_MODULE("NCBI-GNOMON");
    ADD_NAMED_MEMBER("first-exon-phase-probabilities", m_First_exon_phase_probabilities, STL_list, (STD, (double)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("internal-exon-phase-probabilities", m_Internal_exon_phase_probabilities, STL_list, (STD, (double)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_REF_MEMBER("first-exon-length", m_First_exon_length, CLength_distribution_params);
    ADD_NAMED_REF_MEMBER("internal-exon-length", m_Internal_exon_length, CLength_distribution_params);
    ADD_NAMED_REF_MEMBER("last-exon-length", m_Last_exon_length, CLength_distribution_params);
    ADD_NAMED_REF_MEMBER("single-exon-length", m_Single_exon_length, CLength_distribution_params);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CExon_params_Base::CExon_params_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetFirst_exon_length();
        ResetInternal_exon_length();
        ResetLast_exon_length();
        ResetSingle_exon_length();
    }
}

// destructor
CExon_params_Base::~CExon_params_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

